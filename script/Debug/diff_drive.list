
diff_drive.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b178  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000850  0800b308  0800b308  0000c308  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bb58  0800bb58  0000d1f8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bb58  0800bb58  0000cb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bb60  0800bb60  0000d1f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800bb60  0800bb60  0000cb60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bb68  0800bb68  0000cb68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  20000000  0800bb6c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d1f8  2**0
                  CONTENTS
 10 .bss          0000057c  200001f8  200001f8  0000d1f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000774  20000774  0000d1f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d1f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016d25  00000000  00000000  0000d228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003044  00000000  00000000  00023f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ea0  00000000  00000000  00026f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b4c  00000000  00000000  00027e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026266  00000000  00000000  00028984  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001414f  00000000  00000000  0004ebea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d10a3  00000000  00000000  00062d39  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133ddc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005300  00000000  00000000  00133e20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000056  00000000  00000000  00139120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b2f0 	.word	0x0800b2f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	0800b2f0 	.word	0x0800b2f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a0 	b.w	8000fe0 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	@ (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	@ (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	460c      	mov	r4, r1
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d14e      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d30:	4694      	mov	ip, r2
 8000d32:	458c      	cmp	ip, r1
 8000d34:	4686      	mov	lr, r0
 8000d36:	fab2 f282 	clz	r2, r2
 8000d3a:	d962      	bls.n	8000e02 <__udivmoddi4+0xde>
 8000d3c:	b14a      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d3e:	f1c2 0320 	rsb	r3, r2, #32
 8000d42:	4091      	lsls	r1, r2
 8000d44:	fa20 f303 	lsr.w	r3, r0, r3
 8000d48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4c:	4319      	orrs	r1, r3
 8000d4e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d52:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d56:	fa1f f68c 	uxth.w	r6, ip
 8000d5a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d62:	fb07 1114 	mls	r1, r7, r4, r1
 8000d66:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d6a:	fb04 f106 	mul.w	r1, r4, r6
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d7a:	f080 8112 	bcs.w	8000fa2 <__udivmoddi4+0x27e>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 810f 	bls.w	8000fa2 <__udivmoddi4+0x27e>
 8000d84:	3c02      	subs	r4, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a59      	subs	r1, r3, r1
 8000d8a:	fa1f f38e 	uxth.w	r3, lr
 8000d8e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d92:	fb07 1110 	mls	r1, r7, r0, r1
 8000d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d9a:	fb00 f606 	mul.w	r6, r0, r6
 8000d9e:	429e      	cmp	r6, r3
 8000da0:	d90a      	bls.n	8000db8 <__udivmoddi4+0x94>
 8000da2:	eb1c 0303 	adds.w	r3, ip, r3
 8000da6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000daa:	f080 80fc 	bcs.w	8000fa6 <__udivmoddi4+0x282>
 8000dae:	429e      	cmp	r6, r3
 8000db0:	f240 80f9 	bls.w	8000fa6 <__udivmoddi4+0x282>
 8000db4:	4463      	add	r3, ip
 8000db6:	3802      	subs	r0, #2
 8000db8:	1b9b      	subs	r3, r3, r6
 8000dba:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dbe:	2100      	movs	r1, #0
 8000dc0:	b11d      	cbz	r5, 8000dca <__udivmoddi4+0xa6>
 8000dc2:	40d3      	lsrs	r3, r2
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d905      	bls.n	8000dde <__udivmoddi4+0xba>
 8000dd2:	b10d      	cbz	r5, 8000dd8 <__udivmoddi4+0xb4>
 8000dd4:	e9c5 0100 	strd	r0, r1, [r5]
 8000dd8:	2100      	movs	r1, #0
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e7f5      	b.n	8000dca <__udivmoddi4+0xa6>
 8000dde:	fab3 f183 	clz	r1, r3
 8000de2:	2900      	cmp	r1, #0
 8000de4:	d146      	bne.n	8000e74 <__udivmoddi4+0x150>
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	d302      	bcc.n	8000df0 <__udivmoddi4+0xcc>
 8000dea:	4290      	cmp	r0, r2
 8000dec:	f0c0 80f0 	bcc.w	8000fd0 <__udivmoddi4+0x2ac>
 8000df0:	1a86      	subs	r6, r0, r2
 8000df2:	eb64 0303 	sbc.w	r3, r4, r3
 8000df6:	2001      	movs	r0, #1
 8000df8:	2d00      	cmp	r5, #0
 8000dfa:	d0e6      	beq.n	8000dca <__udivmoddi4+0xa6>
 8000dfc:	e9c5 6300 	strd	r6, r3, [r5]
 8000e00:	e7e3      	b.n	8000dca <__udivmoddi4+0xa6>
 8000e02:	2a00      	cmp	r2, #0
 8000e04:	f040 8090 	bne.w	8000f28 <__udivmoddi4+0x204>
 8000e08:	eba1 040c 	sub.w	r4, r1, ip
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	fa1f f78c 	uxth.w	r7, ip
 8000e14:	2101      	movs	r1, #1
 8000e16:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e1a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e1e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e22:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e26:	fb07 f006 	mul.w	r0, r7, r6
 8000e2a:	4298      	cmp	r0, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x11c>
 8000e2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e32:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x11a>
 8000e38:	4298      	cmp	r0, r3
 8000e3a:	f200 80cd 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e3e:	4626      	mov	r6, r4
 8000e40:	1a1c      	subs	r4, r3, r0
 8000e42:	fa1f f38e 	uxth.w	r3, lr
 8000e46:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e4a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e4e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e52:	fb00 f707 	mul.w	r7, r0, r7
 8000e56:	429f      	cmp	r7, r3
 8000e58:	d908      	bls.n	8000e6c <__udivmoddi4+0x148>
 8000e5a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e5e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e62:	d202      	bcs.n	8000e6a <__udivmoddi4+0x146>
 8000e64:	429f      	cmp	r7, r3
 8000e66:	f200 80b0 	bhi.w	8000fca <__udivmoddi4+0x2a6>
 8000e6a:	4620      	mov	r0, r4
 8000e6c:	1bdb      	subs	r3, r3, r7
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	e7a5      	b.n	8000dc0 <__udivmoddi4+0x9c>
 8000e74:	f1c1 0620 	rsb	r6, r1, #32
 8000e78:	408b      	lsls	r3, r1
 8000e7a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e7e:	431f      	orrs	r7, r3
 8000e80:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e84:	fa04 f301 	lsl.w	r3, r4, r1
 8000e88:	ea43 030c 	orr.w	r3, r3, ip
 8000e8c:	40f4      	lsrs	r4, r6
 8000e8e:	fa00 f801 	lsl.w	r8, r0, r1
 8000e92:	0c38      	lsrs	r0, r7, #16
 8000e94:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e98:	fbb4 fef0 	udiv	lr, r4, r0
 8000e9c:	fa1f fc87 	uxth.w	ip, r7
 8000ea0:	fb00 441e 	mls	r4, r0, lr, r4
 8000ea4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ea8:	fb0e f90c 	mul.w	r9, lr, ip
 8000eac:	45a1      	cmp	r9, r4
 8000eae:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb2:	d90a      	bls.n	8000eca <__udivmoddi4+0x1a6>
 8000eb4:	193c      	adds	r4, r7, r4
 8000eb6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eba:	f080 8084 	bcs.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ebe:	45a1      	cmp	r9, r4
 8000ec0:	f240 8081 	bls.w	8000fc6 <__udivmoddi4+0x2a2>
 8000ec4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ec8:	443c      	add	r4, r7
 8000eca:	eba4 0409 	sub.w	r4, r4, r9
 8000ece:	fa1f f983 	uxth.w	r9, r3
 8000ed2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ed6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eda:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ede:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d907      	bls.n	8000ef6 <__udivmoddi4+0x1d2>
 8000ee6:	193c      	adds	r4, r7, r4
 8000ee8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000eec:	d267      	bcs.n	8000fbe <__udivmoddi4+0x29a>
 8000eee:	45a4      	cmp	ip, r4
 8000ef0:	d965      	bls.n	8000fbe <__udivmoddi4+0x29a>
 8000ef2:	3b02      	subs	r3, #2
 8000ef4:	443c      	add	r4, r7
 8000ef6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000efa:	fba0 9302 	umull	r9, r3, r0, r2
 8000efe:	eba4 040c 	sub.w	r4, r4, ip
 8000f02:	429c      	cmp	r4, r3
 8000f04:	46ce      	mov	lr, r9
 8000f06:	469c      	mov	ip, r3
 8000f08:	d351      	bcc.n	8000fae <__udivmoddi4+0x28a>
 8000f0a:	d04e      	beq.n	8000faa <__udivmoddi4+0x286>
 8000f0c:	b155      	cbz	r5, 8000f24 <__udivmoddi4+0x200>
 8000f0e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f12:	eb64 040c 	sbc.w	r4, r4, ip
 8000f16:	fa04 f606 	lsl.w	r6, r4, r6
 8000f1a:	40cb      	lsrs	r3, r1
 8000f1c:	431e      	orrs	r6, r3
 8000f1e:	40cc      	lsrs	r4, r1
 8000f20:	e9c5 6400 	strd	r6, r4, [r5]
 8000f24:	2100      	movs	r1, #0
 8000f26:	e750      	b.n	8000dca <__udivmoddi4+0xa6>
 8000f28:	f1c2 0320 	rsb	r3, r2, #32
 8000f2c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f30:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f34:	fa24 f303 	lsr.w	r3, r4, r3
 8000f38:	4094      	lsls	r4, r2
 8000f3a:	430c      	orrs	r4, r1
 8000f3c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f40:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f44:	fa1f f78c 	uxth.w	r7, ip
 8000f48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f4c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f50:	0c23      	lsrs	r3, r4, #16
 8000f52:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f56:	fb00 f107 	mul.w	r1, r0, r7
 8000f5a:	4299      	cmp	r1, r3
 8000f5c:	d908      	bls.n	8000f70 <__udivmoddi4+0x24c>
 8000f5e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f62:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f66:	d22c      	bcs.n	8000fc2 <__udivmoddi4+0x29e>
 8000f68:	4299      	cmp	r1, r3
 8000f6a:	d92a      	bls.n	8000fc2 <__udivmoddi4+0x29e>
 8000f6c:	3802      	subs	r0, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	1a5b      	subs	r3, r3, r1
 8000f72:	b2a4      	uxth	r4, r4
 8000f74:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f78:	fb08 3311 	mls	r3, r8, r1, r3
 8000f7c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f80:	fb01 f307 	mul.w	r3, r1, r7
 8000f84:	42a3      	cmp	r3, r4
 8000f86:	d908      	bls.n	8000f9a <__udivmoddi4+0x276>
 8000f88:	eb1c 0404 	adds.w	r4, ip, r4
 8000f8c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f90:	d213      	bcs.n	8000fba <__udivmoddi4+0x296>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d911      	bls.n	8000fba <__udivmoddi4+0x296>
 8000f96:	3902      	subs	r1, #2
 8000f98:	4464      	add	r4, ip
 8000f9a:	1ae4      	subs	r4, r4, r3
 8000f9c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fa0:	e739      	b.n	8000e16 <__udivmoddi4+0xf2>
 8000fa2:	4604      	mov	r4, r0
 8000fa4:	e6f0      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e706      	b.n	8000db8 <__udivmoddi4+0x94>
 8000faa:	45c8      	cmp	r8, r9
 8000fac:	d2ae      	bcs.n	8000f0c <__udivmoddi4+0x1e8>
 8000fae:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fb2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fb6:	3801      	subs	r0, #1
 8000fb8:	e7a8      	b.n	8000f0c <__udivmoddi4+0x1e8>
 8000fba:	4631      	mov	r1, r6
 8000fbc:	e7ed      	b.n	8000f9a <__udivmoddi4+0x276>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	e799      	b.n	8000ef6 <__udivmoddi4+0x1d2>
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	e7d4      	b.n	8000f70 <__udivmoddi4+0x24c>
 8000fc6:	46d6      	mov	lr, sl
 8000fc8:	e77f      	b.n	8000eca <__udivmoddi4+0x1a6>
 8000fca:	4463      	add	r3, ip
 8000fcc:	3802      	subs	r0, #2
 8000fce:	e74d      	b.n	8000e6c <__udivmoddi4+0x148>
 8000fd0:	4606      	mov	r6, r0
 8000fd2:	4623      	mov	r3, r4
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e70f      	b.n	8000df8 <__udivmoddi4+0xd4>
 8000fd8:	3e02      	subs	r6, #2
 8000fda:	4463      	add	r3, ip
 8000fdc:	e730      	b.n	8000e40 <__udivmoddi4+0x11c>
 8000fde:	bf00      	nop

08000fe0 <__aeabi_idiv0>:
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop

08000fe4 <_ZN7DCMotorC1EP17TIM_HandleTypeDefmm>:
 */


#include "dc_motor.h"

DCMotor::DCMotor(TIM_HandleTypeDef *pwm_tim, uint32_t fwd_chan, uint32_t rev_chan)
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	60f8      	str	r0, [r7, #12]
 8000fec:	60b9      	str	r1, [r7, #8]
 8000fee:	607a      	str	r2, [r7, #4]
 8000ff0:	603b      	str	r3, [r7, #0]
:_pwm_tim(pwm_tim), _fwd_chan(fwd_chan), _rev_chan(rev_chan)
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	68ba      	ldr	r2, [r7, #8]
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	687a      	ldr	r2, [r7, #4]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	683a      	ldr	r2, [r7, #0]
 8001002:	609a      	str	r2, [r3, #8]
{
	HAL_TIM_PWM_Start(_pwm_tim, _fwd_chan);
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	685b      	ldr	r3, [r3, #4]
 800100c:	4619      	mov	r1, r3
 800100e:	4610      	mov	r0, r2
 8001010:	f003 f87c 	bl	800410c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(_pwm_tim, _rev_chan);
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	689b      	ldr	r3, [r3, #8]
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f003 f874 	bl	800410c <HAL_TIM_PWM_Start>

}
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4618      	mov	r0, r3
 8001028:	3710      	adds	r7, #16
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}

0800102e <_ZN7DCMotor11write_int16Es>:

void DCMotor::write_int16(int16_t pwm)
{
 800102e:	b480      	push	{r7}
 8001030:	b083      	sub	sp, #12
 8001032:	af00      	add	r7, sp, #0
 8001034:	6078      	str	r0, [r7, #4]
 8001036:	460b      	mov	r3, r1
 8001038:	807b      	strh	r3, [r7, #2]
    if(pwm < 0)
 800103a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800103e:	2b00      	cmp	r3, #0
 8001040:	da5a      	bge.n	80010f8 <_ZN7DCMotor11write_int16Es+0xca>
    {
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_rev_chan, abs(pwm));
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	689b      	ldr	r3, [r3, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d10a      	bne.n	8001060 <_ZN7DCMotor11write_int16Es+0x32>
 800104a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800104e:	2b00      	cmp	r3, #0
 8001050:	bfb8      	it	lt
 8001052:	425b      	neglt	r3, r3
 8001054:	b29a      	uxth	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	635a      	str	r2, [r3, #52]	@ 0x34
 800105e:	e027      	b.n	80010b0 <_ZN7DCMotor11write_int16Es+0x82>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	689b      	ldr	r3, [r3, #8]
 8001064:	2b04      	cmp	r3, #4
 8001066:	d10a      	bne.n	800107e <_ZN7DCMotor11write_int16Es+0x50>
 8001068:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800106c:	2b00      	cmp	r3, #0
 800106e:	bfb8      	it	lt
 8001070:	425b      	neglt	r3, r3
 8001072:	b29a      	uxth	r2, r3
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	639a      	str	r2, [r3, #56]	@ 0x38
 800107c:	e018      	b.n	80010b0 <_ZN7DCMotor11write_int16Es+0x82>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b08      	cmp	r3, #8
 8001084:	d10a      	bne.n	800109c <_ZN7DCMotor11write_int16Es+0x6e>
 8001086:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800108a:	2b00      	cmp	r3, #0
 800108c:	bfb8      	it	lt
 800108e:	425b      	neglt	r3, r3
 8001090:	b29a      	uxth	r2, r3
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	63da      	str	r2, [r3, #60]	@ 0x3c
 800109a:	e009      	b.n	80010b0 <_ZN7DCMotor11write_int16Es+0x82>
 800109c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	bfb8      	it	lt
 80010a4:	425b      	neglt	r3, r3
 80010a6:	b29a      	uxth	r2, r3
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	641a      	str	r2, [r3, #64]	@ 0x40
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_fwd_chan, 0);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d105      	bne.n	80010c4 <_ZN7DCMotor11write_int16Es+0x96>
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	635a      	str	r2, [r3, #52]	@ 0x34
    {
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_fwd_chan, pwm);
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_rev_chan, 0);
    }

}
 80010c2:	e063      	b.n	800118c <_ZN7DCMotor11write_int16Es+0x15e>
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_fwd_chan, 0);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d105      	bne.n	80010d8 <_ZN7DCMotor11write_int16Es+0xaa>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2200      	movs	r2, #0
 80010d4:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80010d6:	e059      	b.n	800118c <_ZN7DCMotor11write_int16Es+0x15e>
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_fwd_chan, 0);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	2b08      	cmp	r3, #8
 80010de:	d105      	bne.n	80010ec <_ZN7DCMotor11write_int16Es+0xbe>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	2200      	movs	r2, #0
 80010e8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80010ea:	e04f      	b.n	800118c <_ZN7DCMotor11write_int16Es+0x15e>
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_fwd_chan, 0);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	2200      	movs	r2, #0
 80010f4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80010f6:	e049      	b.n	800118c <_ZN7DCMotor11write_int16Es+0x15e>
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_fwd_chan, pwm);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d106      	bne.n	800110e <_ZN7DCMotor11write_int16Es+0xe0>
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 800110a:	635a      	str	r2, [r3, #52]	@ 0x34
 800110c:	e01b      	b.n	8001146 <_ZN7DCMotor11write_int16Es+0x118>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b04      	cmp	r3, #4
 8001114:	d106      	bne.n	8001124 <_ZN7DCMotor11write_int16Es+0xf6>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001120:	639a      	str	r2, [r3, #56]	@ 0x38
 8001122:	e010      	b.n	8001146 <_ZN7DCMotor11write_int16Es+0x118>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	2b08      	cmp	r3, #8
 800112a:	d106      	bne.n	800113a <_ZN7DCMotor11write_int16Es+0x10c>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001136:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001138:	e005      	b.n	8001146 <_ZN7DCMotor11write_int16Es+0x118>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8001144:	641a      	str	r2, [r3, #64]	@ 0x40
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_rev_chan, 0);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	689b      	ldr	r3, [r3, #8]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d105      	bne.n	800115a <_ZN7DCMotor11write_int16Es+0x12c>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	2200      	movs	r2, #0
 8001156:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001158:	e018      	b.n	800118c <_ZN7DCMotor11write_int16Es+0x15e>
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_rev_chan, 0);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b04      	cmp	r3, #4
 8001160:	d105      	bne.n	800116e <_ZN7DCMotor11write_int16Es+0x140>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	2200      	movs	r2, #0
 800116a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800116c:	e00e      	b.n	800118c <_ZN7DCMotor11write_int16Es+0x15e>
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_rev_chan, 0);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	2b08      	cmp	r3, #8
 8001174:	d105      	bne.n	8001182 <_ZN7DCMotor11write_int16Es+0x154>
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001180:	e004      	b.n	800118c <_ZN7DCMotor11write_int16Es+0x15e>
    	__HAL_TIM_SET_COMPARE(DCMotor::_pwm_tim, DCMotor::_rev_chan, 0);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800118c:	bf00      	nop
 800118e:	370c      	adds	r7, #12
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <_ZN7DCMotor5writeEf>:

void DCMotor::write(float duty_cycle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b082      	sub	sp, #8
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	ed87 0a00 	vstr	s0, [r7]
    if(duty_cycle > 1.0f) duty_cycle = 1.0f;
 80011a4:	edd7 7a00 	vldr	s15, [r7]
 80011a8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80011ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011b4:	dd02      	ble.n	80011bc <_ZN7DCMotor5writeEf+0x24>
 80011b6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80011ba:	603b      	str	r3, [r7, #0]
    if(duty_cycle < -1.0f) duty_cycle = -1.0f;
 80011bc:	edd7 7a00 	vldr	s15, [r7]
 80011c0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80011c4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011cc:	d501      	bpl.n	80011d2 <_ZN7DCMotor5writeEf+0x3a>
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <_ZN7DCMotor5writeEf+0x60>)
 80011d0:	603b      	str	r3, [r7, #0]
    write_int16((int16_t)(duty_cycle * TOP));
 80011d2:	edd7 7a00 	vldr	s15, [r7]
 80011d6:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80011fc <_ZN7DCMotor5writeEf+0x64>
 80011da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80011de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011e2:	ee17 3a90 	vmov	r3, s15
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4619      	mov	r1, r3
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff ff1f 	bl	800102e <_ZN7DCMotor11write_int16Es>
}
 80011f0:	bf00      	nop
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	bf800000 	.word	0xbf800000
 80011fc:	42c60000 	.word	0x42c60000

08001200 <_Z11ReadEncoderv>:
        sample_time_ms,
        robot_pins
        );


void ReadEncoder(){
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
	int16_t et1 = ECODER_TIMER1.Instance->CNT;
 8001206:	4b12      	ldr	r3, [pc, #72]	@ (8001250 <_Z11ReadEncoderv+0x50>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800120c:	80fb      	strh	r3, [r7, #6]
	int16_t et2 = ECODER_TIMER2.Instance->CNT;
 800120e:	4b11      	ldr	r3, [pc, #68]	@ (8001254 <_Z11ReadEncoderv+0x54>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001214:	80bb      	strh	r3, [r7, #4]

	encoder1_ticks += (et1);
 8001216:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800121a:	4b0f      	ldr	r3, [pc, #60]	@ (8001258 <_Z11ReadEncoderv+0x58>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4413      	add	r3, r2
 8001220:	4a0d      	ldr	r2, [pc, #52]	@ (8001258 <_Z11ReadEncoderv+0x58>)
 8001222:	6013      	str	r3, [r2, #0]
	encoder2_ticks += (-et2);
 8001224:	4b0d      	ldr	r3, [pc, #52]	@ (800125c <_Z11ReadEncoderv+0x5c>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	4a0b      	ldr	r2, [pc, #44]	@ (800125c <_Z11ReadEncoderv+0x5c>)
 8001230:	6013      	str	r3, [r2, #0]

	ECODER_TIMER1.Instance->CNT = 0;
 8001232:	4b07      	ldr	r3, [pc, #28]	@ (8001250 <_Z11ReadEncoderv+0x50>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	625a      	str	r2, [r3, #36]	@ 0x24
	ECODER_TIMER2.Instance->CNT = 0;
 800123a:	4b06      	ldr	r3, [pc, #24]	@ (8001254 <_Z11ReadEncoderv+0x54>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2200      	movs	r2, #0
 8001240:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	2000042c 	.word	0x2000042c
 8001254:	2000039c 	.word	0x2000039c
 8001258:	2000027c 	.word	0x2000027c
 800125c:	20000280 	.word	0x20000280

08001260 <_Z10printStateff10RobotState13RobotOdometry>:



void printState(float v, float w, RobotState state, RobotOdometry odometry)
{
 8001260:	b084      	sub	sp, #16
 8001262:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001266:	b0a4      	sub	sp, #144	@ 0x90
 8001268:	af14      	add	r7, sp, #80	@ 0x50
 800126a:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
 800126e:	edc7 0a0e 	vstr	s1, [r7, #56]	@ 0x38
 8001272:	f107 0460 	add.w	r4, r7, #96	@ 0x60
 8001276:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    printf(
            // diff setpoint,wheel setpoint, speed
            "%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f,%.3f\n",
            state.l_ref_speed, state.r_ref_speed, state.l_speed, state.r_speed, state.l_effort, state.r_effort,
 800127a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
    printf(
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff f962 	bl	8000548 <__aeabi_f2d>
 8001284:	e9c7 010c 	strd	r0, r1, [r7, #48]	@ 0x30
            state.l_ref_speed, state.r_ref_speed, state.l_speed, state.r_speed, state.l_effort, state.r_effort,
 8001288:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
    printf(
 800128c:	4618      	mov	r0, r3
 800128e:	f7ff f95b 	bl	8000548 <__aeabi_f2d>
 8001292:	e9c7 010a 	strd	r0, r1, [r7, #40]	@ 0x28
            state.l_ref_speed, state.r_ref_speed, state.l_speed, state.r_speed, state.l_effort, state.r_effort,
 8001296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
    printf(
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff f955 	bl	8000548 <__aeabi_f2d>
 800129e:	e9c7 0108 	strd	r0, r1, [r7, #32]
            state.l_ref_speed, state.r_ref_speed, state.l_speed, state.r_speed, state.l_effort, state.r_effort,
 80012a2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
    printf(
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff f94f 	bl	8000548 <__aeabi_f2d>
 80012aa:	e9c7 0106 	strd	r0, r1, [r7, #24]
            state.l_ref_speed, state.r_ref_speed, state.l_speed, state.r_speed, state.l_effort, state.r_effort,
 80012ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
    printf(
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff f949 	bl	8000548 <__aeabi_f2d>
 80012b6:	e9c7 0104 	strd	r0, r1, [r7, #16]
            state.l_ref_speed, state.r_ref_speed, state.l_speed, state.r_speed, state.l_effort, state.r_effort,
 80012ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
    printf(
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f943 	bl	8000548 <__aeabi_f2d>
 80012c2:	e9c7 0102 	strd	r0, r1, [r7, #8]
            odometry.x_pos, odometry.y_pos, odometry.theta, odometry.v, odometry.w
 80012c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
    printf(
 80012ca:	4618      	mov	r0, r3
 80012cc:	f7ff f93c 	bl	8000548 <__aeabi_f2d>
 80012d0:	e9c7 0100 	strd	r0, r1, [r7]
            odometry.x_pos, odometry.y_pos, odometry.theta, odometry.v, odometry.w
 80012d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
    printf(
 80012d8:	4618      	mov	r0, r3
 80012da:	f7ff f935 	bl	8000548 <__aeabi_f2d>
 80012de:	4682      	mov	sl, r0
 80012e0:	468b      	mov	fp, r1
            odometry.x_pos, odometry.y_pos, odometry.theta, odometry.v, odometry.w
 80012e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
    printf(
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff f92e 	bl	8000548 <__aeabi_f2d>
 80012ec:	4680      	mov	r8, r0
 80012ee:	4689      	mov	r9, r1
            odometry.x_pos, odometry.y_pos, odometry.theta, odometry.v, odometry.w
 80012f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
    printf(
 80012f4:	4618      	mov	r0, r3
 80012f6:	f7ff f927 	bl	8000548 <__aeabi_f2d>
 80012fa:	4604      	mov	r4, r0
 80012fc:	460d      	mov	r5, r1
            odometry.x_pos, odometry.y_pos, odometry.theta, odometry.v, odometry.w
 80012fe:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
    printf(
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff f920 	bl	8000548 <__aeabi_f2d>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	e9cd 2312 	strd	r2, r3, [sp, #72]	@ 0x48
 8001310:	e9cd 4510 	strd	r4, r5, [sp, #64]	@ 0x40
 8001314:	e9cd 890e 	strd	r8, r9, [sp, #56]	@ 0x38
 8001318:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800131c:	ed97 7b00 	vldr	d7, [r7]
 8001320:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8001324:	ed97 7b02 	vldr	d7, [r7, #8]
 8001328:	ed8d 7b08 	vstr	d7, [sp, #32]
 800132c:	ed97 7b04 	vldr	d7, [r7, #16]
 8001330:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001334:	ed97 7b06 	vldr	d7, [r7, #24]
 8001338:	ed8d 7b04 	vstr	d7, [sp, #16]
 800133c:	ed97 7b08 	vldr	d7, [r7, #32]
 8001340:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001344:	ed97 7b0a 	vldr	d7, [r7, #40]	@ 0x28
 8001348:	ed8d 7b00 	vstr	d7, [sp]
 800134c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001350:	4804      	ldr	r0, [pc, #16]	@ (8001364 <_Z10printStateff10RobotState13RobotOdometry+0x104>)
 8001352:	f007 f985 	bl	8008660 <iprintf>
            );
}
 8001356:	bf00      	nop
 8001358:	3740      	adds	r7, #64	@ 0x40
 800135a:	46bd      	mov	sp, r7
 800135c:	e8bd 4fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001360:	b004      	add	sp, #16
 8001362:	4770      	bx	lr
 8001364:	0800b308 	.word	0x0800b308

08001368 <CppMain>:


void CppMain(){
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
	while(1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <CppMain+0x4>

08001370 <HAL_UART_RxCpltCallback>:
	{
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001370:	b5b0      	push	{r4, r5, r7, lr}
 8001372:	ed2d 8b02 	vpush	{d8}
 8001376:	b09e      	sub	sp, #120	@ 0x78
 8001378:	af0c      	add	r7, sp, #48	@ 0x30
 800137a:	6078      	str	r0, [r7, #4]
    if (huart->Instance == UART_COM_INSTANCE)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	4b3b      	ldr	r3, [pc, #236]	@ (8001470 <HAL_UART_RxCpltCallback+0x100>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	429a      	cmp	r2, r3
 8001386:	d167      	bne.n	8001458 <HAL_UART_RxCpltCallback+0xe8>
    {
        if (char_idx > 11)
 8001388:	4b3a      	ldr	r3, [pc, #232]	@ (8001474 <HAL_UART_RxCpltCallback+0x104>)
 800138a:	881b      	ldrh	r3, [r3, #0]
 800138c:	2b0b      	cmp	r3, #11
 800138e:	d908      	bls.n	80013a2 <HAL_UART_RxCpltCallback+0x32>
        {
            // Clear the buffer and reset char_idx if the index exceeds 11
            memset(in_buffer, 0, sizeof(in_buffer));
 8001390:	2264      	movs	r2, #100	@ 0x64
 8001392:	2100      	movs	r1, #0
 8001394:	4838      	ldr	r0, [pc, #224]	@ (8001478 <HAL_UART_RxCpltCallback+0x108>)
 8001396:	f007 f9d8 	bl	800874a <memset>
            char_idx = 0;
 800139a:	4b36      	ldr	r3, [pc, #216]	@ (8001474 <HAL_UART_RxCpltCallback+0x104>)
 800139c:	2200      	movs	r2, #0
 800139e:	801a      	strh	r2, [r3, #0]
 80013a0:	e05a      	b.n	8001458 <HAL_UART_RxCpltCallback+0xe8>
        }
        else
        {
            if (urx != '\n')
 80013a2:	4b36      	ldr	r3, [pc, #216]	@ (800147c <HAL_UART_RxCpltCallback+0x10c>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	2b0a      	cmp	r3, #10
 80013a8:	d00d      	beq.n	80013c6 <HAL_UART_RxCpltCallback+0x56>
            {
                in_buffer[char_idx] = urx;
 80013aa:	4b32      	ldr	r3, [pc, #200]	@ (8001474 <HAL_UART_RxCpltCallback+0x104>)
 80013ac:	881b      	ldrh	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	4b32      	ldr	r3, [pc, #200]	@ (800147c <HAL_UART_RxCpltCallback+0x10c>)
 80013b2:	7819      	ldrb	r1, [r3, #0]
 80013b4:	4b30      	ldr	r3, [pc, #192]	@ (8001478 <HAL_UART_RxCpltCallback+0x108>)
 80013b6:	5499      	strb	r1, [r3, r2]
                char_idx++;
 80013b8:	4b2e      	ldr	r3, [pc, #184]	@ (8001474 <HAL_UART_RxCpltCallback+0x104>)
 80013ba:	881b      	ldrh	r3, [r3, #0]
 80013bc:	3301      	adds	r3, #1
 80013be:	b29a      	uxth	r2, r3
 80013c0:	4b2c      	ldr	r3, [pc, #176]	@ (8001474 <HAL_UART_RxCpltCallback+0x104>)
 80013c2:	801a      	strh	r2, [r3, #0]
 80013c4:	e048      	b.n	8001458 <HAL_UART_RxCpltCallback+0xe8>
            }
            else
            {
                in_buffer[char_idx] = 0; // Null-terminate the string
 80013c6:	4b2b      	ldr	r3, [pc, #172]	@ (8001474 <HAL_UART_RxCpltCallback+0x104>)
 80013c8:	881b      	ldrh	r3, [r3, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	4b2a      	ldr	r3, [pc, #168]	@ (8001478 <HAL_UART_RxCpltCallback+0x108>)
 80013ce:	2100      	movs	r1, #0
 80013d0:	5499      	strb	r1, [r3, r2]
                char_idx = 0; // Reset the index
 80013d2:	4b28      	ldr	r3, [pc, #160]	@ (8001474 <HAL_UART_RxCpltCallback+0x104>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	801a      	strh	r2, [r3, #0]
                linear = strtof(in_buffer, &ch_ptr);
 80013d8:	4929      	ldr	r1, [pc, #164]	@ (8001480 <HAL_UART_RxCpltCallback+0x110>)
 80013da:	4827      	ldr	r0, [pc, #156]	@ (8001478 <HAL_UART_RxCpltCallback+0x108>)
 80013dc:	f006 f9ae 	bl	800773c <strtof>
 80013e0:	eef0 7a40 	vmov.f32	s15, s0
 80013e4:	4b27      	ldr	r3, [pc, #156]	@ (8001484 <HAL_UART_RxCpltCallback+0x114>)
 80013e6:	edc3 7a00 	vstr	s15, [r3]
                angular = strtof(ch_ptr + 1, &ch_ptr2);
 80013ea:	4b25      	ldr	r3, [pc, #148]	@ (8001480 <HAL_UART_RxCpltCallback+0x110>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	3301      	adds	r3, #1
 80013f0:	4925      	ldr	r1, [pc, #148]	@ (8001488 <HAL_UART_RxCpltCallback+0x118>)
 80013f2:	4618      	mov	r0, r3
 80013f4:	f006 f9a2 	bl	800773c <strtof>
 80013f8:	eef0 7a40 	vmov.f32	s15, s0
 80013fc:	4b23      	ldr	r3, [pc, #140]	@ (800148c <HAL_UART_RxCpltCallback+0x11c>)
 80013fe:	edc3 7a00 	vstr	s15, [r3]
                printState(linear, angular, robot.getState(), robot.getOdometry());
 8001402:	4b20      	ldr	r3, [pc, #128]	@ (8001484 <HAL_UART_RxCpltCallback+0x114>)
 8001404:	ed93 8a00 	vldr	s16, [r3]
 8001408:	4b20      	ldr	r3, [pc, #128]	@ (800148c <HAL_UART_RxCpltCallback+0x11c>)
 800140a:	edd3 8a00 	vldr	s17, [r3]
 800140e:	f107 030c 	add.w	r3, r7, #12
 8001412:	491f      	ldr	r1, [pc, #124]	@ (8001490 <HAL_UART_RxCpltCallback+0x120>)
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fd0b 	bl	8001e30 <_ZN5Robot8getStateEv>
 800141a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800141e:	491c      	ldr	r1, [pc, #112]	@ (8001490 <HAL_UART_RxCpltCallback+0x120>)
 8001420:	4618      	mov	r0, r3
 8001422:	f000 fd1c 	bl	8001e5e <_ZN5Robot11getOdometryEv>
 8001426:	ad06      	add	r5, sp, #24
 8001428:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 800142c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800142e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001430:	6823      	ldr	r3, [r4, #0]
 8001432:	602b      	str	r3, [r5, #0]
 8001434:	466d      	mov	r5, sp
 8001436:	f107 041c 	add.w	r4, r7, #28
 800143a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800143c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800143e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001442:	e885 0003 	stmia.w	r5, {r0, r1}
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800144c:	eef0 0a68 	vmov.f32	s1, s17
 8001450:	eeb0 0a48 	vmov.f32	s0, s16
 8001454:	f7ff ff04 	bl	8001260 <_Z10printStateff10RobotState13RobotOdometry>
            }
        }
    }
    HAL_UART_Receive_IT(&UART_COM, &urx, 1);
 8001458:	2201      	movs	r2, #1
 800145a:	4908      	ldr	r1, [pc, #32]	@ (800147c <HAL_UART_RxCpltCallback+0x10c>)
 800145c:	4804      	ldr	r0, [pc, #16]	@ (8001470 <HAL_UART_RxCpltCallback+0x100>)
 800145e:	f003 fe6a 	bl	8005136 <HAL_UART_Receive_IT>
}
 8001462:	bf00      	nop
 8001464:	3748      	adds	r7, #72	@ 0x48
 8001466:	46bd      	mov	sp, r7
 8001468:	ecbd 8b02 	vpop	{d8}
 800146c:	bdb0      	pop	{r4, r5, r7, pc}
 800146e:	bf00      	nop
 8001470:	20000594 	.word	0x20000594
 8001474:	20000278 	.word	0x20000278
 8001478:	20000214 	.word	0x20000214
 800147c:	2000027a 	.word	0x2000027a
 8001480:	20000290 	.word	0x20000290
 8001484:	20000288 	.word	0x20000288
 8001488:	20000294 	.word	0x20000294
 800148c:	2000028c 	.word	0x2000028c
 8001490:	20000298 	.word	0x20000298

08001494 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  if (htim->Instance == INTERUPT_TIMER_INSTANCE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	d117      	bne.n	80014d8 <HAL_TIM_PeriodElapsedCallback+0x44>
  {
	  ReadEncoder();
 80014a8:	f7ff feaa 	bl	8001200 <_Z11ReadEncoderv>
	  robot.setUnicycle(linear, angular);
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	4b0d      	ldr	r3, [pc, #52]	@ (80014e8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80014b4:	ed93 7a00 	vldr	s14, [r3]
 80014b8:	eef0 0a47 	vmov.f32	s1, s14
 80014bc:	eeb0 0a67 	vmov.f32	s0, s15
 80014c0:	480a      	ldr	r0, [pc, #40]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014c2:	f000 fc43 	bl	8001d4c <_ZN5Robot11setUnicycleEff>
	  robot.updatePid(encoder1_ticks, encoder2_ticks);
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4619      	mov	r1, r3
 80014cc:	4b09      	ldr	r3, [pc, #36]	@ (80014f4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	461a      	mov	r2, r3
 80014d2:	4806      	ldr	r0, [pc, #24]	@ (80014ec <HAL_TIM_PeriodElapsedCallback+0x58>)
 80014d4:	f000 fa70 	bl	80019b8 <_ZN5Robot9updatePidEmm>
  }
}
 80014d8:	bf00      	nop
 80014da:	3708      	adds	r7, #8
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000504 	.word	0x20000504
 80014e4:	20000288 	.word	0x20000288
 80014e8:	2000028c 	.word	0x2000028c
 80014ec:	20000298 	.word	0x20000298
 80014f0:	2000027c 	.word	0x2000027c
 80014f4:	20000280 	.word	0x20000280

080014f8 <_Z41__static_initialization_and_destruction_0ii>:
 80014f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014fa:	b087      	sub	sp, #28
 80014fc:	af04      	add	r7, sp, #16
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b01      	cmp	r3, #1
 8001506:	d122      	bne.n	800154e <_Z41__static_initialization_and_destruction_0ii+0x56>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800150e:	4293      	cmp	r3, r2
 8001510:	d11d      	bne.n	800154e <_Z41__static_initialization_and_destruction_0ii+0x56>
        );
 8001512:	4b11      	ldr	r3, [pc, #68]	@ (8001558 <_Z41__static_initialization_and_destruction_0ii+0x60>)
 8001514:	edd3 7a00 	vldr	s15, [r3]
 8001518:	4b10      	ldr	r3, [pc, #64]	@ (800155c <_Z41__static_initialization_and_destruction_0ii+0x64>)
 800151a:	ed93 7a00 	vldr	s14, [r3]
 800151e:	4b10      	ldr	r3, [pc, #64]	@ (8001560 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001520:	edd3 6a00 	vldr	s13, [r3]
 8001524:	4b0f      	ldr	r3, [pc, #60]	@ (8001564 <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001526:	681e      	ldr	r6, [r3, #0]
 8001528:	4c0f      	ldr	r4, [pc, #60]	@ (8001568 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 800152a:	466d      	mov	r5, sp
 800152c:	f104 0308 	add.w	r3, r4, #8
 8001530:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001532:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8001536:	e894 000c 	ldmia.w	r4, {r2, r3}
 800153a:	4631      	mov	r1, r6
 800153c:	eeb0 1a66 	vmov.f32	s2, s13
 8001540:	eef0 0a47 	vmov.f32	s1, s14
 8001544:	eeb0 0a67 	vmov.f32	s0, s15
 8001548:	4808      	ldr	r0, [pc, #32]	@ (800156c <_Z41__static_initialization_and_destruction_0ii+0x74>)
 800154a:	f000 f981 	bl	8001850 <_ZN5RobotC1Efffm9RobotPins>
}
 800154e:	bf00      	nop
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001556:	bf00      	nop
 8001558:	20000018 	.word	0x20000018
 800155c:	20000284 	.word	0x20000284
 8001560:	2000001c 	.word	0x2000001c
 8001564:	20000020 	.word	0x20000020
 8001568:	20000000 	.word	0x20000000
 800156c:	20000298 	.word	0x20000298

08001570 <_GLOBAL__sub_I_in_buffer>:
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
 8001574:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001578:	2001      	movs	r0, #1
 800157a:	f7ff ffbd 	bl	80014f8 <_Z41__static_initialization_and_destruction_0ii>
 800157e:	bd80      	pop	{r7, pc}

08001580 <_ZN3PIDC1EPfS0_S0_fffm>:
 *      Author: dat
 */

#include "pid_controller.h"

PID::PID(float *input, float *output, float *setpoint, float kp, float ki, float kd, uint32_t sample_time_ms)
 8001580:	b580      	push	{r7, lr}
 8001582:	b088      	sub	sp, #32
 8001584:	af00      	add	r7, sp, #0
 8001586:	61f8      	str	r0, [r7, #28]
 8001588:	61b9      	str	r1, [r7, #24]
 800158a:	617a      	str	r2, [r7, #20]
 800158c:	613b      	str	r3, [r7, #16]
 800158e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001592:	edc7 0a02 	vstr	s1, [r7, #8]
 8001596:	ed87 1a01 	vstr	s2, [r7, #4]
: _my_input(input), _my_output(output), _my_setpoint(setpoint), _sample_time_ms(sample_time_ms), _out_sum(0), _last_input(0)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	69ba      	ldr	r2, [r7, #24]
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	619a      	str	r2, [r3, #24]
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	61da      	str	r2, [r3, #28]
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	f04f 0200 	mov.w	r2, #0
 80015b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f04f 0200 	mov.w	r2, #0
 80015c0:	639a      	str	r2, [r3, #56]	@ 0x38
{
    set_output_limits(-1.0f, 1.0f);
 80015c2:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 80015c6:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 80015ca:	69f8      	ldr	r0, [r7, #28]
 80015cc:	f000 f858 	bl	8001680 <_ZN3PID17set_output_limitsEff>
    set_gains(kp, ki, kd);
 80015d0:	ed97 1a01 	vldr	s2, [r7, #4]
 80015d4:	edd7 0a02 	vldr	s1, [r7, #8]
 80015d8:	ed97 0a03 	vldr	s0, [r7, #12]
 80015dc:	69f8      	ldr	r0, [r7, #28]
 80015de:	f000 f805 	bl	80015ec <_ZN3PID9set_gainsEfff>
}
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	4618      	mov	r0, r3
 80015e6:	3720      	adds	r7, #32
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}

080015ec <_ZN3PID9set_gainsEfff>:
    _kd /= ratio;
    _sample_time_ms = new_sample_time_ms;
}

void PID::set_gains(float kp, float ki, float kd)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	ed87 0a02 	vstr	s0, [r7, #8]
 80015f8:	edc7 0a01 	vstr	s1, [r7, #4]
 80015fc:	ed87 1a00 	vstr	s2, [r7]
    if(kp < 0 || ki < 0 || kd < 0) return;
 8001600:	edd7 7a02 	vldr	s15, [r7, #8]
 8001604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800160c:	d42f      	bmi.n	800166e <_ZN3PID9set_gainsEfff+0x82>
 800160e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001612:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001616:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161a:	d428      	bmi.n	800166e <_ZN3PID9set_gainsEfff+0x82>
 800161c:	edd7 7a00 	vldr	s15, [r7]
 8001620:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001628:	d421      	bmi.n	800166e <_ZN3PID9set_gainsEfff+0x82>

    float sample_time_s = (float)_sample_time_ms / 1000.0f;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	ee07 3a90 	vmov	s15, r3
 8001632:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001636:	eddf 6a11 	vldr	s13, [pc, #68]	@ 800167c <_ZN3PID9set_gainsEfff+0x90>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	edc7 7a05 	vstr	s15, [r7, #20]
//    printf("pid sample time: %f [s]", sample_time_s);

    _kp = kp;
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	68ba      	ldr	r2, [r7, #8]
 8001646:	609a      	str	r2, [r3, #8]
    _ki = ki * sample_time_s;
 8001648:	ed97 7a01 	vldr	s14, [r7, #4]
 800164c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	edc3 7a04 	vstr	s15, [r3, #16]
    _kd = kd / sample_time_s;
 800165a:	edd7 6a00 	vldr	s13, [r7]
 800165e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001662:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	edc3 7a03 	vstr	s15, [r3, #12]
 800166c:	e000      	b.n	8001670 <_ZN3PID9set_gainsEfff+0x84>
    if(kp < 0 || ki < 0 || kd < 0) return;
 800166e:	bf00      	nop
}
 8001670:	371c      	adds	r7, #28
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	447a0000 	.word	0x447a0000

08001680 <_ZN3PID17set_output_limitsEff>:

void PID::set_output_limits(float min, float max)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	ed87 0a02 	vstr	s0, [r7, #8]
 800168c:	edc7 0a01 	vstr	s1, [r7, #4]
    if(min >= max) return;
 8001690:	ed97 7a02 	vldr	s14, [r7, #8]
 8001694:	edd7 7a01 	vldr	s15, [r7, #4]
 8001698:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800169c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016a0:	da48      	bge.n	8001734 <_ZN3PID17set_output_limitsEff+0xb4>
    _out_min = min;
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	621a      	str	r2, [r3, #32]
    _out_max = max;
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	625a      	str	r2, [r3, #36]	@ 0x24

    if(*_my_output > _out_max) *_my_output = _out_max;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	ed93 7a00 	vldr	s14, [r3]
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80016bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016c4:	dd05      	ble.n	80016d2 <_ZN3PID17set_output_limitsEff+0x52>
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	68fa      	ldr	r2, [r7, #12]
 80016cc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80016ce:	601a      	str	r2, [r3, #0]
 80016d0:	e010      	b.n	80016f4 <_ZN3PID17set_output_limitsEff+0x74>
    else if(*_my_output < _out_min) *_my_output = _out_min;
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	699b      	ldr	r3, [r3, #24]
 80016d6:	ed93 7a00 	vldr	s14, [r3]
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	edd3 7a08 	vldr	s15, [r3, #32]
 80016e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016e8:	d504      	bpl.n	80016f4 <_ZN3PID17set_output_limitsEff+0x74>
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	699b      	ldr	r3, [r3, #24]
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	6a12      	ldr	r2, [r2, #32]
 80016f2:	601a      	str	r2, [r3, #0]

    if(_out_sum > _out_max) _out_sum = _out_max;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001700:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001704:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001708:	dd04      	ble.n	8001714 <_ZN3PID17set_output_limitsEff+0x94>
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28
 8001712:	e010      	b.n	8001736 <_ZN3PID17set_output_limitsEff+0xb6>
    else if(_out_sum < _out_min) _out_sum = _out_min;
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	d505      	bpl.n	8001736 <_ZN3PID17set_output_limitsEff+0xb6>
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	6a1a      	ldr	r2, [r3, #32]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	629a      	str	r2, [r3, #40]	@ 0x28
 8001732:	e000      	b.n	8001736 <_ZN3PID17set_output_limitsEff+0xb6>
    if(min >= max) return;
 8001734:	bf00      	nop
}
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_ZN3PID7computeEv>:

void PID::compute(void)
{
 8001740:	b480      	push	{r7}
 8001742:	b087      	sub	sp, #28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
    float input = *_my_input;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	613b      	str	r3, [r7, #16]
    float error = *_my_setpoint - input;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	69db      	ldr	r3, [r3, #28]
 8001754:	ed93 7a00 	vldr	s14, [r3]
 8001758:	edd7 7a04 	vldr	s15, [r7, #16]
 800175c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001760:	edc7 7a03 	vstr	s15, [r7, #12]

    float delta_input = input - _last_input;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	edd3 7a0e 	vldr	s15, [r3, #56]	@ 0x38
 800176a:	ed97 7a04 	vldr	s14, [r7, #16]
 800176e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001772:	edc7 7a02 	vstr	s15, [r7, #8]
    _out_sum += _ki * error;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edd3 6a04 	vldr	s13, [r3, #16]
 8001782:	edd7 7a03 	vldr	s15, [r7, #12]
 8001786:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800178a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

    if(_out_sum > _out_max) _out_sum = _out_max;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 80017a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a8:	dd04      	ble.n	80017b4 <_ZN3PID7computeEv+0x74>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80017b2:	e00e      	b.n	80017d2 <_ZN3PID7computeEv+0x92>
    else if(_out_sum < _out_min) _out_sum = _out_min;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edd3 7a08 	vldr	s15, [r3, #32]
 80017c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c8:	d503      	bpl.n	80017d2 <_ZN3PID7computeEv+0x92>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6a1a      	ldr	r2, [r3, #32]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	629a      	str	r2, [r3, #40]	@ 0x28

    float output = _kp * error + _out_sum - _kd * delta_input;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	ed93 7a02 	vldr	s14, [r3, #8]
 80017d8:	edd7 7a03 	vldr	s15, [r7, #12]
 80017dc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80017e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	edd3 6a03 	vldr	s13, [r3, #12]
 80017f0:	edd7 7a02 	vldr	s15, [r7, #8]
 80017f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017fc:	edc7 7a05 	vstr	s15, [r7, #20]

    if(output > _out_max) output = _out_max;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	edd3 7a09 	vldr	s15, [r3, #36]	@ 0x24
 8001806:	ed97 7a05 	vldr	s14, [r7, #20]
 800180a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	dd03      	ble.n	800181c <_ZN3PID7computeEv+0xdc>
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001818:	617b      	str	r3, [r7, #20]
 800181a:	e00c      	b.n	8001836 <_ZN3PID7computeEv+0xf6>
    else if(output < _out_min) output = _out_min;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001822:	ed97 7a05 	vldr	s14, [r7, #20]
 8001826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	d502      	bpl.n	8001836 <_ZN3PID7computeEv+0xf6>
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	617b      	str	r3, [r7, #20]

    *_my_output = output;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	699b      	ldr	r3, [r3, #24]
 800183a:	697a      	ldr	r2, [r7, #20]
 800183c:	601a      	str	r2, [r3, #0]
    _last_input = input;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001844:	bf00      	nop
 8001846:	371c      	adds	r7, #28
 8001848:	46bd      	mov	sp, r7
 800184a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184e:	4770      	bx	lr

08001850 <_ZN5RobotC1Efffm9RobotPins>:
 *      Author: dat
 */

#include "robot.h"

Robot::Robot(
 8001850:	b082      	sub	sp, #8
 8001852:	b590      	push	{r4, r7, lr}
 8001854:	b089      	sub	sp, #36	@ 0x24
 8001856:	af02      	add	r7, sp, #8
 8001858:	6178      	str	r0, [r7, #20]
 800185a:	ed87 0a04 	vstr	s0, [r7, #16]
 800185e:	edc7 0a03 	vstr	s1, [r7, #12]
 8001862:	ed87 1a02 	vstr	s2, [r7, #8]
 8001866:	6079      	str	r1, [r7, #4]
 8001868:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800186c:	e881 000c 	stmia.w	r1, {r2, r3}
        float ki,
        uint32_t sample_time_ms,
        RobotPins pins
        )
:
_kp(kp), _kd(kd), _ki(ki), _sample_time_ms(sample_time_ms),
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	693a      	ldr	r2, [r7, #16]
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	68ba      	ldr	r2, [r7, #8]
 8001880:	609a      	str	r2, [r3, #8]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	687a      	ldr	r2, [r7, #4]
 8001886:	611a      	str	r2, [r3, #16]
_l_input(0.0f), _l_output(0.0f), _l_setpoint(0.0f),
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	615a      	str	r2, [r3, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f04f 0200 	mov.w	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
 8001898:	697b      	ldr	r3, [r7, #20]
 800189a:	f04f 0200 	mov.w	r2, #0
 800189e:	61da      	str	r2, [r3, #28]
_r_input(0.0f), _r_output(0.0f), _r_setpoint(0.0f),
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	621a      	str	r2, [r3, #32]
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	625a      	str	r2, [r3, #36]	@ 0x24
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	f04f 0200 	mov.w	r2, #0
 80018b6:	629a      	str	r2, [r3, #40]	@ 0x28
_l_motor(pins.left._pwm_tim, pins.left._fwd_chan, pins.left._rev_chan),
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 80018be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80018c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018c4:	f7ff fb8e 	bl	8000fe4 <_ZN7DCMotorC1EP17TIM_HandleTypeDefmm>
_r_motor(pins.right._pwm_tim, pins.right._fwd_chan, pins.right._rev_chan),
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f103 0040 	add.w	r0, r3, #64	@ 0x40
 80018ce:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80018d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80018d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80018d4:	f7ff fb86 	bl	8000fe4 <_ZN7DCMotorC1EP17TIM_HandleTypeDefmm>
_l_pid(&_l_input, &_l_output, &_l_setpoint, kp, ki, kd, sample_time_ms),
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 80018de:	697b      	ldr	r3, [r7, #20]
 80018e0:	f103 0114 	add.w	r1, r3, #20
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f103 0218 	add.w	r2, r3, #24
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f103 041c 	add.w	r4, r3, #28
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	9300      	str	r3, [sp, #0]
 80018f4:	ed97 1a03 	vldr	s2, [r7, #12]
 80018f8:	edd7 0a02 	vldr	s1, [r7, #8]
 80018fc:	ed97 0a04 	vldr	s0, [r7, #16]
 8001900:	4623      	mov	r3, r4
 8001902:	f7ff fe3d 	bl	8001580 <_ZN3PIDC1EPfS0_S0_fffm>
_r_pid(&_r_input, &_r_output, &_r_setpoint, kp, ki, kd, sample_time_ms)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	f103 0088 	add.w	r0, r3, #136	@ 0x88
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f103 0120 	add.w	r1, r3, #32
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f103 0224 	add.w	r2, r3, #36	@ 0x24
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	f103 0428 	add.w	r4, r3, #40	@ 0x28
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	9300      	str	r3, [sp, #0]
 8001922:	ed97 1a03 	vldr	s2, [r7, #12]
 8001926:	edd7 0a02 	vldr	s1, [r7, #8]
 800192a:	ed97 0a04 	vldr	s0, [r7, #16]
 800192e:	4623      	mov	r3, r4
 8001930:	f7ff fe26 	bl	8001580 <_ZN3PIDC1EPfS0_S0_fffm>
{
    _l_motor.write(0.0f);
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3334      	adds	r3, #52	@ 0x34
 8001938:	ed9f 0a1c 	vldr	s0, [pc, #112]	@ 80019ac <_ZN5RobotC1Efffm9RobotPins+0x15c>
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fc2b 	bl	8001198 <_ZN7DCMotor5writeEf>
    _r_motor.write(0.0f);
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	3340      	adds	r3, #64	@ 0x40
 8001946:	ed9f 0a19 	vldr	s0, [pc, #100]	@ 80019ac <_ZN5RobotC1Efffm9RobotPins+0x15c>
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fc24 	bl	8001198 <_ZN7DCMotor5writeEf>
    _l_pid.set_output_limits(-1.0f, 1.0f);
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	334c      	adds	r3, #76	@ 0x4c
 8001954:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001958:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff fe8f 	bl	8001680 <_ZN3PID17set_output_limitsEff>
    _r_pid.set_output_limits(-1.0f, 1.0f);
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	3388      	adds	r3, #136	@ 0x88
 8001966:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 800196a:	eebf 0a00 	vmov.f32	s0, #240	@ 0xbf800000 -1.0
 800196e:	4618      	mov	r0, r3
 8001970:	f7ff fe86 	bl	8001680 <_ZN3PID17set_output_limitsEff>
    _l_setpoint = 0;
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	61da      	str	r2, [r3, #28]
    _r_setpoint = 0;
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	629a      	str	r2, [r3, #40]	@ 0x28
    _pid_rate = float(sample_time_ms) / 1000.0f;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800198e:	eddf 6a08 	vldr	s13, [pc, #32]	@ 80019b0 <_ZN5RobotC1Efffm9RobotPins+0x160>
 8001992:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	4618      	mov	r0, r3
 80019a0:	371c      	adds	r7, #28
 80019a2:	46bd      	mov	sp, r7
 80019a4:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80019a8:	b002      	add	sp, #8
 80019aa:	4770      	bx	lr
 80019ac:	00000000 	.word	0x00000000
 80019b0:	447a0000 	.word	0x447a0000
 80019b4:	00000000 	.word	0x00000000

080019b8 <_ZN5Robot9updatePidEmm>:

void Robot::updatePid(uint32_t l_encoder_ticks, uint32_t r_encoder_ticks)
{
 80019b8:	b5b0      	push	{r4, r5, r7, lr}
 80019ba:	b088      	sub	sp, #32
 80019bc:	af00      	add	r7, sp, #0
 80019be:	60f8      	str	r0, [r7, #12]
 80019c0:	60b9      	str	r1, [r7, #8]
 80019c2:	607a      	str	r2, [r7, #4]
    int32_t l_ticks = l_encoder_ticks;
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	61fb      	str	r3, [r7, #28]
    int32_t r_ticks = r_encoder_ticks;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	61bb      	str	r3, [r7, #24]

    _state.l_position = (2.0 * M_PI) * l_ticks / ROBOT_MOTOR_PPR;
 80019cc:	69f8      	ldr	r0, [r7, #28]
 80019ce:	f7fe fda9 	bl	8000524 <__aeabi_i2d>
 80019d2:	a37d      	add	r3, pc, #500	@ (adr r3, 8001bc8 <_ZN5Robot9updatePidEmm+0x210>)
 80019d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019d8:	f7fe fe0e 	bl	80005f8 <__aeabi_dmul>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	a37d      	add	r3, pc, #500	@ (adr r3, 8001bdc <_ZN5Robot9updatePidEmm+0x224>)
 80019e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ea:	f7fe ff2f 	bl	800084c <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f8f7 	bl	8000be8 <__aeabi_d2f>
 80019fa:	4602      	mov	r2, r0
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
    _state.r_position = (2.0 * M_PI) * r_ticks / ROBOT_MOTOR_PPR;
 8001a02:	69b8      	ldr	r0, [r7, #24]
 8001a04:	f7fe fd8e 	bl	8000524 <__aeabi_i2d>
 8001a08:	a36f      	add	r3, pc, #444	@ (adr r3, 8001bc8 <_ZN5Robot9updatePidEmm+0x210>)
 8001a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0e:	f7fe fdf3 	bl	80005f8 <__aeabi_dmul>
 8001a12:	4602      	mov	r2, r0
 8001a14:	460b      	mov	r3, r1
 8001a16:	4610      	mov	r0, r2
 8001a18:	4619      	mov	r1, r3
 8001a1a:	a370      	add	r3, pc, #448	@ (adr r3, 8001bdc <_ZN5Robot9updatePidEmm+0x224>)
 8001a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a20:	f7fe ff14 	bl	800084c <__aeabi_ddiv>
 8001a24:	4602      	mov	r2, r0
 8001a26:	460b      	mov	r3, r1
 8001a28:	4610      	mov	r0, r2
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	f7ff f8dc 	bl	8000be8 <__aeabi_d2f>
 8001a30:	4602      	mov	r2, r0
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0

    int32_t dl_ticks = l_ticks - _state.l_ticks;
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8001a3e:	69fa      	ldr	r2, [r7, #28]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
    int32_t dr_ticks = r_ticks - _state.r_ticks;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8001a4a:	69ba      	ldr	r2, [r7, #24]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	613b      	str	r3, [r7, #16]

    // update odometry
    updateOdometry(dl_ticks, dr_ticks);
 8001a50:	693a      	ldr	r2, [r7, #16]
 8001a52:	6979      	ldr	r1, [r7, #20]
 8001a54:	68f8      	ldr	r0, [r7, #12]
 8001a56:	f000 f8c7 	bl	8001be8 <_ZN5Robot14updateOdometryEll>

    _state.l_ref_speed = _l_setpoint;
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	69da      	ldr	r2, [r3, #28]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    _state.r_ref_speed = _r_setpoint;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8

    _state.l_speed = (2.0 * M_PI) * dl_ticks / (ROBOT_MOTOR_PPR * _pid_rate);
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7fe fd58 	bl	8000524 <__aeabi_i2d>
 8001a74:	a354      	add	r3, pc, #336	@ (adr r3, 8001bc8 <_ZN5Robot9updatePidEmm+0x210>)
 8001a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a7a:	f7fe fdbd 	bl	80005f8 <__aeabi_dmul>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	460b      	mov	r3, r1
 8001a82:	4614      	mov	r4, r2
 8001a84:	461d      	mov	r5, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a8c:	ed9f 7a50 	vldr	s14, [pc, #320]	@ 8001bd0 <_ZN5Robot9updatePidEmm+0x218>
 8001a90:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a94:	ee17 0a90 	vmov	r0, s15
 8001a98:	f7fe fd56 	bl	8000548 <__aeabi_f2d>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	4620      	mov	r0, r4
 8001aa2:	4629      	mov	r1, r5
 8001aa4:	f7fe fed2 	bl	800084c <__aeabi_ddiv>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	460b      	mov	r3, r1
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f7ff f89a 	bl	8000be8 <__aeabi_d2f>
 8001ab4:	4602      	mov	r2, r0
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    _state.r_speed = (2.0 * M_PI) * dr_ticks / (ROBOT_MOTOR_PPR * _pid_rate);
 8001abc:	6938      	ldr	r0, [r7, #16]
 8001abe:	f7fe fd31 	bl	8000524 <__aeabi_i2d>
 8001ac2:	a341      	add	r3, pc, #260	@ (adr r3, 8001bc8 <_ZN5Robot9updatePidEmm+0x210>)
 8001ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac8:	f7fe fd96 	bl	80005f8 <__aeabi_dmul>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4614      	mov	r4, r2
 8001ad2:	461d      	mov	r5, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	edd3 7a03 	vldr	s15, [r3, #12]
 8001ada:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8001bd0 <_ZN5Robot9updatePidEmm+0x218>
 8001ade:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae2:	ee17 0a90 	vmov	r0, s15
 8001ae6:	f7fe fd2f 	bl	8000548 <__aeabi_f2d>
 8001aea:	4602      	mov	r2, r0
 8001aec:	460b      	mov	r3, r1
 8001aee:	4620      	mov	r0, r4
 8001af0:	4629      	mov	r1, r5
 8001af2:	f7fe feab 	bl	800084c <__aeabi_ddiv>
 8001af6:	4602      	mov	r2, r0
 8001af8:	460b      	mov	r3, r1
 8001afa:	4610      	mov	r0, r2
 8001afc:	4619      	mov	r1, r3
 8001afe:	f7ff f873 	bl	8000be8 <__aeabi_d2f>
 8001b02:	4602      	mov	r2, r0
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8

    _odom.v = (ROBOT_WHEEL_RADIUS / 2.0f) * (_state.l_speed + _state.r_speed);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	ed93 7a35 	vldr	s14, [r3, #212]	@ 0xd4
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	edd3 7a36 	vldr	s15, [r3, #216]	@ 0xd8
 8001b16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b1a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001bd4 <_ZN5Robot9updatePidEmm+0x21c>
 8001b1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	edc3 7a3e 	vstr	s15, [r3, #248]	@ 0xf8
    _odom.w = (ROBOT_WHEEL_RADIUS / ROBOT_WHEEL_SEPARATION) * (_state.r_speed - _state.l_speed);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	ed93 7a36 	vldr	s14, [r3, #216]	@ 0xd8
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	edd3 7a35 	vldr	s15, [r3, #212]	@ 0xd4
 8001b34:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b38:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8001bd8 <_ZN5Robot9updatePidEmm+0x220>
 8001b3c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	edc3 7a3f 	vstr	s15, [r3, #252]	@ 0xfc

    _l_input = _state.l_speed;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	615a      	str	r2, [r3, #20]
    _r_input = _state.r_speed;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	621a      	str	r2, [r3, #32]

    _l_pid.compute();
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	334c      	adds	r3, #76	@ 0x4c
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7ff fdee 	bl	8001740 <_ZN3PID7computeEv>
    _r_pid.compute();
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	3388      	adds	r3, #136	@ 0x88
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f7ff fde9 	bl	8001740 <_ZN3PID7computeEv>

    _state.l_effort = _l_output;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	699a      	ldr	r2, [r3, #24]
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    _state.r_effort = _r_output;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0

    _l_motor.write(_state.l_effort);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	edd3 7a37 	vldr	s15, [r3, #220]	@ 0xdc
 8001b8e:	eeb0 0a67 	vmov.f32	s0, s15
 8001b92:	4610      	mov	r0, r2
 8001b94:	f7ff fb00 	bl	8001198 <_ZN7DCMotor5writeEf>
    _r_motor.write(_state.r_effort);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	edd3 7a38 	vldr	s15, [r3, #224]	@ 0xe0
 8001ba4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ba8:	4610      	mov	r0, r2
 8001baa:	f7ff faf5 	bl	8001198 <_ZN7DCMotor5writeEf>

    _state.l_ticks = l_ticks;
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	69fa      	ldr	r2, [r7, #28]
 8001bb2:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
    _state.r_ticks = r_ticks;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	69ba      	ldr	r2, [r7, #24]
 8001bba:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
}
 8001bbe:	bf00      	nop
 8001bc0:	3720      	adds	r7, #32
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	54442d18 	.word	0x54442d18
 8001bcc:	401921fb 	.word	0x401921fb
 8001bd0:	45778000 	.word	0x45778000
 8001bd4:	3cc49ba6 	.word	0x3cc49ba6
 8001bd8:	3e269df1 	.word	0x3e269df1
 8001bdc:	00000000 	.word	0x00000000
 8001be0:	40aef000 	.word	0x40aef000
 8001be4:	00000000 	.word	0x00000000

08001be8 <_ZN5Robot14updateOdometryEll>:

void Robot::updateOdometry(int32_t dl_ticks, int32_t dr_ticks) {
 8001be8:	b580      	push	{r7, lr}
 8001bea:	ed2d 8b02 	vpush	{d8}
 8001bee:	b088      	sub	sp, #32
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
    float delta_l = (2 * M_PI * ROBOT_WHEEL_RADIUS * dl_ticks) / ROBOT_MOTOR_PPR;
 8001bf8:	68b8      	ldr	r0, [r7, #8]
 8001bfa:	f7fe fc93 	bl	8000524 <__aeabi_i2d>
 8001bfe:	a345      	add	r3, pc, #276	@ (adr r3, 8001d14 <_ZN5Robot14updateOdometryEll+0x12c>)
 8001c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c04:	f7fe fcf8 	bl	80005f8 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	4619      	mov	r1, r3
 8001c10:	a342      	add	r3, pc, #264	@ (adr r3, 8001d1c <_ZN5Robot14updateOdometryEll+0x134>)
 8001c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c16:	f7fe fe19 	bl	800084c <__aeabi_ddiv>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	460b      	mov	r3, r1
 8001c1e:	4610      	mov	r0, r2
 8001c20:	4619      	mov	r1, r3
 8001c22:	f7fe ffe1 	bl	8000be8 <__aeabi_d2f>
 8001c26:	4603      	mov	r3, r0
 8001c28:	61fb      	str	r3, [r7, #28]
    float delta_r = (2 * M_PI * ROBOT_WHEEL_RADIUS * dr_ticks) / ROBOT_MOTOR_PPR;
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7fe fc7a 	bl	8000524 <__aeabi_i2d>
 8001c30:	a338      	add	r3, pc, #224	@ (adr r3, 8001d14 <_ZN5Robot14updateOdometryEll+0x12c>)
 8001c32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c36:	f7fe fcdf 	bl	80005f8 <__aeabi_dmul>
 8001c3a:	4602      	mov	r2, r0
 8001c3c:	460b      	mov	r3, r1
 8001c3e:	4610      	mov	r0, r2
 8001c40:	4619      	mov	r1, r3
 8001c42:	a336      	add	r3, pc, #216	@ (adr r3, 8001d1c <_ZN5Robot14updateOdometryEll+0x134>)
 8001c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c48:	f7fe fe00 	bl	800084c <__aeabi_ddiv>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	460b      	mov	r3, r1
 8001c50:	4610      	mov	r0, r2
 8001c52:	4619      	mov	r1, r3
 8001c54:	f7fe ffc8 	bl	8000be8 <__aeabi_d2f>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	61bb      	str	r3, [r7, #24]
    float delta_center = (delta_l + delta_r) / 2;
 8001c5c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001c60:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001c68:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001c6c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c70:	edc7 7a05 	vstr	s15, [r7, #20]

    _odom.x_pos += delta_center * cosf(_odom.theta);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	ed93 8a3b 	vldr	s16, [r3, #236]	@ 0xec
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8001c80:	eeb0 0a67 	vmov.f32	s0, s15
 8001c84:	f004 f9d2 	bl	800602c <cosf>
 8001c88:	eeb0 7a40 	vmov.f32	s14, s0
 8001c8c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	edc3 7a3b 	vstr	s15, [r3, #236]	@ 0xec
    _odom.y_pos += delta_center * sinf(_odom.theta);
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	ed93 8a3c 	vldr	s16, [r3, #240]	@ 0xf0
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	edd3 7a3d 	vldr	s15, [r3, #244]	@ 0xf4
 8001caa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cae:	f004 fa01 	bl	80060b4 <sinf>
 8001cb2:	eeb0 7a40 	vmov.f32	s14, s0
 8001cb6:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cbe:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	edc3 7a3c 	vstr	s15, [r3, #240]	@ 0xf0
    _odom.theta += (delta_r - delta_l) / ROBOT_WHEEL_SEPARATION;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	ed93 7a3d 	vldr	s14, [r3, #244]	@ 0xf4
 8001cce:	edd7 6a06 	vldr	s13, [r7, #24]
 8001cd2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001cd6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001cda:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 8001d10 <_ZN5Robot14updateOdometryEll+0x128>
 8001cde:	eec6 7a86 	vdiv.f32	s15, s13, s12
 8001ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	edc3 7a3d 	vstr	s15, [r3, #244]	@ 0xf4
    _odom.v = _linear;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f8c3 20f8 	str.w	r2, [r3, #248]	@ 0xf8
    _odom.w = _angular;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f8c3 20fc 	str.w	r2, [r3, #252]	@ 0xfc
}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	ecbd 8b02 	vpop	{d8}
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	f3af 8000 	nop.w
 8001d10:	3e970a3d 	.word	0x3e970a3d
 8001d14:	4bb93072 	.word	0x4bb93072
 8001d18:	3fd34d4c 	.word	0x3fd34d4c
 8001d1c:	00000000 	.word	0x00000000
 8001d20:	40aef000 	.word	0x40aef000

08001d24 <_ZN5Robot9setWheelsEff>:

void Robot::setWheels(float left_speed, float right_speed)
{
 8001d24:	b480      	push	{r7}
 8001d26:	b085      	sub	sp, #20
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	60f8      	str	r0, [r7, #12]
 8001d2c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d30:	edc7 0a01 	vstr	s1, [r7, #4]
    _l_setpoint = left_speed;
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	61da      	str	r2, [r3, #28]
    _r_setpoint = right_speed;
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d40:	bf00      	nop
 8001d42:	3714      	adds	r7, #20
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <_ZN5Robot11setUnicycleEff>:

void Robot::setUnicycle(float v, float w)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b086      	sub	sp, #24
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	ed87 0a02 	vstr	s0, [r7, #8]
 8001d58:	edc7 0a01 	vstr	s1, [r7, #4]
    // limit values
    if(v > ROBOT_MAX_LINEAR_M_S) v = ROBOT_MAX_LINEAR_M_S;
 8001d5c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d60:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001d64:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6c:	dd02      	ble.n	8001d74 <_ZN5Robot11setUnicycleEff+0x28>
 8001d6e:	f04f 537c 	mov.w	r3, #1056964608	@ 0x3f000000
 8001d72:	60bb      	str	r3, [r7, #8]
    if(v < ROBOT_MIN_LINEAR_M_S) v = ROBOT_MIN_LINEAR_M_S;
 8001d74:	edd7 7a02 	vldr	s15, [r7, #8]
 8001d78:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 8001d7c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d84:	d502      	bpl.n	8001d8c <_ZN5Robot11setUnicycleEff+0x40>
 8001d86:	f04f 433f 	mov.w	r3, #3204448256	@ 0xbf000000
 8001d8a:	60bb      	str	r3, [r7, #8]
    if(w > ROBOT_MAX_ANGULAR_R_S) w = ROBOT_MAX_ANGULAR_R_S;
 8001d8c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001d90:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001d94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	dd02      	ble.n	8001da4 <_ZN5Robot11setUnicycleEff+0x58>
 8001d9e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001da2:	607b      	str	r3, [r7, #4]
    if(w < ROBOT_MIN_ANGULAR_R_S) w = ROBOT_MIN_ANGULAR_R_S;
 8001da4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001da8:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001db4:	d502      	bpl.n	8001dbc <_ZN5Robot11setUnicycleEff+0x70>
 8001db6:	f04f 4340 	mov.w	r3, #3221225472	@ 0xc0000000
 8001dba:	607b      	str	r3, [r7, #4]

    float v_l = (2 * v - w * ROBOT_WHEEL_SEPARATION) / (2 * ROBOT_WHEEL_RADIUS);
 8001dbc:	edd7 7a02 	vldr	s15, [r7, #8]
 8001dc0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001dc4:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dc8:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001e28 <_ZN5Robot11setUnicycleEff+0xdc>
 8001dcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dd0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dd4:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001e2c <_ZN5Robot11setUnicycleEff+0xe0>
 8001dd8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ddc:	edc7 7a05 	vstr	s15, [r7, #20]
    float v_r = (2 * v + w * ROBOT_WHEEL_SEPARATION) / (2 * ROBOT_WHEEL_RADIUS);
 8001de0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001de4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001de8:	edd7 7a01 	vldr	s15, [r7, #4]
 8001dec:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001e28 <_ZN5Robot11setUnicycleEff+0xdc>
 8001df0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001df4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001df8:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001e2c <_ZN5Robot11setUnicycleEff+0xe0>
 8001dfc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e00:	edc7 7a04 	vstr	s15, [r7, #16]

    _linear = v;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	68ba      	ldr	r2, [r7, #8]
 8001e08:	62da      	str	r2, [r3, #44]	@ 0x2c
    _angular = w;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	631a      	str	r2, [r3, #48]	@ 0x30
    setWheels(v_l, v_r);
 8001e10:	edd7 0a04 	vldr	s1, [r7, #16]
 8001e14:	ed97 0a05 	vldr	s0, [r7, #20]
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7ff ff83 	bl	8001d24 <_ZN5Robot9setWheelsEff>
}
 8001e1e:	bf00      	nop
 8001e20:	3718      	adds	r7, #24
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	3e970a3d 	.word	0x3e970a3d
 8001e2c:	3dc49ba6 	.word	0x3dc49ba6

08001e30 <_ZN5Robot8getStateEv>:


RobotState Robot::getState() {
 8001e30:	b4b0      	push	{r4, r5, r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
    return _state;
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	4615      	mov	r5, r2
 8001e40:	f103 04c4 	add.w	r4, r3, #196	@ 0xc4
 8001e44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e4c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e50:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bcb0      	pop	{r4, r5, r7}
 8001e5c:	4770      	bx	lr

08001e5e <_ZN5Robot11getOdometryEv>:

RobotOdometry Robot::getOdometry() {
 8001e5e:	b4b0      	push	{r4, r5, r7}
 8001e60:	b083      	sub	sp, #12
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	6039      	str	r1, [r7, #0]
    return _odom;
 8001e68:	687a      	ldr	r2, [r7, #4]
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	4615      	mov	r5, r2
 8001e6e:	f103 04ec 	add.w	r4, r3, #236	@ 0xec
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	6823      	ldr	r3, [r4, #0]
 8001e78:	602b      	str	r3, [r5, #0]
}
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bcb0      	pop	{r4, r5, r7}
 8001e82:	4770      	bx	lr

08001e84 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b087      	sub	sp, #28
 8001e88:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001e90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e92:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001e94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e9a:	4b29      	ldr	r3, [pc, #164]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea2:	617b      	str	r3, [r7, #20]
 8001ea4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
 8001eaa:	4b25      	ldr	r3, [pc, #148]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eae:	4a24      	ldr	r2, [pc, #144]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001eb0:	f043 0301 	orr.w	r3, r3, #1
 8001eb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eb6:	4b22      	ldr	r3, [pc, #136]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	f003 0301 	and.w	r3, r3, #1
 8001ebe:	613b      	str	r3, [r7, #16]
 8001ec0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	60fb      	str	r3, [r7, #12]
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eca:	4a1d      	ldr	r2, [pc, #116]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001ecc:	f043 0310 	orr.w	r3, r3, #16
 8001ed0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ed2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001ed4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	60fb      	str	r3, [r7, #12]
 8001edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ede:	2300      	movs	r3, #0
 8001ee0:	60bb      	str	r3, [r7, #8]
 8001ee2:	4b17      	ldr	r3, [pc, #92]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee6:	4a16      	ldr	r2, [pc, #88]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001ee8:	f043 0308 	orr.w	r3, r3, #8
 8001eec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eee:	4b14      	ldr	r3, [pc, #80]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	60bb      	str	r3, [r7, #8]
 8001ef8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	607b      	str	r3, [r7, #4]
 8001efe:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f02:	4a0f      	ldr	r2, [pc, #60]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001f04:	f043 0304 	orr.w	r3, r3, #4
 8001f08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f0a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	f003 0304 	and.w	r3, r3, #4
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	603b      	str	r3, [r7, #0]
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a08      	ldr	r2, [pc, #32]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <MX_GPIO_Init+0xbc>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	603b      	str	r3, [r7, #0]
 8001f30:	683b      	ldr	r3, [r7, #0]

}
 8001f32:	bf00      	nop
 8001f34:	371c      	adds	r7, #28
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40023800 	.word	0x40023800

08001f44 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#if defined(__GNUC__)
int _write(int fd, char * ptr, int len) {
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	60f8      	str	r0, [r7, #12]
 8001f4c:	60b9      	str	r1, [r7, #8]
 8001f4e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit( &huart1, (uint8_t * ) ptr, len, HAL_MAX_DELAY);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	f04f 33ff 	mov.w	r3, #4294967295
 8001f58:	68b9      	ldr	r1, [r7, #8]
 8001f5a:	4804      	ldr	r0, [pc, #16]	@ (8001f6c <_write+0x28>)
 8001f5c:	f003 f860 	bl	8005020 <HAL_UART_Transmit>
  return len;
 8001f60:	687b      	ldr	r3, [r7, #4]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	20000594 	.word	0x20000594

08001f70 <user_init>:
  return ch;
}
#endif

void user_init()
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&INTERUPT_TIMER);
 8001f74:	4814      	ldr	r0, [pc, #80]	@ (8001fc8 <user_init+0x58>)
 8001f76:	f002 f809 	bl	8003f8c <HAL_TIM_Base_Start_IT>

	HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_1);
 8001f7a:	2100      	movs	r1, #0
 8001f7c:	4813      	ldr	r0, [pc, #76]	@ (8001fcc <user_init+0x5c>)
 8001f7e:	f002 f8c5 	bl	800410c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_2);
 8001f82:	2104      	movs	r1, #4
 8001f84:	4811      	ldr	r0, [pc, #68]	@ (8001fcc <user_init+0x5c>)
 8001f86:	f002 f8c1 	bl	800410c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_3);
 8001f8a:	2108      	movs	r1, #8
 8001f8c:	480f      	ldr	r0, [pc, #60]	@ (8001fcc <user_init+0x5c>)
 8001f8e:	f002 f8bd 	bl	800410c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&PWM_TIMER, TIM_CHANNEL_4);
 8001f92:	210c      	movs	r1, #12
 8001f94:	480d      	ldr	r0, [pc, #52]	@ (8001fcc <user_init+0x5c>)
 8001f96:	f002 f8b9 	bl	800410c <HAL_TIM_PWM_Start>

	HAL_TIM_Encoder_Start(&ECODER_TIMER1, TIM_CHANNEL_1);
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	480c      	ldr	r0, [pc, #48]	@ (8001fd0 <user_init+0x60>)
 8001f9e:	f002 fa23 	bl	80043e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&ECODER_TIMER1, TIM_CHANNEL_2);
 8001fa2:	2104      	movs	r1, #4
 8001fa4:	480a      	ldr	r0, [pc, #40]	@ (8001fd0 <user_init+0x60>)
 8001fa6:	f002 fa1f 	bl	80043e8 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&ECODER_TIMER2, TIM_CHANNEL_1);
 8001faa:	2100      	movs	r1, #0
 8001fac:	4809      	ldr	r0, [pc, #36]	@ (8001fd4 <user_init+0x64>)
 8001fae:	f002 fa1b 	bl	80043e8 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&ECODER_TIMER2, TIM_CHANNEL_2);
 8001fb2:	2104      	movs	r1, #4
 8001fb4:	4807      	ldr	r0, [pc, #28]	@ (8001fd4 <user_init+0x64>)
 8001fb6:	f002 fa17 	bl	80043e8 <HAL_TIM_Encoder_Start>

	HAL_UART_Receive_IT(&UART_COM, &urx, 1);
 8001fba:	2201      	movs	r2, #1
 8001fbc:	4906      	ldr	r1, [pc, #24]	@ (8001fd8 <user_init+0x68>)
 8001fbe:	4807      	ldr	r0, [pc, #28]	@ (8001fdc <user_init+0x6c>)
 8001fc0:	f003 f8b9 	bl	8005136 <HAL_UART_Receive_IT>
}
 8001fc4:	bf00      	nop
 8001fc6:	bd80      	pop	{r7, pc}
 8001fc8:	20000504 	.word	0x20000504
 8001fcc:	20000474 	.word	0x20000474
 8001fd0:	2000042c 	.word	0x2000042c
 8001fd4:	2000039c 	.word	0x2000039c
 8001fd8:	2000027a 	.word	0x2000027a
 8001fdc:	20000594 	.word	0x20000594

08001fe0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001fe4:	f000 ff38 	bl	8002e58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001fe8:	f000 f81a 	bl	8002020 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001fec:	f7ff ff4a 	bl	8001e84 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001ff0:	f000 f9b8 	bl	8002364 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001ff4:	f000 fa0e 	bl	8002414 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001ff8:	f000 fa60 	bl	80024bc <MX_TIM3_Init>
  MX_TIM4_Init();
 8001ffc:	f000 fab2 	bl	8002564 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8002000:	f000 fe52 	bl	8002ca8 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8002004:	f000 fb28 	bl	8002658 <MX_TIM5_Init>
  MX_TIM6_Init();
 8002008:	f000 fb7a 	bl	8002700 <MX_TIM6_Init>
  MX_TIM8_Init();
 800200c:	f000 fbae 	bl	800276c <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8002010:	f000 fe20 	bl	8002c54 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  user_init();
 8002014:	f7ff ffac 	bl	8001f70 <user_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  CppMain();
 8002018:	f7ff f9a6 	bl	8001368 <CppMain>
 800201c:	e7fc      	b.n	8002018 <main+0x38>
	...

08002020 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b094      	sub	sp, #80	@ 0x50
 8002024:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002026:	f107 0320 	add.w	r3, r7, #32
 800202a:	2230      	movs	r2, #48	@ 0x30
 800202c:	2100      	movs	r1, #0
 800202e:	4618      	mov	r0, r3
 8002030:	f006 fb8b 	bl	800874a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002034:	f107 030c 	add.w	r3, r7, #12
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
 800203c:	605a      	str	r2, [r3, #4]
 800203e:	609a      	str	r2, [r3, #8]
 8002040:	60da      	str	r2, [r3, #12]
 8002042:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
 8002048:	4b28      	ldr	r3, [pc, #160]	@ (80020ec <SystemClock_Config+0xcc>)
 800204a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204c:	4a27      	ldr	r2, [pc, #156]	@ (80020ec <SystemClock_Config+0xcc>)
 800204e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002052:	6413      	str	r3, [r2, #64]	@ 0x40
 8002054:	4b25      	ldr	r3, [pc, #148]	@ (80020ec <SystemClock_Config+0xcc>)
 8002056:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002058:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002060:	2300      	movs	r3, #0
 8002062:	607b      	str	r3, [r7, #4]
 8002064:	4b22      	ldr	r3, [pc, #136]	@ (80020f0 <SystemClock_Config+0xd0>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a21      	ldr	r2, [pc, #132]	@ (80020f0 <SystemClock_Config+0xd0>)
 800206a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b1f      	ldr	r3, [pc, #124]	@ (80020f0 <SystemClock_Config+0xd0>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002078:	607b      	str	r3, [r7, #4]
 800207a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800207c:	2302      	movs	r3, #2
 800207e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002080:	2301      	movs	r3, #1
 8002082:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002084:	2310      	movs	r3, #16
 8002086:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002088:	2302      	movs	r3, #2
 800208a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800208c:	2300      	movs	r3, #0
 800208e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002090:	2308      	movs	r3, #8
 8002092:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8002094:	2354      	movs	r3, #84	@ 0x54
 8002096:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002098:	2302      	movs	r3, #2
 800209a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800209c:	2304      	movs	r3, #4
 800209e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020a0:	f107 0320 	add.w	r3, r7, #32
 80020a4:	4618      	mov	r0, r3
 80020a6:	f001 fa89 	bl	80035bc <HAL_RCC_OscConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80020b0:	f000 f820 	bl	80020f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020b4:	230f      	movs	r3, #15
 80020b6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80020b8:	2302      	movs	r3, #2
 80020ba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020bc:	2300      	movs	r3, #0
 80020be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80020c0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80020c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020ca:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80020cc:	f107 030c 	add.w	r3, r7, #12
 80020d0:	2102      	movs	r1, #2
 80020d2:	4618      	mov	r0, r3
 80020d4:	f001 fcea 	bl	8003aac <HAL_RCC_ClockConfig>
 80020d8:	4603      	mov	r3, r0
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d001      	beq.n	80020e2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80020de:	f000 f809 	bl	80020f4 <Error_Handler>
  }
}
 80020e2:	bf00      	nop
 80020e4:	3750      	adds	r7, #80	@ 0x50
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40007000 	.word	0x40007000

080020f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020f8:	b672      	cpsid	i
}
 80020fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020fc:	bf00      	nop
 80020fe:	e7fd      	b.n	80020fc <Error_Handler+0x8>

08002100 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	607b      	str	r3, [r7, #4]
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <HAL_MspInit+0x4c>)
 800210c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800210e:	4a0f      	ldr	r2, [pc, #60]	@ (800214c <HAL_MspInit+0x4c>)
 8002110:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002114:	6453      	str	r3, [r2, #68]	@ 0x44
 8002116:	4b0d      	ldr	r3, [pc, #52]	@ (800214c <HAL_MspInit+0x4c>)
 8002118:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800211a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800211e:	607b      	str	r3, [r7, #4]
 8002120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	603b      	str	r3, [r7, #0]
 8002126:	4b09      	ldr	r3, [pc, #36]	@ (800214c <HAL_MspInit+0x4c>)
 8002128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800212a:	4a08      	ldr	r2, [pc, #32]	@ (800214c <HAL_MspInit+0x4c>)
 800212c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002130:	6413      	str	r3, [r2, #64]	@ 0x40
 8002132:	4b06      	ldr	r3, [pc, #24]	@ (800214c <HAL_MspInit+0x4c>)
 8002134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800213e:	bf00      	nop
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	40023800 	.word	0x40023800

08002150 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <NMI_Handler+0x4>

08002158 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800215c:	bf00      	nop
 800215e:	e7fd      	b.n	800215c <HardFault_Handler+0x4>

08002160 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002160:	b480      	push	{r7}
 8002162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002164:	bf00      	nop
 8002166:	e7fd      	b.n	8002164 <MemManage_Handler+0x4>

08002168 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002168:	b480      	push	{r7}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800216c:	bf00      	nop
 800216e:	e7fd      	b.n	800216c <BusFault_Handler+0x4>

08002170 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002170:	b480      	push	{r7}
 8002172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002174:	bf00      	nop
 8002176:	e7fd      	b.n	8002174 <UsageFault_Handler+0x4>

08002178 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr

08002186 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002186:	b480      	push	{r7}
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800218a:	bf00      	nop
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002198:	bf00      	nop
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021a6:	f000 fea9 	bl	8002efc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021aa:	bf00      	nop
 80021ac:	bd80      	pop	{r7, pc}
	...

080021b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80021b4:	4802      	ldr	r0, [pc, #8]	@ (80021c0 <TIM4_IRQHandler+0x10>)
 80021b6:	f002 f9a5 	bl	8004504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000474 	.word	0x20000474

080021c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80021c8:	4802      	ldr	r0, [pc, #8]	@ (80021d4 <USART1_IRQHandler+0x10>)
 80021ca:	f002 ffd9 	bl	8005180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80021ce:	bf00      	nop
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	20000594 	.word	0x20000594

080021d8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80021dc:	4802      	ldr	r0, [pc, #8]	@ (80021e8 <TIM6_DAC_IRQHandler+0x10>)
 80021de:	f002 f991 	bl	8004504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20000504 	.word	0x20000504

080021ec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  return 1;
 80021f0:	2301      	movs	r3, #1
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_kill>:

int _kill(int pid, int sig)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002206:	f006 fb05 	bl	8008814 <__errno>
 800220a:	4603      	mov	r3, r0
 800220c:	2216      	movs	r2, #22
 800220e:	601a      	str	r2, [r3, #0]
  return -1;
 8002210:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002214:	4618      	mov	r0, r3
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <_exit>:

void _exit (int status)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002224:	f04f 31ff 	mov.w	r1, #4294967295
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f7ff ffe7 	bl	80021fc <_kill>
  while (1) {}    /* Make sure we hang here */
 800222e:	bf00      	nop
 8002230:	e7fd      	b.n	800222e <_exit+0x12>

08002232 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e00a      	b.n	800225a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002244:	f3af 8000 	nop.w
 8002248:	4601      	mov	r1, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	60ba      	str	r2, [r7, #8]
 8002250:	b2ca      	uxtb	r2, r1
 8002252:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3301      	adds	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	dbf0      	blt.n	8002244 <_read+0x12>
  }

  return len;
 8002262:	687b      	ldr	r3, [r7, #4]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_close>:
  }
  return len;
}

int _close(int file)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002278:	4618      	mov	r0, r3
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr

08002284 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002294:	605a      	str	r2, [r3, #4]
  return 0;
 8002296:	2300      	movs	r3, #0
}
 8002298:	4618      	mov	r0, r3
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <_isatty>:

int _isatty(int file)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ac:	2301      	movs	r3, #1
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b8:	4770      	bx	lr

080022ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ba:	b480      	push	{r7}
 80022bc:	b085      	sub	sp, #20
 80022be:	af00      	add	r7, sp, #0
 80022c0:	60f8      	str	r0, [r7, #12]
 80022c2:	60b9      	str	r1, [r7, #8]
 80022c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022dc:	4a14      	ldr	r2, [pc, #80]	@ (8002330 <_sbrk+0x5c>)
 80022de:	4b15      	ldr	r3, [pc, #84]	@ (8002334 <_sbrk+0x60>)
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022e4:	697b      	ldr	r3, [r7, #20]
 80022e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022e8:	4b13      	ldr	r3, [pc, #76]	@ (8002338 <_sbrk+0x64>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d102      	bne.n	80022f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022f0:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <_sbrk+0x64>)
 80022f2:	4a12      	ldr	r2, [pc, #72]	@ (800233c <_sbrk+0x68>)
 80022f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022f6:	4b10      	ldr	r3, [pc, #64]	@ (8002338 <_sbrk+0x64>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4413      	add	r3, r2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d207      	bcs.n	8002314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002304:	f006 fa86 	bl	8008814 <__errno>
 8002308:	4603      	mov	r3, r0
 800230a:	220c      	movs	r2, #12
 800230c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800230e:	f04f 33ff 	mov.w	r3, #4294967295
 8002312:	e009      	b.n	8002328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002314:	4b08      	ldr	r3, [pc, #32]	@ (8002338 <_sbrk+0x64>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800231a:	4b07      	ldr	r3, [pc, #28]	@ (8002338 <_sbrk+0x64>)
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4413      	add	r3, r2
 8002322:	4a05      	ldr	r2, [pc, #20]	@ (8002338 <_sbrk+0x64>)
 8002324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002326:	68fb      	ldr	r3, [r7, #12]
}
 8002328:	4618      	mov	r0, r3
 800232a:	3718      	adds	r7, #24
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	20020000 	.word	0x20020000
 8002334:	00000400 	.word	0x00000400
 8002338:	20000398 	.word	0x20000398
 800233c:	20000778 	.word	0x20000778

08002340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002340:	b480      	push	{r7}
 8002342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002344:	4b06      	ldr	r3, [pc, #24]	@ (8002360 <SystemInit+0x20>)
 8002346:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800234a:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <SystemInit+0x20>)
 800234c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002350:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002354:	bf00      	nop
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr
 800235e:	bf00      	nop
 8002360:	e000ed00 	.word	0xe000ed00

08002364 <MX_TIM1_Init>:
TIM_HandleTypeDef htim6;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08c      	sub	sp, #48	@ 0x30
 8002368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800236a:	f107 030c 	add.w	r3, r7, #12
 800236e:	2224      	movs	r2, #36	@ 0x24
 8002370:	2100      	movs	r1, #0
 8002372:	4618      	mov	r0, r3
 8002374:	f006 f9e9 	bl	800874a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002378:	1d3b      	adds	r3, r7, #4
 800237a:	2200      	movs	r2, #0
 800237c:	601a      	str	r2, [r3, #0]
 800237e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002380:	4b22      	ldr	r3, [pc, #136]	@ (800240c <MX_TIM1_Init+0xa8>)
 8002382:	4a23      	ldr	r2, [pc, #140]	@ (8002410 <MX_TIM1_Init+0xac>)
 8002384:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002386:	4b21      	ldr	r3, [pc, #132]	@ (800240c <MX_TIM1_Init+0xa8>)
 8002388:	2200      	movs	r2, #0
 800238a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800238c:	4b1f      	ldr	r3, [pc, #124]	@ (800240c <MX_TIM1_Init+0xa8>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002392:	4b1e      	ldr	r3, [pc, #120]	@ (800240c <MX_TIM1_Init+0xa8>)
 8002394:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002398:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800239a:	4b1c      	ldr	r3, [pc, #112]	@ (800240c <MX_TIM1_Init+0xa8>)
 800239c:	2200      	movs	r2, #0
 800239e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80023a0:	4b1a      	ldr	r3, [pc, #104]	@ (800240c <MX_TIM1_Init+0xa8>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023a6:	4b19      	ldr	r3, [pc, #100]	@ (800240c <MX_TIM1_Init+0xa8>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80023ac:	2303      	movs	r3, #3
 80023ae:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80023b0:	2300      	movs	r3, #0
 80023b2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80023b4:	2301      	movs	r3, #1
 80023b6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80023b8:	2300      	movs	r3, #0
 80023ba:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80023bc:	2300      	movs	r3, #0
 80023be:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80023c0:	2300      	movs	r3, #0
 80023c2:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80023c4:	2301      	movs	r3, #1
 80023c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80023c8:	2300      	movs	r3, #0
 80023ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80023cc:	2300      	movs	r3, #0
 80023ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80023d0:	f107 030c 	add.w	r3, r7, #12
 80023d4:	4619      	mov	r1, r3
 80023d6:	480d      	ldr	r0, [pc, #52]	@ (800240c <MX_TIM1_Init+0xa8>)
 80023d8:	f001 ff60 	bl	800429c <HAL_TIM_Encoder_Init>
 80023dc:	4603      	mov	r3, r0
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d001      	beq.n	80023e6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80023e2:	f7ff fe87 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023e6:	2300      	movs	r3, #0
 80023e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023ea:	2300      	movs	r3, #0
 80023ec:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80023ee:	1d3b      	adds	r3, r7, #4
 80023f0:	4619      	mov	r1, r3
 80023f2:	4806      	ldr	r0, [pc, #24]	@ (800240c <MX_TIM1_Init+0xa8>)
 80023f4:	f002 fce2 	bl	8004dbc <HAL_TIMEx_MasterConfigSynchronization>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d001      	beq.n	8002402 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 80023fe:	f7ff fe79 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002402:	bf00      	nop
 8002404:	3730      	adds	r7, #48	@ 0x30
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}
 800240a:	bf00      	nop
 800240c:	2000039c 	.word	0x2000039c
 8002410:	40010000 	.word	0x40010000

08002414 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b08c      	sub	sp, #48	@ 0x30
 8002418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800241a:	f107 030c 	add.w	r3, r7, #12
 800241e:	2224      	movs	r2, #36	@ 0x24
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f006 f991 	bl	800874a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002428:	1d3b      	adds	r3, r7, #4
 800242a:	2200      	movs	r2, #0
 800242c:	601a      	str	r2, [r3, #0]
 800242e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002430:	4b21      	ldr	r3, [pc, #132]	@ (80024b8 <MX_TIM2_Init+0xa4>)
 8002432:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8002436:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002438:	4b1f      	ldr	r3, [pc, #124]	@ (80024b8 <MX_TIM2_Init+0xa4>)
 800243a:	2200      	movs	r2, #0
 800243c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800243e:	4b1e      	ldr	r3, [pc, #120]	@ (80024b8 <MX_TIM2_Init+0xa4>)
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002444:	4b1c      	ldr	r3, [pc, #112]	@ (80024b8 <MX_TIM2_Init+0xa4>)
 8002446:	f04f 32ff 	mov.w	r2, #4294967295
 800244a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800244c:	4b1a      	ldr	r3, [pc, #104]	@ (80024b8 <MX_TIM2_Init+0xa4>)
 800244e:	2200      	movs	r2, #0
 8002450:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002452:	4b19      	ldr	r3, [pc, #100]	@ (80024b8 <MX_TIM2_Init+0xa4>)
 8002454:	2200      	movs	r2, #0
 8002456:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8002458:	2303      	movs	r3, #3
 800245a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002460:	2301      	movs	r3, #1
 8002462:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002464:	2300      	movs	r3, #0
 8002466:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8002468:	2300      	movs	r3, #0
 800246a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800246c:	2300      	movs	r3, #0
 800246e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002470:	2301      	movs	r3, #1
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002474:	2300      	movs	r3, #0
 8002476:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8002478:	2300      	movs	r3, #0
 800247a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	4619      	mov	r1, r3
 8002482:	480d      	ldr	r0, [pc, #52]	@ (80024b8 <MX_TIM2_Init+0xa4>)
 8002484:	f001 ff0a 	bl	800429c <HAL_TIM_Encoder_Init>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d001      	beq.n	8002492 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800248e:	f7ff fe31 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002492:	2300      	movs	r3, #0
 8002494:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002496:	2300      	movs	r3, #0
 8002498:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	4619      	mov	r1, r3
 800249e:	4806      	ldr	r0, [pc, #24]	@ (80024b8 <MX_TIM2_Init+0xa4>)
 80024a0:	f002 fc8c 	bl	8004dbc <HAL_TIMEx_MasterConfigSynchronization>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 80024aa:	f7ff fe23 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80024ae:	bf00      	nop
 80024b0:	3730      	adds	r7, #48	@ 0x30
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	200003e4 	.word	0x200003e4

080024bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	@ 0x30
 80024c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	2224      	movs	r2, #36	@ 0x24
 80024c8:	2100      	movs	r1, #0
 80024ca:	4618      	mov	r0, r3
 80024cc:	f006 f93d 	bl	800874a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80024d0:	1d3b      	adds	r3, r7, #4
 80024d2:	2200      	movs	r2, #0
 80024d4:	601a      	str	r2, [r3, #0]
 80024d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80024d8:	4b20      	ldr	r3, [pc, #128]	@ (800255c <MX_TIM3_Init+0xa0>)
 80024da:	4a21      	ldr	r2, [pc, #132]	@ (8002560 <MX_TIM3_Init+0xa4>)
 80024dc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80024de:	4b1f      	ldr	r3, [pc, #124]	@ (800255c <MX_TIM3_Init+0xa0>)
 80024e0:	2200      	movs	r2, #0
 80024e2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80024e4:	4b1d      	ldr	r3, [pc, #116]	@ (800255c <MX_TIM3_Init+0xa0>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80024ea:	4b1c      	ldr	r3, [pc, #112]	@ (800255c <MX_TIM3_Init+0xa0>)
 80024ec:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80024f0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024f2:	4b1a      	ldr	r3, [pc, #104]	@ (800255c <MX_TIM3_Init+0xa0>)
 80024f4:	2200      	movs	r2, #0
 80024f6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024f8:	4b18      	ldr	r3, [pc, #96]	@ (800255c <MX_TIM3_Init+0xa0>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80024fe:	2303      	movs	r3, #3
 8002500:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002502:	2300      	movs	r3, #0
 8002504:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002506:	2301      	movs	r3, #1
 8002508:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800250a:	2300      	movs	r3, #0
 800250c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800250e:	2300      	movs	r3, #0
 8002510:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002512:	2300      	movs	r3, #0
 8002514:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002516:	2301      	movs	r3, #1
 8002518:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800251a:	2300      	movs	r3, #0
 800251c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 800251e:	2300      	movs	r3, #0
 8002520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002522:	f107 030c 	add.w	r3, r7, #12
 8002526:	4619      	mov	r1, r3
 8002528:	480c      	ldr	r0, [pc, #48]	@ (800255c <MX_TIM3_Init+0xa0>)
 800252a:	f001 feb7 	bl	800429c <HAL_TIM_Encoder_Init>
 800252e:	4603      	mov	r3, r0
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002534:	f7ff fdde 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002538:	2300      	movs	r3, #0
 800253a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800253c:	2300      	movs	r3, #0
 800253e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002540:	1d3b      	adds	r3, r7, #4
 8002542:	4619      	mov	r1, r3
 8002544:	4805      	ldr	r0, [pc, #20]	@ (800255c <MX_TIM3_Init+0xa0>)
 8002546:	f002 fc39 	bl	8004dbc <HAL_TIMEx_MasterConfigSynchronization>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002550:	f7ff fdd0 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002554:	bf00      	nop
 8002556:	3730      	adds	r7, #48	@ 0x30
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	2000042c 	.word	0x2000042c
 8002560:	40000400 	.word	0x40000400

08002564 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b08a      	sub	sp, #40	@ 0x28
 8002568:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800256a:	f107 0320 	add.w	r3, r7, #32
 800256e:	2200      	movs	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002574:	1d3b      	adds	r3, r7, #4
 8002576:	2200      	movs	r2, #0
 8002578:	601a      	str	r2, [r3, #0]
 800257a:	605a      	str	r2, [r3, #4]
 800257c:	609a      	str	r2, [r3, #8]
 800257e:	60da      	str	r2, [r3, #12]
 8002580:	611a      	str	r2, [r3, #16]
 8002582:	615a      	str	r2, [r3, #20]
 8002584:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002586:	4b32      	ldr	r3, [pc, #200]	@ (8002650 <MX_TIM4_Init+0xec>)
 8002588:	4a32      	ldr	r2, [pc, #200]	@ (8002654 <MX_TIM4_Init+0xf0>)
 800258a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 41;
 800258c:	4b30      	ldr	r3, [pc, #192]	@ (8002650 <MX_TIM4_Init+0xec>)
 800258e:	2229      	movs	r2, #41	@ 0x29
 8002590:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002592:	4b2f      	ldr	r3, [pc, #188]	@ (8002650 <MX_TIM4_Init+0xec>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8002598:	4b2d      	ldr	r3, [pc, #180]	@ (8002650 <MX_TIM4_Init+0xec>)
 800259a:	2263      	movs	r2, #99	@ 0x63
 800259c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800259e:	4b2c      	ldr	r3, [pc, #176]	@ (8002650 <MX_TIM4_Init+0xec>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80025a4:	4b2a      	ldr	r3, [pc, #168]	@ (8002650 <MX_TIM4_Init+0xec>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80025aa:	4829      	ldr	r0, [pc, #164]	@ (8002650 <MX_TIM4_Init+0xec>)
 80025ac:	f001 fd5e 	bl	800406c <HAL_TIM_PWM_Init>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d001      	beq.n	80025ba <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80025b6:	f7ff fd9d 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025ba:	2300      	movs	r3, #0
 80025bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025be:	2300      	movs	r3, #0
 80025c0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025c2:	f107 0320 	add.w	r3, r7, #32
 80025c6:	4619      	mov	r1, r3
 80025c8:	4821      	ldr	r0, [pc, #132]	@ (8002650 <MX_TIM4_Init+0xec>)
 80025ca:	f002 fbf7 	bl	8004dbc <HAL_TIMEx_MasterConfigSynchronization>
 80025ce:	4603      	mov	r3, r0
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d001      	beq.n	80025d8 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80025d4:	f7ff fd8e 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025d8:	2360      	movs	r3, #96	@ 0x60
 80025da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80025e8:	1d3b      	adds	r3, r7, #4
 80025ea:	2200      	movs	r2, #0
 80025ec:	4619      	mov	r1, r3
 80025ee:	4818      	ldr	r0, [pc, #96]	@ (8002650 <MX_TIM4_Init+0xec>)
 80025f0:	f002 f878 	bl	80046e4 <HAL_TIM_PWM_ConfigChannel>
 80025f4:	4603      	mov	r3, r0
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d001      	beq.n	80025fe <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 80025fa:	f7ff fd7b 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80025fe:	1d3b      	adds	r3, r7, #4
 8002600:	2204      	movs	r2, #4
 8002602:	4619      	mov	r1, r3
 8002604:	4812      	ldr	r0, [pc, #72]	@ (8002650 <MX_TIM4_Init+0xec>)
 8002606:	f002 f86d 	bl	80046e4 <HAL_TIM_PWM_ConfigChannel>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8002610:	f7ff fd70 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002614:	1d3b      	adds	r3, r7, #4
 8002616:	2208      	movs	r2, #8
 8002618:	4619      	mov	r1, r3
 800261a:	480d      	ldr	r0, [pc, #52]	@ (8002650 <MX_TIM4_Init+0xec>)
 800261c:	f002 f862 	bl	80046e4 <HAL_TIM_PWM_ConfigChannel>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <MX_TIM4_Init+0xc6>
  {
    Error_Handler();
 8002626:	f7ff fd65 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800262a:	1d3b      	adds	r3, r7, #4
 800262c:	220c      	movs	r2, #12
 800262e:	4619      	mov	r1, r3
 8002630:	4807      	ldr	r0, [pc, #28]	@ (8002650 <MX_TIM4_Init+0xec>)
 8002632:	f002 f857 	bl	80046e4 <HAL_TIM_PWM_ConfigChannel>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d001      	beq.n	8002640 <MX_TIM4_Init+0xdc>
  {
    Error_Handler();
 800263c:	f7ff fd5a 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002640:	4803      	ldr	r0, [pc, #12]	@ (8002650 <MX_TIM4_Init+0xec>)
 8002642:	f000 faa3 	bl	8002b8c <HAL_TIM_MspPostInit>

}
 8002646:	bf00      	nop
 8002648:	3728      	adds	r7, #40	@ 0x28
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
 800264e:	bf00      	nop
 8002650:	20000474 	.word	0x20000474
 8002654:	40000800 	.word	0x40000800

08002658 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08c      	sub	sp, #48	@ 0x30
 800265c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800265e:	f107 030c 	add.w	r3, r7, #12
 8002662:	2224      	movs	r2, #36	@ 0x24
 8002664:	2100      	movs	r1, #0
 8002666:	4618      	mov	r0, r3
 8002668:	f006 f86f 	bl	800874a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800266c:	1d3b      	adds	r3, r7, #4
 800266e:	2200      	movs	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
 8002672:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002674:	4b20      	ldr	r3, [pc, #128]	@ (80026f8 <MX_TIM5_Init+0xa0>)
 8002676:	4a21      	ldr	r2, [pc, #132]	@ (80026fc <MX_TIM5_Init+0xa4>)
 8002678:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800267a:	4b1f      	ldr	r3, [pc, #124]	@ (80026f8 <MX_TIM5_Init+0xa0>)
 800267c:	2200      	movs	r2, #0
 800267e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002680:	4b1d      	ldr	r3, [pc, #116]	@ (80026f8 <MX_TIM5_Init+0xa0>)
 8002682:	2200      	movs	r2, #0
 8002684:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002686:	4b1c      	ldr	r3, [pc, #112]	@ (80026f8 <MX_TIM5_Init+0xa0>)
 8002688:	f04f 32ff 	mov.w	r2, #4294967295
 800268c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800268e:	4b1a      	ldr	r3, [pc, #104]	@ (80026f8 <MX_TIM5_Init+0xa0>)
 8002690:	2200      	movs	r2, #0
 8002692:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002694:	4b18      	ldr	r3, [pc, #96]	@ (80026f8 <MX_TIM5_Init+0xa0>)
 8002696:	2200      	movs	r2, #0
 8002698:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800269a:	2303      	movs	r3, #3
 800269c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800269e:	2300      	movs	r3, #0
 80026a0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80026a2:	2301      	movs	r3, #1
 80026a4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80026a6:	2300      	movs	r3, #0
 80026a8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80026ae:	2300      	movs	r3, #0
 80026b0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80026b6:	2300      	movs	r3, #0
 80026b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80026ba:	2300      	movs	r3, #0
 80026bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80026be:	f107 030c 	add.w	r3, r7, #12
 80026c2:	4619      	mov	r1, r3
 80026c4:	480c      	ldr	r0, [pc, #48]	@ (80026f8 <MX_TIM5_Init+0xa0>)
 80026c6:	f001 fde9 	bl	800429c <HAL_TIM_Encoder_Init>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d001      	beq.n	80026d4 <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80026d0:	f7ff fd10 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d4:	2300      	movs	r3, #0
 80026d6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80026dc:	1d3b      	adds	r3, r7, #4
 80026de:	4619      	mov	r1, r3
 80026e0:	4805      	ldr	r0, [pc, #20]	@ (80026f8 <MX_TIM5_Init+0xa0>)
 80026e2:	f002 fb6b 	bl	8004dbc <HAL_TIMEx_MasterConfigSynchronization>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80026ec:	f7ff fd02 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80026f0:	bf00      	nop
 80026f2:	3730      	adds	r7, #48	@ 0x30
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	200004bc 	.word	0x200004bc
 80026fc:	40000c00 	.word	0x40000c00

08002700 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002706:	463b      	mov	r3, r7
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800270e:	4b15      	ldr	r3, [pc, #84]	@ (8002764 <MX_TIM6_Init+0x64>)
 8002710:	4a15      	ldr	r2, [pc, #84]	@ (8002768 <MX_TIM6_Init+0x68>)
 8002712:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16799;
 8002714:	4b13      	ldr	r3, [pc, #76]	@ (8002764 <MX_TIM6_Init+0x64>)
 8002716:	f244 129f 	movw	r2, #16799	@ 0x419f
 800271a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271c:	4b11      	ldr	r3, [pc, #68]	@ (8002764 <MX_TIM6_Init+0x64>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <MX_TIM6_Init+0x64>)
 8002724:	2263      	movs	r2, #99	@ 0x63
 8002726:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002728:	4b0e      	ldr	r3, [pc, #56]	@ (8002764 <MX_TIM6_Init+0x64>)
 800272a:	2200      	movs	r2, #0
 800272c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800272e:	480d      	ldr	r0, [pc, #52]	@ (8002764 <MX_TIM6_Init+0x64>)
 8002730:	f001 fbdc 	bl	8003eec <HAL_TIM_Base_Init>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800273a:	f7ff fcdb 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800273e:	2300      	movs	r3, #0
 8002740:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002742:	2300      	movs	r3, #0
 8002744:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002746:	463b      	mov	r3, r7
 8002748:	4619      	mov	r1, r3
 800274a:	4806      	ldr	r0, [pc, #24]	@ (8002764 <MX_TIM6_Init+0x64>)
 800274c:	f002 fb36 	bl	8004dbc <HAL_TIMEx_MasterConfigSynchronization>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8002756:	f7ff fccd 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800275a:	bf00      	nop
 800275c:	3708      	adds	r7, #8
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	20000504 	.word	0x20000504
 8002768:	40001000 	.word	0x40001000

0800276c <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b092      	sub	sp, #72	@ 0x48
 8002770:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002772:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]
 800277a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800277c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	609a      	str	r2, [r3, #8]
 8002788:	60da      	str	r2, [r3, #12]
 800278a:	611a      	str	r2, [r3, #16]
 800278c:	615a      	str	r2, [r3, #20]
 800278e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002790:	1d3b      	adds	r3, r7, #4
 8002792:	2220      	movs	r2, #32
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f005 ffd7 	bl	800874a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800279c:	4b44      	ldr	r3, [pc, #272]	@ (80028b0 <MX_TIM8_Init+0x144>)
 800279e:	4a45      	ldr	r2, [pc, #276]	@ (80028b4 <MX_TIM8_Init+0x148>)
 80027a0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 41;
 80027a2:	4b43      	ldr	r3, [pc, #268]	@ (80028b0 <MX_TIM8_Init+0x144>)
 80027a4:	2229      	movs	r2, #41	@ 0x29
 80027a6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027a8:	4b41      	ldr	r3, [pc, #260]	@ (80028b0 <MX_TIM8_Init+0x144>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 99;
 80027ae:	4b40      	ldr	r3, [pc, #256]	@ (80028b0 <MX_TIM8_Init+0x144>)
 80027b0:	2263      	movs	r2, #99	@ 0x63
 80027b2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027b4:	4b3e      	ldr	r3, [pc, #248]	@ (80028b0 <MX_TIM8_Init+0x144>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80027ba:	4b3d      	ldr	r3, [pc, #244]	@ (80028b0 <MX_TIM8_Init+0x144>)
 80027bc:	2200      	movs	r2, #0
 80027be:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027c0:	4b3b      	ldr	r3, [pc, #236]	@ (80028b0 <MX_TIM8_Init+0x144>)
 80027c2:	2200      	movs	r2, #0
 80027c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80027c6:	483a      	ldr	r0, [pc, #232]	@ (80028b0 <MX_TIM8_Init+0x144>)
 80027c8:	f001 fc50 	bl	800406c <HAL_TIM_PWM_Init>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM8_Init+0x6a>
  {
    Error_Handler();
 80027d2:	f7ff fc8f 	bl	80020f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d6:	2300      	movs	r3, #0
 80027d8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80027de:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80027e2:	4619      	mov	r1, r3
 80027e4:	4832      	ldr	r0, [pc, #200]	@ (80028b0 <MX_TIM8_Init+0x144>)
 80027e6:	f002 fae9 	bl	8004dbc <HAL_TIMEx_MasterConfigSynchronization>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM8_Init+0x88>
  {
    Error_Handler();
 80027f0:	f7ff fc80 	bl	80020f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027f4:	2360      	movs	r3, #96	@ 0x60
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027fc:	2300      	movs	r3, #0
 80027fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002800:	2300      	movs	r3, #0
 8002802:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002804:	2300      	movs	r3, #0
 8002806:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002808:	2300      	movs	r3, #0
 800280a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800280c:	2300      	movs	r3, #0
 800280e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002810:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002814:	2200      	movs	r2, #0
 8002816:	4619      	mov	r1, r3
 8002818:	4825      	ldr	r0, [pc, #148]	@ (80028b0 <MX_TIM8_Init+0x144>)
 800281a:	f001 ff63 	bl	80046e4 <HAL_TIM_PWM_ConfigChannel>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d001      	beq.n	8002828 <MX_TIM8_Init+0xbc>
  {
    Error_Handler();
 8002824:	f7ff fc66 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002828:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800282c:	2204      	movs	r2, #4
 800282e:	4619      	mov	r1, r3
 8002830:	481f      	ldr	r0, [pc, #124]	@ (80028b0 <MX_TIM8_Init+0x144>)
 8002832:	f001 ff57 	bl	80046e4 <HAL_TIM_PWM_ConfigChannel>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 800283c:	f7ff fc5a 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002840:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002844:	2208      	movs	r2, #8
 8002846:	4619      	mov	r1, r3
 8002848:	4819      	ldr	r0, [pc, #100]	@ (80028b0 <MX_TIM8_Init+0x144>)
 800284a:	f001 ff4b 	bl	80046e4 <HAL_TIM_PWM_ConfigChannel>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <MX_TIM8_Init+0xec>
  {
    Error_Handler();
 8002854:	f7ff fc4e 	bl	80020f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800285c:	220c      	movs	r2, #12
 800285e:	4619      	mov	r1, r3
 8002860:	4813      	ldr	r0, [pc, #76]	@ (80028b0 <MX_TIM8_Init+0x144>)
 8002862:	f001 ff3f 	bl	80046e4 <HAL_TIM_PWM_ConfigChannel>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <MX_TIM8_Init+0x104>
  {
    Error_Handler();
 800286c:	f7ff fc42 	bl	80020f4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002870:	2300      	movs	r3, #0
 8002872:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002874:	2300      	movs	r3, #0
 8002876:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002878:	2300      	movs	r3, #0
 800287a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800287c:	2300      	movs	r3, #0
 800287e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002884:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002888:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800288a:	2300      	movs	r3, #0
 800288c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800288e:	1d3b      	adds	r3, r7, #4
 8002890:	4619      	mov	r1, r3
 8002892:	4807      	ldr	r0, [pc, #28]	@ (80028b0 <MX_TIM8_Init+0x144>)
 8002894:	f002 fb0e 	bl	8004eb4 <HAL_TIMEx_ConfigBreakDeadTime>
 8002898:	4603      	mov	r3, r0
 800289a:	2b00      	cmp	r3, #0
 800289c:	d001      	beq.n	80028a2 <MX_TIM8_Init+0x136>
  {
    Error_Handler();
 800289e:	f7ff fc29 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80028a2:	4803      	ldr	r0, [pc, #12]	@ (80028b0 <MX_TIM8_Init+0x144>)
 80028a4:	f000 f972 	bl	8002b8c <HAL_TIM_MspPostInit>

}
 80028a8:	bf00      	nop
 80028aa:	3748      	adds	r7, #72	@ 0x48
 80028ac:	46bd      	mov	sp, r7
 80028ae:	bd80      	pop	{r7, pc}
 80028b0:	2000054c 	.word	0x2000054c
 80028b4:	40010400 	.word	0x40010400

080028b8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b090      	sub	sp, #64	@ 0x40
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80028c4:	2200      	movs	r2, #0
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	605a      	str	r2, [r3, #4]
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	60da      	str	r2, [r3, #12]
 80028ce:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a73      	ldr	r2, [pc, #460]	@ (8002aa4 <HAL_TIM_Encoder_MspInit+0x1ec>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d12d      	bne.n	8002936 <HAL_TIM_Encoder_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028de:	4b72      	ldr	r3, [pc, #456]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80028e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028e2:	4a71      	ldr	r2, [pc, #452]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80028e4:	f043 0301 	orr.w	r3, r3, #1
 80028e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ea:	4b6f      	ldr	r3, [pc, #444]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80028ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ee:	f003 0301 	and.w	r3, r3, #1
 80028f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fa:	4b6b      	ldr	r3, [pc, #428]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a6a      	ldr	r2, [pc, #424]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002900:	f043 0310 	orr.w	r3, r3, #16
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b68      	ldr	r3, [pc, #416]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0310 	and.w	r3, r3, #16
 800290e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002910:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 8002912:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002916:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002918:	2302      	movs	r3, #2
 800291a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800291c:	2300      	movs	r3, #0
 800291e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002920:	2300      	movs	r3, #0
 8002922:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002924:	2301      	movs	r3, #1
 8002926:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002928:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800292c:	4619      	mov	r1, r3
 800292e:	485f      	ldr	r0, [pc, #380]	@ (8002aac <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002930:	f000 fca8 	bl	8003284 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 8002934:	e0b2      	b.n	8002a9c <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800293e:	d14a      	bne.n	80029d6 <HAL_TIM_Encoder_MspInit+0x11e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002940:	2300      	movs	r3, #0
 8002942:	623b      	str	r3, [r7, #32]
 8002944:	4b58      	ldr	r3, [pc, #352]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002948:	4a57      	ldr	r2, [pc, #348]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800294a:	f043 0301 	orr.w	r3, r3, #1
 800294e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002950:	4b55      	ldr	r3, [pc, #340]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002952:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002954:	f003 0301 	and.w	r3, r3, #1
 8002958:	623b      	str	r3, [r7, #32]
 800295a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800295c:	2300      	movs	r3, #0
 800295e:	61fb      	str	r3, [r7, #28]
 8002960:	4b51      	ldr	r3, [pc, #324]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002964:	4a50      	ldr	r2, [pc, #320]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6313      	str	r3, [r2, #48]	@ 0x30
 800296c:	4b4e      	ldr	r3, [pc, #312]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800296e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002970:	f003 0301 	and.w	r3, r3, #1
 8002974:	61fb      	str	r3, [r7, #28]
 8002976:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002978:	2300      	movs	r3, #0
 800297a:	61bb      	str	r3, [r7, #24]
 800297c:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800297e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002980:	4a49      	ldr	r2, [pc, #292]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002982:	f043 0302 	orr.w	r3, r3, #2
 8002986:	6313      	str	r3, [r2, #48]	@ 0x30
 8002988:	4b47      	ldr	r3, [pc, #284]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 800298a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	61bb      	str	r3, [r7, #24]
 8002992:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002994:	2320      	movs	r3, #32
 8002996:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002998:	2302      	movs	r3, #2
 800299a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299c:	2300      	movs	r3, #0
 800299e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029a0:	2300      	movs	r3, #0
 80029a2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029a4:	2301      	movs	r3, #1
 80029a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029ac:	4619      	mov	r1, r3
 80029ae:	4840      	ldr	r0, [pc, #256]	@ (8002ab0 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80029b0:	f000 fc68 	bl	8003284 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80029b4:	2308      	movs	r3, #8
 80029b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029b8:	2302      	movs	r3, #2
 80029ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029bc:	2300      	movs	r3, #0
 80029be:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029c0:	2300      	movs	r3, #0
 80029c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029c4:	2301      	movs	r3, #1
 80029c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029cc:	4619      	mov	r1, r3
 80029ce:	4839      	ldr	r0, [pc, #228]	@ (8002ab4 <HAL_TIM_Encoder_MspInit+0x1fc>)
 80029d0:	f000 fc58 	bl	8003284 <HAL_GPIO_Init>
}
 80029d4:	e062      	b.n	8002a9c <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM3)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a37      	ldr	r2, [pc, #220]	@ (8002ab8 <HAL_TIM_Encoder_MspInit+0x200>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d12c      	bne.n	8002a3a <HAL_TIM_Encoder_MspInit+0x182>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80029e0:	2300      	movs	r3, #0
 80029e2:	617b      	str	r3, [r7, #20]
 80029e4:	4b30      	ldr	r3, [pc, #192]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80029e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029e8:	4a2f      	ldr	r2, [pc, #188]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80029ea:	f043 0302 	orr.w	r3, r3, #2
 80029ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f0:	4b2d      	ldr	r3, [pc, #180]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 80029f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	617b      	str	r3, [r7, #20]
 80029fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029fc:	2300      	movs	r3, #0
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	4b29      	ldr	r3, [pc, #164]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a04:	4a28      	ldr	r2, [pc, #160]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002a06:	f043 0301 	orr.w	r3, r3, #1
 8002a0a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a0c:	4b26      	ldr	r3, [pc, #152]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	613b      	str	r3, [r7, #16]
 8002a16:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a18:	23c0      	movs	r3, #192	@ 0xc0
 8002a1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a20:	2300      	movs	r3, #0
 8002a22:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a24:	2300      	movs	r3, #0
 8002a26:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002a28:	2302      	movs	r3, #2
 8002a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a2c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a30:	4619      	mov	r1, r3
 8002a32:	481f      	ldr	r0, [pc, #124]	@ (8002ab0 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002a34:	f000 fc26 	bl	8003284 <HAL_GPIO_Init>
}
 8002a38:	e030      	b.n	8002a9c <HAL_TIM_Encoder_MspInit+0x1e4>
  else if(tim_encoderHandle->Instance==TIM5)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a1f      	ldr	r2, [pc, #124]	@ (8002abc <HAL_TIM_Encoder_MspInit+0x204>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d12b      	bne.n	8002a9c <HAL_TIM_Encoder_MspInit+0x1e4>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002a44:	2300      	movs	r3, #0
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	4b17      	ldr	r3, [pc, #92]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	4a16      	ldr	r2, [pc, #88]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002a4e:	f043 0308 	orr.w	r3, r3, #8
 8002a52:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a54:	4b14      	ldr	r3, [pc, #80]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a58:	f003 0308 	and.w	r3, r3, #8
 8002a5c:	60fb      	str	r3, [r7, #12]
 8002a5e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a60:	2300      	movs	r3, #0
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	4b10      	ldr	r3, [pc, #64]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a68:	4a0f      	ldr	r2, [pc, #60]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002a6a:	f043 0301 	orr.w	r3, r3, #1
 8002a6e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a70:	4b0d      	ldr	r3, [pc, #52]	@ (8002aa8 <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a74:	f003 0301 	and.w	r3, r3, #1
 8002a78:	60bb      	str	r3, [r7, #8]
 8002a7a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a80:	2302      	movs	r3, #2
 8002a82:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a84:	2300      	movs	r3, #0
 8002a86:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a94:	4619      	mov	r1, r3
 8002a96:	4806      	ldr	r0, [pc, #24]	@ (8002ab0 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002a98:	f000 fbf4 	bl	8003284 <HAL_GPIO_Init>
}
 8002a9c:	bf00      	nop
 8002a9e:	3740      	adds	r7, #64	@ 0x40
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40020000 	.word	0x40020000
 8002ab4:	40020400 	.word	0x40020400
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000c00 	.word	0x40000c00

08002ac0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b084      	sub	sp, #16
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a18      	ldr	r2, [pc, #96]	@ (8002b30 <HAL_TIM_PWM_MspInit+0x70>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d116      	bne.n	8002b00 <HAL_TIM_PWM_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
 8002ad6:	4b17      	ldr	r3, [pc, #92]	@ (8002b34 <HAL_TIM_PWM_MspInit+0x74>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ada:	4a16      	ldr	r2, [pc, #88]	@ (8002b34 <HAL_TIM_PWM_MspInit+0x74>)
 8002adc:	f043 0304 	orr.w	r3, r3, #4
 8002ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ae2:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <HAL_TIM_PWM_MspInit+0x74>)
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae6:	f003 0304 	and.w	r3, r3, #4
 8002aea:	60fb      	str	r3, [r7, #12]
 8002aec:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002aee:	2200      	movs	r2, #0
 8002af0:	2100      	movs	r1, #0
 8002af2:	201e      	movs	r0, #30
 8002af4:	f000 fafd 	bl	80030f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002af8:	201e      	movs	r0, #30
 8002afa:	f000 fb16 	bl	800312a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM8_CLK_ENABLE();
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8002afe:	e012      	b.n	8002b26 <HAL_TIM_PWM_MspInit+0x66>
  else if(tim_pwmHandle->Instance==TIM8)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a0c      	ldr	r2, [pc, #48]	@ (8002b38 <HAL_TIM_PWM_MspInit+0x78>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d10d      	bne.n	8002b26 <HAL_TIM_PWM_MspInit+0x66>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	60bb      	str	r3, [r7, #8]
 8002b0e:	4b09      	ldr	r3, [pc, #36]	@ (8002b34 <HAL_TIM_PWM_MspInit+0x74>)
 8002b10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b12:	4a08      	ldr	r2, [pc, #32]	@ (8002b34 <HAL_TIM_PWM_MspInit+0x74>)
 8002b14:	f043 0302 	orr.w	r3, r3, #2
 8002b18:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b1a:	4b06      	ldr	r3, [pc, #24]	@ (8002b34 <HAL_TIM_PWM_MspInit+0x74>)
 8002b1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b1e:	f003 0302 	and.w	r3, r3, #2
 8002b22:	60bb      	str	r3, [r7, #8]
 8002b24:	68bb      	ldr	r3, [r7, #8]
}
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40000800 	.word	0x40000800
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40010400 	.word	0x40010400

08002b3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a0e      	ldr	r2, [pc, #56]	@ (8002b84 <HAL_TIM_Base_MspInit+0x48>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d115      	bne.n	8002b7a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002b4e:	2300      	movs	r3, #0
 8002b50:	60fb      	str	r3, [r7, #12]
 8002b52:	4b0d      	ldr	r3, [pc, #52]	@ (8002b88 <HAL_TIM_Base_MspInit+0x4c>)
 8002b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b56:	4a0c      	ldr	r2, [pc, #48]	@ (8002b88 <HAL_TIM_Base_MspInit+0x4c>)
 8002b58:	f043 0310 	orr.w	r3, r3, #16
 8002b5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002b88 <HAL_TIM_Base_MspInit+0x4c>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	60fb      	str	r3, [r7, #12]
 8002b68:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	2100      	movs	r1, #0
 8002b6e:	2036      	movs	r0, #54	@ 0x36
 8002b70:	f000 fabf 	bl	80030f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002b74:	2036      	movs	r0, #54	@ 0x36
 8002b76:	f000 fad8 	bl	800312a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8002b7a:	bf00      	nop
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40001000 	.word	0x40001000
 8002b88:	40023800 	.word	0x40023800

08002b8c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08a      	sub	sp, #40	@ 0x28
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b94:	f107 0314 	add.w	r3, r7, #20
 8002b98:	2200      	movs	r2, #0
 8002b9a:	601a      	str	r2, [r3, #0]
 8002b9c:	605a      	str	r2, [r3, #4]
 8002b9e:	609a      	str	r2, [r3, #8]
 8002ba0:	60da      	str	r2, [r3, #12]
 8002ba2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a25      	ldr	r2, [pc, #148]	@ (8002c40 <HAL_TIM_MspPostInit+0xb4>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d11f      	bne.n	8002bee <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
 8002bb2:	4b24      	ldr	r3, [pc, #144]	@ (8002c44 <HAL_TIM_MspPostInit+0xb8>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	4a23      	ldr	r2, [pc, #140]	@ (8002c44 <HAL_TIM_MspPostInit+0xb8>)
 8002bb8:	f043 0308 	orr.w	r3, r3, #8
 8002bbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bbe:	4b21      	ldr	r3, [pc, #132]	@ (8002c44 <HAL_TIM_MspPostInit+0xb8>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bc2:	f003 0308 	and.w	r3, r3, #8
 8002bc6:	613b      	str	r3, [r7, #16]
 8002bc8:	693b      	ldr	r3, [r7, #16]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002bca:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	4818      	ldr	r0, [pc, #96]	@ (8002c48 <HAL_TIM_MspPostInit+0xbc>)
 8002be8:	f000 fb4c 	bl	8003284 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8002bec:	e023      	b.n	8002c36 <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM8)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	@ (8002c4c <HAL_TIM_MspPostInit+0xc0>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d11e      	bne.n	8002c36 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	4b11      	ldr	r3, [pc, #68]	@ (8002c44 <HAL_TIM_MspPostInit+0xb8>)
 8002bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c00:	4a10      	ldr	r2, [pc, #64]	@ (8002c44 <HAL_TIM_MspPostInit+0xb8>)
 8002c02:	f043 0304 	orr.w	r3, r3, #4
 8002c06:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c08:	4b0e      	ldr	r3, [pc, #56]	@ (8002c44 <HAL_TIM_MspPostInit+0xb8>)
 8002c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0c:	f003 0304 	and.w	r3, r3, #4
 8002c10:	60fb      	str	r3, [r7, #12]
 8002c12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002c14:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8002c18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c1a:	2302      	movs	r3, #2
 8002c1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002c26:	2303      	movs	r3, #3
 8002c28:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002c2a:	f107 0314 	add.w	r3, r7, #20
 8002c2e:	4619      	mov	r1, r3
 8002c30:	4807      	ldr	r0, [pc, #28]	@ (8002c50 <HAL_TIM_MspPostInit+0xc4>)
 8002c32:	f000 fb27 	bl	8003284 <HAL_GPIO_Init>
}
 8002c36:	bf00      	nop
 8002c38:	3728      	adds	r7, #40	@ 0x28
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40000800 	.word	0x40000800
 8002c44:	40023800 	.word	0x40023800
 8002c48:	40020c00 	.word	0x40020c00
 8002c4c:	40010400 	.word	0x40010400
 8002c50:	40020800 	.word	0x40020800

08002c54 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002c58:	4b11      	ldr	r3, [pc, #68]	@ (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c5a:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <MX_USART1_UART_Init+0x50>)
 8002c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	@ (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c6e:	2200      	movs	r2, #0
 8002c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002c72:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002c78:	4b09      	ldr	r3, [pc, #36]	@ (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c7a:	220c      	movs	r2, #12
 8002c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c7e:	4b08      	ldr	r3, [pc, #32]	@ (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c84:	4b06      	ldr	r3, [pc, #24]	@ (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002c8a:	4805      	ldr	r0, [pc, #20]	@ (8002ca0 <MX_USART1_UART_Init+0x4c>)
 8002c8c:	f002 f978 	bl	8004f80 <HAL_UART_Init>
 8002c90:	4603      	mov	r3, r0
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d001      	beq.n	8002c9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002c96:	f7ff fa2d 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002c9a:	bf00      	nop
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20000594 	.word	0x20000594
 8002ca4:	40011000 	.word	0x40011000

08002ca8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cae:	4a12      	ldr	r2, [pc, #72]	@ (8002cf8 <MX_USART2_UART_Init+0x50>)
 8002cb0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002cb2:	4b10      	ldr	r3, [pc, #64]	@ (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cb4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002cb8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002cba:	4b0e      	ldr	r3, [pc, #56]	@ (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002cc0:	4b0c      	ldr	r3, [pc, #48]	@ (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002ccc:	4b09      	ldr	r3, [pc, #36]	@ (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cce:	220c      	movs	r2, #12
 8002cd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd2:	4b08      	ldr	r3, [pc, #32]	@ (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002cda:	2200      	movs	r2, #0
 8002cdc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002cde:	4805      	ldr	r0, [pc, #20]	@ (8002cf4 <MX_USART2_UART_Init+0x4c>)
 8002ce0:	f002 f94e 	bl	8004f80 <HAL_UART_Init>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d001      	beq.n	8002cee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002cea:	f7ff fa03 	bl	80020f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	200005dc 	.word	0x200005dc
 8002cf8:	40004400 	.word	0x40004400

08002cfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b08c      	sub	sp, #48	@ 0x30
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d04:	f107 031c 	add.w	r3, r7, #28
 8002d08:	2200      	movs	r2, #0
 8002d0a:	601a      	str	r2, [r3, #0]
 8002d0c:	605a      	str	r2, [r3, #4]
 8002d0e:	609a      	str	r2, [r3, #8]
 8002d10:	60da      	str	r2, [r3, #12]
 8002d12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a36      	ldr	r2, [pc, #216]	@ (8002df4 <HAL_UART_MspInit+0xf8>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d135      	bne.n	8002d8a <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	4b35      	ldr	r3, [pc, #212]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d26:	4a34      	ldr	r2, [pc, #208]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d28:	f043 0310 	orr.w	r3, r3, #16
 8002d2c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d2e:	4b32      	ldr	r3, [pc, #200]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	61bb      	str	r3, [r7, #24]
 8002d38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	617b      	str	r3, [r7, #20]
 8002d3e:	4b2e      	ldr	r3, [pc, #184]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d42:	4a2d      	ldr	r2, [pc, #180]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d44:	f043 0301 	orr.w	r3, r3, #1
 8002d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d4a:	4b2b      	ldr	r3, [pc, #172]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4e:	f003 0301 	and.w	r3, r3, #1
 8002d52:	617b      	str	r3, [r7, #20]
 8002d54:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d56:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002d5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d60:	2300      	movs	r3, #0
 8002d62:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d64:	2303      	movs	r3, #3
 8002d66:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002d68:	2307      	movs	r3, #7
 8002d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d6c:	f107 031c 	add.w	r3, r7, #28
 8002d70:	4619      	mov	r1, r3
 8002d72:	4822      	ldr	r0, [pc, #136]	@ (8002dfc <HAL_UART_MspInit+0x100>)
 8002d74:	f000 fa86 	bl	8003284 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002d78:	2200      	movs	r2, #0
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	2025      	movs	r0, #37	@ 0x25
 8002d7e:	f000 f9b8 	bl	80030f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002d82:	2025      	movs	r0, #37	@ 0x25
 8002d84:	f000 f9d1 	bl	800312a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d88:	e030      	b.n	8002dec <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a1c      	ldr	r2, [pc, #112]	@ (8002e00 <HAL_UART_MspInit+0x104>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d12b      	bne.n	8002dec <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002d94:	2300      	movs	r3, #0
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	4b17      	ldr	r3, [pc, #92]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9c:	4a16      	ldr	r2, [pc, #88]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002d9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002da2:	6413      	str	r3, [r2, #64]	@ 0x40
 8002da4:	4b14      	ldr	r3, [pc, #80]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dac:	613b      	str	r3, [r7, #16]
 8002dae:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002db0:	2300      	movs	r3, #0
 8002db2:	60fb      	str	r3, [r7, #12]
 8002db4:	4b10      	ldr	r3, [pc, #64]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002db8:	4a0f      	ldr	r2, [pc, #60]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002dc0:	4b0d      	ldr	r3, [pc, #52]	@ (8002df8 <HAL_UART_MspInit+0xfc>)
 8002dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002dcc:	230c      	movs	r3, #12
 8002dce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dd0:	2302      	movs	r3, #2
 8002dd2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ddc:	2307      	movs	r3, #7
 8002dde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002de0:	f107 031c 	add.w	r3, r7, #28
 8002de4:	4619      	mov	r1, r3
 8002de6:	4805      	ldr	r0, [pc, #20]	@ (8002dfc <HAL_UART_MspInit+0x100>)
 8002de8:	f000 fa4c 	bl	8003284 <HAL_GPIO_Init>
}
 8002dec:	bf00      	nop
 8002dee:	3730      	adds	r7, #48	@ 0x30
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	40011000 	.word	0x40011000
 8002df8:	40023800 	.word	0x40023800
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40004400 	.word	0x40004400

08002e04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e3c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e08:	f7ff fa9a 	bl	8002340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e0c:	480c      	ldr	r0, [pc, #48]	@ (8002e40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e0e:	490d      	ldr	r1, [pc, #52]	@ (8002e44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e10:	4a0d      	ldr	r2, [pc, #52]	@ (8002e48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e14:	e002      	b.n	8002e1c <LoopCopyDataInit>

08002e16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e1a:	3304      	adds	r3, #4

08002e1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e20:	d3f9      	bcc.n	8002e16 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e22:	4a0a      	ldr	r2, [pc, #40]	@ (8002e4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e24:	4c0a      	ldr	r4, [pc, #40]	@ (8002e50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e28:	e001      	b.n	8002e2e <LoopFillZerobss>

08002e2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e2c:	3204      	adds	r2, #4

08002e2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e30:	d3fb      	bcc.n	8002e2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e32:	f005 fcf5 	bl	8008820 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e36:	f7ff f8d3 	bl	8001fe0 <main>
  bx  lr    
 8002e3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002e44:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 8002e48:	0800bb6c 	.word	0x0800bb6c
  ldr r2, =_sbss
 8002e4c:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 8002e50:	20000774 	.word	0x20000774

08002e54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e54:	e7fe      	b.n	8002e54 <ADC_IRQHandler>
	...

08002e58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e5c:	4b0e      	ldr	r3, [pc, #56]	@ (8002e98 <HAL_Init+0x40>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a0d      	ldr	r2, [pc, #52]	@ (8002e98 <HAL_Init+0x40>)
 8002e62:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002e66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e68:	4b0b      	ldr	r3, [pc, #44]	@ (8002e98 <HAL_Init+0x40>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a0a      	ldr	r2, [pc, #40]	@ (8002e98 <HAL_Init+0x40>)
 8002e6e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002e72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e74:	4b08      	ldr	r3, [pc, #32]	@ (8002e98 <HAL_Init+0x40>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a07      	ldr	r2, [pc, #28]	@ (8002e98 <HAL_Init+0x40>)
 8002e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e80:	2003      	movs	r0, #3
 8002e82:	f000 f92b 	bl	80030dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e86:	200f      	movs	r0, #15
 8002e88:	f000 f808 	bl	8002e9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e8c:	f7ff f938 	bl	8002100 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e90:	2300      	movs	r3, #0
}
 8002e92:	4618      	mov	r0, r3
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	40023c00 	.word	0x40023c00

08002e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b082      	sub	sp, #8
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ea4:	4b12      	ldr	r3, [pc, #72]	@ (8002ef0 <HAL_InitTick+0x54>)
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	4b12      	ldr	r3, [pc, #72]	@ (8002ef4 <HAL_InitTick+0x58>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	4619      	mov	r1, r3
 8002eae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002eb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f000 f943 	bl	8003146 <HAL_SYSTICK_Config>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d001      	beq.n	8002eca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002ec6:	2301      	movs	r3, #1
 8002ec8:	e00e      	b.n	8002ee8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2b0f      	cmp	r3, #15
 8002ece:	d80a      	bhi.n	8002ee6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	6879      	ldr	r1, [r7, #4]
 8002ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ed8:	f000 f90b 	bl	80030f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002edc:	4a06      	ldr	r2, [pc, #24]	@ (8002ef8 <HAL_InitTick+0x5c>)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	e000      	b.n	8002ee8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3708      	adds	r7, #8
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	20000024 	.word	0x20000024
 8002ef4:	2000002c 	.word	0x2000002c
 8002ef8:	20000028 	.word	0x20000028

08002efc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002efc:	b480      	push	{r7}
 8002efe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_IncTick+0x20>)
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	461a      	mov	r2, r3
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_IncTick+0x24>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	4a04      	ldr	r2, [pc, #16]	@ (8002f20 <HAL_IncTick+0x24>)
 8002f0e:	6013      	str	r3, [r2, #0]
}
 8002f10:	bf00      	nop
 8002f12:	46bd      	mov	sp, r7
 8002f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f18:	4770      	bx	lr
 8002f1a:	bf00      	nop
 8002f1c:	2000002c 	.word	0x2000002c
 8002f20:	20000624 	.word	0x20000624

08002f24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f24:	b480      	push	{r7}
 8002f26:	af00      	add	r7, sp, #0
  return uwTick;
 8002f28:	4b03      	ldr	r3, [pc, #12]	@ (8002f38 <HAL_GetTick+0x14>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
 8002f36:	bf00      	nop
 8002f38:	20000624 	.word	0x20000624

08002f3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f80 <__NVIC_SetPriorityGrouping+0x44>)
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f52:	68ba      	ldr	r2, [r7, #8]
 8002f54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002f58:	4013      	ands	r3, r2
 8002f5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002f68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f6e:	4a04      	ldr	r2, [pc, #16]	@ (8002f80 <__NVIC_SetPriorityGrouping+0x44>)
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	60d3      	str	r3, [r2, #12]
}
 8002f74:	bf00      	nop
 8002f76:	3714      	adds	r7, #20
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr
 8002f80:	e000ed00 	.word	0xe000ed00

08002f84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f84:	b480      	push	{r7}
 8002f86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f88:	4b04      	ldr	r3, [pc, #16]	@ (8002f9c <__NVIC_GetPriorityGrouping+0x18>)
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	0a1b      	lsrs	r3, r3, #8
 8002f8e:	f003 0307 	and.w	r3, r3, #7
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	e000ed00 	.word	0xe000ed00

08002fa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002faa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	db0b      	blt.n	8002fca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fb2:	79fb      	ldrb	r3, [r7, #7]
 8002fb4:	f003 021f 	and.w	r2, r3, #31
 8002fb8:	4907      	ldr	r1, [pc, #28]	@ (8002fd8 <__NVIC_EnableIRQ+0x38>)
 8002fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbe:	095b      	lsrs	r3, r3, #5
 8002fc0:	2001      	movs	r0, #1
 8002fc2:	fa00 f202 	lsl.w	r2, r0, r2
 8002fc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr
 8002fd6:	bf00      	nop
 8002fd8:	e000e100 	.word	0xe000e100

08002fdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b083      	sub	sp, #12
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	6039      	str	r1, [r7, #0]
 8002fe6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	db0a      	blt.n	8003006 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	b2da      	uxtb	r2, r3
 8002ff4:	490c      	ldr	r1, [pc, #48]	@ (8003028 <__NVIC_SetPriority+0x4c>)
 8002ff6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffa:	0112      	lsls	r2, r2, #4
 8002ffc:	b2d2      	uxtb	r2, r2
 8002ffe:	440b      	add	r3, r1
 8003000:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003004:	e00a      	b.n	800301c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	b2da      	uxtb	r2, r3
 800300a:	4908      	ldr	r1, [pc, #32]	@ (800302c <__NVIC_SetPriority+0x50>)
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	f003 030f 	and.w	r3, r3, #15
 8003012:	3b04      	subs	r3, #4
 8003014:	0112      	lsls	r2, r2, #4
 8003016:	b2d2      	uxtb	r2, r2
 8003018:	440b      	add	r3, r1
 800301a:	761a      	strb	r2, [r3, #24]
}
 800301c:	bf00      	nop
 800301e:	370c      	adds	r7, #12
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr
 8003028:	e000e100 	.word	0xe000e100
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	@ 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	f1c3 0307 	rsb	r3, r3, #7
 800304a:	2b04      	cmp	r3, #4
 800304c:	bf28      	it	cs
 800304e:	2304      	movcs	r3, #4
 8003050:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	3304      	adds	r3, #4
 8003056:	2b06      	cmp	r3, #6
 8003058:	d902      	bls.n	8003060 <NVIC_EncodePriority+0x30>
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	3b03      	subs	r3, #3
 800305e:	e000      	b.n	8003062 <NVIC_EncodePriority+0x32>
 8003060:	2300      	movs	r3, #0
 8003062:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003064:	f04f 32ff 	mov.w	r2, #4294967295
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	fa02 f303 	lsl.w	r3, r2, r3
 800306e:	43da      	mvns	r2, r3
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	401a      	ands	r2, r3
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003078:	f04f 31ff 	mov.w	r1, #4294967295
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	fa01 f303 	lsl.w	r3, r1, r3
 8003082:	43d9      	mvns	r1, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003088:	4313      	orrs	r3, r2
         );
}
 800308a:	4618      	mov	r0, r3
 800308c:	3724      	adds	r7, #36	@ 0x24
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
	...

08003098 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b082      	sub	sp, #8
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	3b01      	subs	r3, #1
 80030a4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030a8:	d301      	bcc.n	80030ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030aa:	2301      	movs	r3, #1
 80030ac:	e00f      	b.n	80030ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80030ae:	4a0a      	ldr	r2, [pc, #40]	@ (80030d8 <SysTick_Config+0x40>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030b6:	210f      	movs	r1, #15
 80030b8:	f04f 30ff 	mov.w	r0, #4294967295
 80030bc:	f7ff ff8e 	bl	8002fdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030c0:	4b05      	ldr	r3, [pc, #20]	@ (80030d8 <SysTick_Config+0x40>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030c6:	4b04      	ldr	r3, [pc, #16]	@ (80030d8 <SysTick_Config+0x40>)
 80030c8:	2207      	movs	r2, #7
 80030ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	e000e010 	.word	0xe000e010

080030dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b082      	sub	sp, #8
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f7ff ff29 	bl	8002f3c <__NVIC_SetPriorityGrouping>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b086      	sub	sp, #24
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	4603      	mov	r3, r0
 80030fa:	60b9      	str	r1, [r7, #8]
 80030fc:	607a      	str	r2, [r7, #4]
 80030fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003100:	2300      	movs	r3, #0
 8003102:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003104:	f7ff ff3e 	bl	8002f84 <__NVIC_GetPriorityGrouping>
 8003108:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	68b9      	ldr	r1, [r7, #8]
 800310e:	6978      	ldr	r0, [r7, #20]
 8003110:	f7ff ff8e 	bl	8003030 <NVIC_EncodePriority>
 8003114:	4602      	mov	r2, r0
 8003116:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800311a:	4611      	mov	r1, r2
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff ff5d 	bl	8002fdc <__NVIC_SetPriority>
}
 8003122:	bf00      	nop
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800312a:	b580      	push	{r7, lr}
 800312c:	b082      	sub	sp, #8
 800312e:	af00      	add	r7, sp, #0
 8003130:	4603      	mov	r3, r0
 8003132:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff ff31 	bl	8002fa0 <__NVIC_EnableIRQ>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003146:	b580      	push	{r7, lr}
 8003148:	b082      	sub	sp, #8
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800314e:	6878      	ldr	r0, [r7, #4]
 8003150:	f7ff ffa2 	bl	8003098 <SysTick_Config>
 8003154:	4603      	mov	r3, r0
}
 8003156:	4618      	mov	r0, r3
 8003158:	3708      	adds	r7, #8
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}

0800315e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800315e:	b580      	push	{r7, lr}
 8003160:	b084      	sub	sp, #16
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800316a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800316c:	f7ff feda 	bl	8002f24 <HAL_GetTick>
 8003170:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003178:	b2db      	uxtb	r3, r3
 800317a:	2b02      	cmp	r3, #2
 800317c:	d008      	beq.n	8003190 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2280      	movs	r2, #128	@ 0x80
 8003182:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2200      	movs	r2, #0
 8003188:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e052      	b.n	8003236 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f022 0216 	bic.w	r2, r2, #22
 800319e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031ae:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d103      	bne.n	80031c0 <HAL_DMA_Abort+0x62>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d007      	beq.n	80031d0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681a      	ldr	r2, [r3, #0]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f022 0208 	bic.w	r2, r2, #8
 80031ce:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 0201 	bic.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031e0:	e013      	b.n	800320a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80031e2:	f7ff fe9f 	bl	8002f24 <HAL_GetTick>
 80031e6:	4602      	mov	r2, r0
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	2b05      	cmp	r3, #5
 80031ee:	d90c      	bls.n	800320a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2220      	movs	r2, #32
 80031f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2203      	movs	r2, #3
 80031fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	2200      	movs	r2, #0
 8003202:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e015      	b.n	8003236 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0301 	and.w	r3, r3, #1
 8003214:	2b00      	cmp	r3, #0
 8003216:	d1e4      	bne.n	80031e2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800321c:	223f      	movs	r2, #63	@ 0x3f
 800321e:	409a      	lsls	r2, r3
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2200      	movs	r2, #0
 8003230:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d004      	beq.n	800325c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2280      	movs	r2, #128	@ 0x80
 8003256:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003258:	2301      	movs	r3, #1
 800325a:	e00c      	b.n	8003276 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2205      	movs	r2, #5
 8003260:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f022 0201 	bic.w	r2, r2, #1
 8003272:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	370c      	adds	r7, #12
 800327a:	46bd      	mov	sp, r7
 800327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003280:	4770      	bx	lr
	...

08003284 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003284:	b480      	push	{r7}
 8003286:	b089      	sub	sp, #36	@ 0x24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
 800328c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800328e:	2300      	movs	r3, #0
 8003290:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003292:	2300      	movs	r3, #0
 8003294:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003296:	2300      	movs	r3, #0
 8003298:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800329a:	2300      	movs	r3, #0
 800329c:	61fb      	str	r3, [r7, #28]
 800329e:	e16b      	b.n	8003578 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032a0:	2201      	movs	r2, #1
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	4013      	ands	r3, r2
 80032b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	f040 815a 	bne.w	8003572 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	f003 0303 	and.w	r3, r3, #3
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d005      	beq.n	80032d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d130      	bne.n	8003338 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	005b      	lsls	r3, r3, #1
 80032e0:	2203      	movs	r2, #3
 80032e2:	fa02 f303 	lsl.w	r3, r2, r3
 80032e6:	43db      	mvns	r3, r3
 80032e8:	69ba      	ldr	r2, [r7, #24]
 80032ea:	4013      	ands	r3, r2
 80032ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	68da      	ldr	r2, [r3, #12]
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	005b      	lsls	r3, r3, #1
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	69ba      	ldr	r2, [r7, #24]
 80032fc:	4313      	orrs	r3, r2
 80032fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800330c:	2201      	movs	r2, #1
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	fa02 f303 	lsl.w	r3, r2, r3
 8003314:	43db      	mvns	r3, r3
 8003316:	69ba      	ldr	r2, [r7, #24]
 8003318:	4013      	ands	r3, r2
 800331a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 0201 	and.w	r2, r3, #1
 8003326:	69fb      	ldr	r3, [r7, #28]
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	4313      	orrs	r3, r2
 8003330:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	69ba      	ldr	r2, [r7, #24]
 8003336:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	2b03      	cmp	r3, #3
 8003342:	d017      	beq.n	8003374 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	2203      	movs	r2, #3
 8003350:	fa02 f303 	lsl.w	r3, r2, r3
 8003354:	43db      	mvns	r3, r3
 8003356:	69ba      	ldr	r2, [r7, #24]
 8003358:	4013      	ands	r3, r2
 800335a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	005b      	lsls	r3, r3, #1
 8003364:	fa02 f303 	lsl.w	r3, r2, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4313      	orrs	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	f003 0303 	and.w	r3, r3, #3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d123      	bne.n	80033c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	08da      	lsrs	r2, r3, #3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3208      	adds	r2, #8
 8003388:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	009b      	lsls	r3, r3, #2
 8003396:	220f      	movs	r2, #15
 8003398:	fa02 f303 	lsl.w	r3, r2, r3
 800339c:	43db      	mvns	r3, r3
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	4013      	ands	r3, r2
 80033a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	691a      	ldr	r2, [r3, #16]
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	4313      	orrs	r3, r2
 80033b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	08da      	lsrs	r2, r3, #3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3208      	adds	r2, #8
 80033c2:	69b9      	ldr	r1, [r7, #24]
 80033c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	2203      	movs	r2, #3
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	43db      	mvns	r3, r3
 80033da:	69ba      	ldr	r2, [r7, #24]
 80033dc:	4013      	ands	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685b      	ldr	r3, [r3, #4]
 80033e4:	f003 0203 	and.w	r2, r3, #3
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	005b      	lsls	r3, r3, #1
 80033ec:	fa02 f303 	lsl.w	r3, r2, r3
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	4313      	orrs	r3, r2
 80033f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	69ba      	ldr	r2, [r7, #24]
 80033fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003404:	2b00      	cmp	r3, #0
 8003406:	f000 80b4 	beq.w	8003572 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	4b60      	ldr	r3, [pc, #384]	@ (8003590 <HAL_GPIO_Init+0x30c>)
 8003410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003412:	4a5f      	ldr	r2, [pc, #380]	@ (8003590 <HAL_GPIO_Init+0x30c>)
 8003414:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003418:	6453      	str	r3, [r2, #68]	@ 0x44
 800341a:	4b5d      	ldr	r3, [pc, #372]	@ (8003590 <HAL_GPIO_Init+0x30c>)
 800341c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800341e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003426:	4a5b      	ldr	r2, [pc, #364]	@ (8003594 <HAL_GPIO_Init+0x310>)
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	089b      	lsrs	r3, r3, #2
 800342c:	3302      	adds	r3, #2
 800342e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003432:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	220f      	movs	r2, #15
 800343e:	fa02 f303 	lsl.w	r3, r2, r3
 8003442:	43db      	mvns	r3, r3
 8003444:	69ba      	ldr	r2, [r7, #24]
 8003446:	4013      	ands	r3, r2
 8003448:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a52      	ldr	r2, [pc, #328]	@ (8003598 <HAL_GPIO_Init+0x314>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d02b      	beq.n	80034aa <HAL_GPIO_Init+0x226>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a51      	ldr	r2, [pc, #324]	@ (800359c <HAL_GPIO_Init+0x318>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d025      	beq.n	80034a6 <HAL_GPIO_Init+0x222>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a50      	ldr	r2, [pc, #320]	@ (80035a0 <HAL_GPIO_Init+0x31c>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d01f      	beq.n	80034a2 <HAL_GPIO_Init+0x21e>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	4a4f      	ldr	r2, [pc, #316]	@ (80035a4 <HAL_GPIO_Init+0x320>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d019      	beq.n	800349e <HAL_GPIO_Init+0x21a>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	4a4e      	ldr	r2, [pc, #312]	@ (80035a8 <HAL_GPIO_Init+0x324>)
 800346e:	4293      	cmp	r3, r2
 8003470:	d013      	beq.n	800349a <HAL_GPIO_Init+0x216>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a4d      	ldr	r2, [pc, #308]	@ (80035ac <HAL_GPIO_Init+0x328>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d00d      	beq.n	8003496 <HAL_GPIO_Init+0x212>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	4a4c      	ldr	r2, [pc, #304]	@ (80035b0 <HAL_GPIO_Init+0x32c>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d007      	beq.n	8003492 <HAL_GPIO_Init+0x20e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	4a4b      	ldr	r2, [pc, #300]	@ (80035b4 <HAL_GPIO_Init+0x330>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d101      	bne.n	800348e <HAL_GPIO_Init+0x20a>
 800348a:	2307      	movs	r3, #7
 800348c:	e00e      	b.n	80034ac <HAL_GPIO_Init+0x228>
 800348e:	2308      	movs	r3, #8
 8003490:	e00c      	b.n	80034ac <HAL_GPIO_Init+0x228>
 8003492:	2306      	movs	r3, #6
 8003494:	e00a      	b.n	80034ac <HAL_GPIO_Init+0x228>
 8003496:	2305      	movs	r3, #5
 8003498:	e008      	b.n	80034ac <HAL_GPIO_Init+0x228>
 800349a:	2304      	movs	r3, #4
 800349c:	e006      	b.n	80034ac <HAL_GPIO_Init+0x228>
 800349e:	2303      	movs	r3, #3
 80034a0:	e004      	b.n	80034ac <HAL_GPIO_Init+0x228>
 80034a2:	2302      	movs	r3, #2
 80034a4:	e002      	b.n	80034ac <HAL_GPIO_Init+0x228>
 80034a6:	2301      	movs	r3, #1
 80034a8:	e000      	b.n	80034ac <HAL_GPIO_Init+0x228>
 80034aa:	2300      	movs	r3, #0
 80034ac:	69fa      	ldr	r2, [r7, #28]
 80034ae:	f002 0203 	and.w	r2, r2, #3
 80034b2:	0092      	lsls	r2, r2, #2
 80034b4:	4093      	lsls	r3, r2
 80034b6:	69ba      	ldr	r2, [r7, #24]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034bc:	4935      	ldr	r1, [pc, #212]	@ (8003594 <HAL_GPIO_Init+0x310>)
 80034be:	69fb      	ldr	r3, [r7, #28]
 80034c0:	089b      	lsrs	r3, r3, #2
 80034c2:	3302      	adds	r3, #2
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ca:	4b3b      	ldr	r3, [pc, #236]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 80034cc:	689b      	ldr	r3, [r3, #8]
 80034ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	43db      	mvns	r3, r3
 80034d4:	69ba      	ldr	r2, [r7, #24]
 80034d6:	4013      	ands	r3, r2
 80034d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80034e6:	69ba      	ldr	r2, [r7, #24]
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ee:	4a32      	ldr	r2, [pc, #200]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 80034f0:	69bb      	ldr	r3, [r7, #24]
 80034f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034f4:	4b30      	ldr	r3, [pc, #192]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4013      	ands	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d003      	beq.n	8003518 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003510:	69ba      	ldr	r2, [r7, #24]
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003518:	4a27      	ldr	r2, [pc, #156]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 800351a:	69bb      	ldr	r3, [r7, #24]
 800351c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800351e:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	43db      	mvns	r3, r3
 8003528:	69ba      	ldr	r2, [r7, #24]
 800352a:	4013      	ands	r3, r2
 800352c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800353a:	69ba      	ldr	r2, [r7, #24]
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003542:	4a1d      	ldr	r2, [pc, #116]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003548:	4b1b      	ldr	r3, [pc, #108]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800354e:	693b      	ldr	r3, [r7, #16]
 8003550:	43db      	mvns	r3, r3
 8003552:	69ba      	ldr	r2, [r7, #24]
 8003554:	4013      	ands	r3, r2
 8003556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003560:	2b00      	cmp	r3, #0
 8003562:	d003      	beq.n	800356c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	4313      	orrs	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800356c:	4a12      	ldr	r2, [pc, #72]	@ (80035b8 <HAL_GPIO_Init+0x334>)
 800356e:	69bb      	ldr	r3, [r7, #24]
 8003570:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3301      	adds	r3, #1
 8003576:	61fb      	str	r3, [r7, #28]
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	2b0f      	cmp	r3, #15
 800357c:	f67f ae90 	bls.w	80032a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003580:	bf00      	nop
 8003582:	bf00      	nop
 8003584:	3724      	adds	r7, #36	@ 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	40023800 	.word	0x40023800
 8003594:	40013800 	.word	0x40013800
 8003598:	40020000 	.word	0x40020000
 800359c:	40020400 	.word	0x40020400
 80035a0:	40020800 	.word	0x40020800
 80035a4:	40020c00 	.word	0x40020c00
 80035a8:	40021000 	.word	0x40021000
 80035ac:	40021400 	.word	0x40021400
 80035b0:	40021800 	.word	0x40021800
 80035b4:	40021c00 	.word	0x40021c00
 80035b8:	40013c00 	.word	0x40013c00

080035bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b086      	sub	sp, #24
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e267      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0301 	and.w	r3, r3, #1
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d075      	beq.n	80036c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035da:	4b88      	ldr	r3, [pc, #544]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 030c 	and.w	r3, r3, #12
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d00c      	beq.n	8003600 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035e6:	4b85      	ldr	r3, [pc, #532]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ee:	2b08      	cmp	r3, #8
 80035f0:	d112      	bne.n	8003618 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035f2:	4b82      	ldr	r3, [pc, #520]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035fe:	d10b      	bne.n	8003618 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003600:	4b7e      	ldr	r3, [pc, #504]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003608:	2b00      	cmp	r3, #0
 800360a:	d05b      	beq.n	80036c4 <HAL_RCC_OscConfig+0x108>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d157      	bne.n	80036c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003614:	2301      	movs	r3, #1
 8003616:	e242      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003620:	d106      	bne.n	8003630 <HAL_RCC_OscConfig+0x74>
 8003622:	4b76      	ldr	r3, [pc, #472]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a75      	ldr	r2, [pc, #468]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362c:	6013      	str	r3, [r2, #0]
 800362e:	e01d      	b.n	800366c <HAL_RCC_OscConfig+0xb0>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003638:	d10c      	bne.n	8003654 <HAL_RCC_OscConfig+0x98>
 800363a:	4b70      	ldr	r3, [pc, #448]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4a6f      	ldr	r2, [pc, #444]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003640:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003644:	6013      	str	r3, [r2, #0]
 8003646:	4b6d      	ldr	r3, [pc, #436]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a6c      	ldr	r2, [pc, #432]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e00b      	b.n	800366c <HAL_RCC_OscConfig+0xb0>
 8003654:	4b69      	ldr	r3, [pc, #420]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a68      	ldr	r2, [pc, #416]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800365a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800365e:	6013      	str	r3, [r2, #0]
 8003660:	4b66      	ldr	r3, [pc, #408]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a65      	ldr	r2, [pc, #404]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003666:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800366a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d013      	beq.n	800369c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003674:	f7ff fc56 	bl	8002f24 <HAL_GetTick>
 8003678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800367a:	e008      	b.n	800368e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800367c:	f7ff fc52 	bl	8002f24 <HAL_GetTick>
 8003680:	4602      	mov	r2, r0
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	1ad3      	subs	r3, r2, r3
 8003686:	2b64      	cmp	r3, #100	@ 0x64
 8003688:	d901      	bls.n	800368e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800368a:	2303      	movs	r3, #3
 800368c:	e207      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	4b5b      	ldr	r3, [pc, #364]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d0f0      	beq.n	800367c <HAL_RCC_OscConfig+0xc0>
 800369a:	e014      	b.n	80036c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800369c:	f7ff fc42 	bl	8002f24 <HAL_GetTick>
 80036a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a4:	f7ff fc3e 	bl	8002f24 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	693b      	ldr	r3, [r7, #16]
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b64      	cmp	r3, #100	@ 0x64
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1f3      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	4b51      	ldr	r3, [pc, #324]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0xe8>
 80036c2:	e000      	b.n	80036c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0302 	and.w	r3, r3, #2
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d063      	beq.n	800379a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036d2:	4b4a      	ldr	r3, [pc, #296]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036d4:	689b      	ldr	r3, [r3, #8]
 80036d6:	f003 030c 	and.w	r3, r3, #12
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d00b      	beq.n	80036f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036de:	4b47      	ldr	r3, [pc, #284]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036e0:	689b      	ldr	r3, [r3, #8]
 80036e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036e6:	2b08      	cmp	r3, #8
 80036e8:	d11c      	bne.n	8003724 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ea:	4b44      	ldr	r3, [pc, #272]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d116      	bne.n	8003724 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036f6:	4b41      	ldr	r3, [pc, #260]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d005      	beq.n	800370e <HAL_RCC_OscConfig+0x152>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	68db      	ldr	r3, [r3, #12]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d001      	beq.n	800370e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e1c7      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800370e:	4b3b      	ldr	r3, [pc, #236]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	691b      	ldr	r3, [r3, #16]
 800371a:	00db      	lsls	r3, r3, #3
 800371c:	4937      	ldr	r1, [pc, #220]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800371e:	4313      	orrs	r3, r2
 8003720:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003722:	e03a      	b.n	800379a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d020      	beq.n	800376e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800372c:	4b34      	ldr	r3, [pc, #208]	@ (8003800 <HAL_RCC_OscConfig+0x244>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003732:	f7ff fbf7 	bl	8002f24 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800373a:	f7ff fbf3 	bl	8002f24 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e1a8      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	4b2b      	ldr	r3, [pc, #172]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003758:	4b28      	ldr	r3, [pc, #160]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4925      	ldr	r1, [pc, #148]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003768:	4313      	orrs	r3, r2
 800376a:	600b      	str	r3, [r1, #0]
 800376c:	e015      	b.n	800379a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800376e:	4b24      	ldr	r3, [pc, #144]	@ (8003800 <HAL_RCC_OscConfig+0x244>)
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003774:	f7ff fbd6 	bl	8002f24 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800377c:	f7ff fbd2 	bl	8002f24 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e187      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 0302 	and.w	r3, r3, #2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1f0      	bne.n	800377c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 0308 	and.w	r3, r3, #8
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d036      	beq.n	8003814 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	695b      	ldr	r3, [r3, #20]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d016      	beq.n	80037dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037ae:	4b15      	ldr	r3, [pc, #84]	@ (8003804 <HAL_RCC_OscConfig+0x248>)
 80037b0:	2201      	movs	r2, #1
 80037b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037b4:	f7ff fbb6 	bl	8002f24 <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037bc:	f7ff fbb2 	bl	8002f24 <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e167      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	4b0b      	ldr	r3, [pc, #44]	@ (80037fc <HAL_RCC_OscConfig+0x240>)
 80037d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037d2:	f003 0302 	and.w	r3, r3, #2
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d0f0      	beq.n	80037bc <HAL_RCC_OscConfig+0x200>
 80037da:	e01b      	b.n	8003814 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037dc:	4b09      	ldr	r3, [pc, #36]	@ (8003804 <HAL_RCC_OscConfig+0x248>)
 80037de:	2200      	movs	r2, #0
 80037e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037e2:	f7ff fb9f 	bl	8002f24 <HAL_GetTick>
 80037e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037e8:	e00e      	b.n	8003808 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ea:	f7ff fb9b 	bl	8002f24 <HAL_GetTick>
 80037ee:	4602      	mov	r2, r0
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	2b02      	cmp	r3, #2
 80037f6:	d907      	bls.n	8003808 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e150      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
 80037fc:	40023800 	.word	0x40023800
 8003800:	42470000 	.word	0x42470000
 8003804:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003808:	4b88      	ldr	r3, [pc, #544]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800380a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800380c:	f003 0302 	and.w	r3, r3, #2
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1ea      	bne.n	80037ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	f000 8097 	beq.w	8003950 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003822:	2300      	movs	r3, #0
 8003824:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003826:	4b81      	ldr	r3, [pc, #516]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d10f      	bne.n	8003852 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	4b7d      	ldr	r3, [pc, #500]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800383a:	4a7c      	ldr	r2, [pc, #496]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800383c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003840:	6413      	str	r3, [r2, #64]	@ 0x40
 8003842:	4b7a      	ldr	r3, [pc, #488]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800384e:	2301      	movs	r3, #1
 8003850:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003852:	4b77      	ldr	r3, [pc, #476]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385a:	2b00      	cmp	r3, #0
 800385c:	d118      	bne.n	8003890 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800385e:	4b74      	ldr	r3, [pc, #464]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a73      	ldr	r2, [pc, #460]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003864:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003868:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800386a:	f7ff fb5b 	bl	8002f24 <HAL_GetTick>
 800386e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	e008      	b.n	8003884 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003872:	f7ff fb57 	bl	8002f24 <HAL_GetTick>
 8003876:	4602      	mov	r2, r0
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	1ad3      	subs	r3, r2, r3
 800387c:	2b02      	cmp	r3, #2
 800387e:	d901      	bls.n	8003884 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003880:	2303      	movs	r3, #3
 8003882:	e10c      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	4b6a      	ldr	r3, [pc, #424]	@ (8003a30 <HAL_RCC_OscConfig+0x474>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0f0      	beq.n	8003872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d106      	bne.n	80038a6 <HAL_RCC_OscConfig+0x2ea>
 8003898:	4b64      	ldr	r3, [pc, #400]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800389a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800389c:	4a63      	ldr	r2, [pc, #396]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800389e:	f043 0301 	orr.w	r3, r3, #1
 80038a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038a4:	e01c      	b.n	80038e0 <HAL_RCC_OscConfig+0x324>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b05      	cmp	r3, #5
 80038ac:	d10c      	bne.n	80038c8 <HAL_RCC_OscConfig+0x30c>
 80038ae:	4b5f      	ldr	r3, [pc, #380]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b2:	4a5e      	ldr	r2, [pc, #376]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038b4:	f043 0304 	orr.w	r3, r3, #4
 80038b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038ba:	4b5c      	ldr	r3, [pc, #368]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038be:	4a5b      	ldr	r2, [pc, #364]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80038c6:	e00b      	b.n	80038e0 <HAL_RCC_OscConfig+0x324>
 80038c8:	4b58      	ldr	r3, [pc, #352]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038cc:	4a57      	ldr	r2, [pc, #348]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038ce:	f023 0301 	bic.w	r3, r3, #1
 80038d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80038d4:	4b55      	ldr	r3, [pc, #340]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038d8:	4a54      	ldr	r2, [pc, #336]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80038da:	f023 0304 	bic.w	r3, r3, #4
 80038de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d015      	beq.n	8003914 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e8:	f7ff fb1c 	bl	8002f24 <HAL_GetTick>
 80038ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038f0:	f7ff fb18 	bl	8002f24 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	693b      	ldr	r3, [r7, #16]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e0cb      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003906:	4b49      	ldr	r3, [pc, #292]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003908:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b00      	cmp	r3, #0
 8003910:	d0ee      	beq.n	80038f0 <HAL_RCC_OscConfig+0x334>
 8003912:	e014      	b.n	800393e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003914:	f7ff fb06 	bl	8002f24 <HAL_GetTick>
 8003918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800391a:	e00a      	b.n	8003932 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800391c:	f7ff fb02 	bl	8002f24 <HAL_GetTick>
 8003920:	4602      	mov	r2, r0
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	1ad3      	subs	r3, r2, r3
 8003926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800392a:	4293      	cmp	r3, r2
 800392c:	d901      	bls.n	8003932 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800392e:	2303      	movs	r3, #3
 8003930:	e0b5      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003932:	4b3e      	ldr	r3, [pc, #248]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003934:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003936:	f003 0302 	and.w	r3, r3, #2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d1ee      	bne.n	800391c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800393e:	7dfb      	ldrb	r3, [r7, #23]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d105      	bne.n	8003950 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003944:	4b39      	ldr	r3, [pc, #228]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003946:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003948:	4a38      	ldr	r2, [pc, #224]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800394a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800394e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80a1 	beq.w	8003a9c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800395a:	4b34      	ldr	r3, [pc, #208]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 030c 	and.w	r3, r3, #12
 8003962:	2b08      	cmp	r3, #8
 8003964:	d05c      	beq.n	8003a20 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	699b      	ldr	r3, [r3, #24]
 800396a:	2b02      	cmp	r3, #2
 800396c:	d141      	bne.n	80039f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800396e:	4b31      	ldr	r3, [pc, #196]	@ (8003a34 <HAL_RCC_OscConfig+0x478>)
 8003970:	2200      	movs	r2, #0
 8003972:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003974:	f7ff fad6 	bl	8002f24 <HAL_GetTick>
 8003978:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800397a:	e008      	b.n	800398e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800397c:	f7ff fad2 	bl	8002f24 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	1ad3      	subs	r3, r2, r3
 8003986:	2b02      	cmp	r3, #2
 8003988:	d901      	bls.n	800398e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800398a:	2303      	movs	r3, #3
 800398c:	e087      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	4b27      	ldr	r3, [pc, #156]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1f0      	bne.n	800397c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	69da      	ldr	r2, [r3, #28]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	431a      	orrs	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039a8:	019b      	lsls	r3, r3, #6
 80039aa:	431a      	orrs	r2, r3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	3b01      	subs	r3, #1
 80039b4:	041b      	lsls	r3, r3, #16
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039bc:	061b      	lsls	r3, r3, #24
 80039be:	491b      	ldr	r1, [pc, #108]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003a34 <HAL_RCC_OscConfig+0x478>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ca:	f7ff faab 	bl	8002f24 <HAL_GetTick>
 80039ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039d0:	e008      	b.n	80039e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039d2:	f7ff faa7 	bl	8002f24 <HAL_GetTick>
 80039d6:	4602      	mov	r2, r0
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	1ad3      	subs	r3, r2, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d901      	bls.n	80039e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039e0:	2303      	movs	r3, #3
 80039e2:	e05c      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e4:	4b11      	ldr	r3, [pc, #68]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d0f0      	beq.n	80039d2 <HAL_RCC_OscConfig+0x416>
 80039f0:	e054      	b.n	8003a9c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039f2:	4b10      	ldr	r3, [pc, #64]	@ (8003a34 <HAL_RCC_OscConfig+0x478>)
 80039f4:	2200      	movs	r2, #0
 80039f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039f8:	f7ff fa94 	bl	8002f24 <HAL_GetTick>
 80039fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039fe:	e008      	b.n	8003a12 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a00:	f7ff fa90 	bl	8002f24 <HAL_GetTick>
 8003a04:	4602      	mov	r2, r0
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	1ad3      	subs	r3, r2, r3
 8003a0a:	2b02      	cmp	r3, #2
 8003a0c:	d901      	bls.n	8003a12 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a0e:	2303      	movs	r3, #3
 8003a10:	e045      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_RCC_OscConfig+0x470>)
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d1f0      	bne.n	8003a00 <HAL_RCC_OscConfig+0x444>
 8003a1e:	e03d      	b.n	8003a9c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	699b      	ldr	r3, [r3, #24]
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d107      	bne.n	8003a38 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e038      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
 8003a2c:	40023800 	.word	0x40023800
 8003a30:	40007000 	.word	0x40007000
 8003a34:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a38:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <HAL_RCC_OscConfig+0x4ec>)
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d028      	beq.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d121      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	d11a      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a68:	4013      	ands	r3, r2
 8003a6a:	687a      	ldr	r2, [r7, #4]
 8003a6c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a6e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d111      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a7e:	085b      	lsrs	r3, r3, #1
 8003a80:	3b01      	subs	r3, #1
 8003a82:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d107      	bne.n	8003a98 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a92:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a94:	429a      	cmp	r2, r3
 8003a96:	d001      	beq.n	8003a9c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e000      	b.n	8003a9e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3718      	adds	r7, #24
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023800 	.word	0x40023800

08003aac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d101      	bne.n	8003ac0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e0cc      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ac0:	4b68      	ldr	r3, [pc, #416]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 0307 	and.w	r3, r3, #7
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d90c      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ace:	4b65      	ldr	r3, [pc, #404]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ad6:	4b63      	ldr	r3, [pc, #396]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f003 0307 	and.w	r3, r3, #7
 8003ade:	683a      	ldr	r2, [r7, #0]
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d001      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	e0b8      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0302 	and.w	r3, r3, #2
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d020      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d005      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b00:	4b59      	ldr	r3, [pc, #356]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	4a58      	ldr	r2, [pc, #352]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003b0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0308 	and.w	r3, r3, #8
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b18:	4b53      	ldr	r3, [pc, #332]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	689b      	ldr	r3, [r3, #8]
 8003b1c:	4a52      	ldr	r2, [pc, #328]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b1e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b24:	4b50      	ldr	r3, [pc, #320]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	494d      	ldr	r1, [pc, #308]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 0301 	and.w	r3, r3, #1
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d044      	beq.n	8003bcc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d107      	bne.n	8003b5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4b47      	ldr	r3, [pc, #284]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d119      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b56:	2301      	movs	r3, #1
 8003b58:	e07f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	685b      	ldr	r3, [r3, #4]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d107      	bne.n	8003b7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b6a:	4b3f      	ldr	r3, [pc, #252]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d109      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e06f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b7a:	4b3b      	ldr	r3, [pc, #236]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0302 	and.w	r3, r3, #2
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d101      	bne.n	8003b8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b86:	2301      	movs	r3, #1
 8003b88:	e067      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b8a:	4b37      	ldr	r3, [pc, #220]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f023 0203 	bic.w	r2, r3, #3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	4934      	ldr	r1, [pc, #208]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b9c:	f7ff f9c2 	bl	8002f24 <HAL_GetTick>
 8003ba0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ba2:	e00a      	b.n	8003bba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ba4:	f7ff f9be 	bl	8002f24 <HAL_GetTick>
 8003ba8:	4602      	mov	r2, r0
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	1ad3      	subs	r3, r2, r3
 8003bae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e04f      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bba:	4b2b      	ldr	r3, [pc, #172]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 020c 	and.w	r2, r3, #12
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d1eb      	bne.n	8003ba4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bcc:	4b25      	ldr	r3, [pc, #148]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	683a      	ldr	r2, [r7, #0]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d20c      	bcs.n	8003bf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bda:	4b22      	ldr	r3, [pc, #136]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003bdc:	683a      	ldr	r2, [r7, #0]
 8003bde:	b2d2      	uxtb	r2, r2
 8003be0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be2:	4b20      	ldr	r3, [pc, #128]	@ (8003c64 <HAL_RCC_ClockConfig+0x1b8>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	683a      	ldr	r2, [r7, #0]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d001      	beq.n	8003bf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e032      	b.n	8003c5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f003 0304 	and.w	r3, r3, #4
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d008      	beq.n	8003c12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c00:	4b19      	ldr	r3, [pc, #100]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4916      	ldr	r1, [pc, #88]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c0e:	4313      	orrs	r3, r2
 8003c10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0308 	and.w	r3, r3, #8
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d009      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c1e:	4b12      	ldr	r3, [pc, #72]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	490e      	ldr	r1, [pc, #56]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c32:	f000 f821 	bl	8003c78 <HAL_RCC_GetSysClockFreq>
 8003c36:	4602      	mov	r2, r0
 8003c38:	4b0b      	ldr	r3, [pc, #44]	@ (8003c68 <HAL_RCC_ClockConfig+0x1bc>)
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	091b      	lsrs	r3, r3, #4
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	490a      	ldr	r1, [pc, #40]	@ (8003c6c <HAL_RCC_ClockConfig+0x1c0>)
 8003c44:	5ccb      	ldrb	r3, [r1, r3]
 8003c46:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4a:	4a09      	ldr	r2, [pc, #36]	@ (8003c70 <HAL_RCC_ClockConfig+0x1c4>)
 8003c4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c4e:	4b09      	ldr	r3, [pc, #36]	@ (8003c74 <HAL_RCC_ClockConfig+0x1c8>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4618      	mov	r0, r3
 8003c54:	f7ff f922 	bl	8002e9c <HAL_InitTick>

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	40023c00 	.word	0x40023c00
 8003c68:	40023800 	.word	0x40023800
 8003c6c:	0800b340 	.word	0x0800b340
 8003c70:	20000024 	.word	0x20000024
 8003c74:	20000028 	.word	0x20000028

08003c78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c7c:	b094      	sub	sp, #80	@ 0x50
 8003c7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c80:	2300      	movs	r3, #0
 8003c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c84:	2300      	movs	r3, #0
 8003c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c88:	2300      	movs	r3, #0
 8003c8a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c90:	4b79      	ldr	r3, [pc, #484]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	f003 030c 	and.w	r3, r3, #12
 8003c98:	2b08      	cmp	r3, #8
 8003c9a:	d00d      	beq.n	8003cb8 <HAL_RCC_GetSysClockFreq+0x40>
 8003c9c:	2b08      	cmp	r3, #8
 8003c9e:	f200 80e1 	bhi.w	8003e64 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <HAL_RCC_GetSysClockFreq+0x34>
 8003ca6:	2b04      	cmp	r3, #4
 8003ca8:	d003      	beq.n	8003cb2 <HAL_RCC_GetSysClockFreq+0x3a>
 8003caa:	e0db      	b.n	8003e64 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cac:	4b73      	ldr	r3, [pc, #460]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003cae:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8003cb0:	e0db      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cb2:	4b73      	ldr	r3, [pc, #460]	@ (8003e80 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cb6:	e0d8      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cb8:	4b6f      	ldr	r3, [pc, #444]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003cc0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cc2:	4b6d      	ldr	r3, [pc, #436]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d063      	beq.n	8003d96 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cce:	4b6a      	ldr	r3, [pc, #424]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cd0:	685b      	ldr	r3, [r3, #4]
 8003cd2:	099b      	lsrs	r3, r3, #6
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cd8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ce0:	633b      	str	r3, [r7, #48]	@ 0x30
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	637b      	str	r3, [r7, #52]	@ 0x34
 8003ce6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cea:	4622      	mov	r2, r4
 8003cec:	462b      	mov	r3, r5
 8003cee:	f04f 0000 	mov.w	r0, #0
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	0159      	lsls	r1, r3, #5
 8003cf8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cfc:	0150      	lsls	r0, r2, #5
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4621      	mov	r1, r4
 8003d04:	1a51      	subs	r1, r2, r1
 8003d06:	6139      	str	r1, [r7, #16]
 8003d08:	4629      	mov	r1, r5
 8003d0a:	eb63 0301 	sbc.w	r3, r3, r1
 8003d0e:	617b      	str	r3, [r7, #20]
 8003d10:	f04f 0200 	mov.w	r2, #0
 8003d14:	f04f 0300 	mov.w	r3, #0
 8003d18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d1c:	4659      	mov	r1, fp
 8003d1e:	018b      	lsls	r3, r1, #6
 8003d20:	4651      	mov	r1, sl
 8003d22:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d26:	4651      	mov	r1, sl
 8003d28:	018a      	lsls	r2, r1, #6
 8003d2a:	4651      	mov	r1, sl
 8003d2c:	ebb2 0801 	subs.w	r8, r2, r1
 8003d30:	4659      	mov	r1, fp
 8003d32:	eb63 0901 	sbc.w	r9, r3, r1
 8003d36:	f04f 0200 	mov.w	r2, #0
 8003d3a:	f04f 0300 	mov.w	r3, #0
 8003d3e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d42:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d46:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d4a:	4690      	mov	r8, r2
 8003d4c:	4699      	mov	r9, r3
 8003d4e:	4623      	mov	r3, r4
 8003d50:	eb18 0303 	adds.w	r3, r8, r3
 8003d54:	60bb      	str	r3, [r7, #8]
 8003d56:	462b      	mov	r3, r5
 8003d58:	eb49 0303 	adc.w	r3, r9, r3
 8003d5c:	60fb      	str	r3, [r7, #12]
 8003d5e:	f04f 0200 	mov.w	r2, #0
 8003d62:	f04f 0300 	mov.w	r3, #0
 8003d66:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d6a:	4629      	mov	r1, r5
 8003d6c:	024b      	lsls	r3, r1, #9
 8003d6e:	4621      	mov	r1, r4
 8003d70:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d74:	4621      	mov	r1, r4
 8003d76:	024a      	lsls	r2, r1, #9
 8003d78:	4610      	mov	r0, r2
 8003d7a:	4619      	mov	r1, r3
 8003d7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d7e:	2200      	movs	r2, #0
 8003d80:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d84:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d88:	f7fc ff7e 	bl	8000c88 <__aeabi_uldivmod>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4613      	mov	r3, r2
 8003d92:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d94:	e058      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d96:	4b38      	ldr	r3, [pc, #224]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	099b      	lsrs	r3, r3, #6
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	4618      	mov	r0, r3
 8003da0:	4611      	mov	r1, r2
 8003da2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003da6:	623b      	str	r3, [r7, #32]
 8003da8:	2300      	movs	r3, #0
 8003daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003db0:	4642      	mov	r2, r8
 8003db2:	464b      	mov	r3, r9
 8003db4:	f04f 0000 	mov.w	r0, #0
 8003db8:	f04f 0100 	mov.w	r1, #0
 8003dbc:	0159      	lsls	r1, r3, #5
 8003dbe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003dc2:	0150      	lsls	r0, r2, #5
 8003dc4:	4602      	mov	r2, r0
 8003dc6:	460b      	mov	r3, r1
 8003dc8:	4641      	mov	r1, r8
 8003dca:	ebb2 0a01 	subs.w	sl, r2, r1
 8003dce:	4649      	mov	r1, r9
 8003dd0:	eb63 0b01 	sbc.w	fp, r3, r1
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003de0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003de4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003de8:	ebb2 040a 	subs.w	r4, r2, sl
 8003dec:	eb63 050b 	sbc.w	r5, r3, fp
 8003df0:	f04f 0200 	mov.w	r2, #0
 8003df4:	f04f 0300 	mov.w	r3, #0
 8003df8:	00eb      	lsls	r3, r5, #3
 8003dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003dfe:	00e2      	lsls	r2, r4, #3
 8003e00:	4614      	mov	r4, r2
 8003e02:	461d      	mov	r5, r3
 8003e04:	4643      	mov	r3, r8
 8003e06:	18e3      	adds	r3, r4, r3
 8003e08:	603b      	str	r3, [r7, #0]
 8003e0a:	464b      	mov	r3, r9
 8003e0c:	eb45 0303 	adc.w	r3, r5, r3
 8003e10:	607b      	str	r3, [r7, #4]
 8003e12:	f04f 0200 	mov.w	r2, #0
 8003e16:	f04f 0300 	mov.w	r3, #0
 8003e1a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e1e:	4629      	mov	r1, r5
 8003e20:	028b      	lsls	r3, r1, #10
 8003e22:	4621      	mov	r1, r4
 8003e24:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e28:	4621      	mov	r1, r4
 8003e2a:	028a      	lsls	r2, r1, #10
 8003e2c:	4610      	mov	r0, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e32:	2200      	movs	r2, #0
 8003e34:	61bb      	str	r3, [r7, #24]
 8003e36:	61fa      	str	r2, [r7, #28]
 8003e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e3c:	f7fc ff24 	bl	8000c88 <__aeabi_uldivmod>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4613      	mov	r3, r2
 8003e46:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e48:	4b0b      	ldr	r3, [pc, #44]	@ (8003e78 <HAL_RCC_GetSysClockFreq+0x200>)
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	0c1b      	lsrs	r3, r3, #16
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	3301      	adds	r3, #1
 8003e54:	005b      	lsls	r3, r3, #1
 8003e56:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8003e58:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e60:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e62:	e002      	b.n	8003e6a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e64:	4b05      	ldr	r3, [pc, #20]	@ (8003e7c <HAL_RCC_GetSysClockFreq+0x204>)
 8003e66:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e68:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3750      	adds	r7, #80	@ 0x50
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e76:	bf00      	nop
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	00f42400 	.word	0x00f42400
 8003e80:	007a1200 	.word	0x007a1200

08003e84 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e88:	4b03      	ldr	r3, [pc, #12]	@ (8003e98 <HAL_RCC_GetHCLKFreq+0x14>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
 8003e96:	bf00      	nop
 8003e98:	20000024 	.word	0x20000024

08003e9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ea0:	f7ff fff0 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ea4:	4602      	mov	r2, r0
 8003ea6:	4b05      	ldr	r3, [pc, #20]	@ (8003ebc <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	0a9b      	lsrs	r3, r3, #10
 8003eac:	f003 0307 	and.w	r3, r3, #7
 8003eb0:	4903      	ldr	r1, [pc, #12]	@ (8003ec0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eb2:	5ccb      	ldrb	r3, [r1, r3]
 8003eb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	40023800 	.word	0x40023800
 8003ec0:	0800b350 	.word	0x0800b350

08003ec4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ec8:	f7ff ffdc 	bl	8003e84 <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	@ (8003ee4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0b5b      	lsrs	r3, r3, #13
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4903      	ldr	r1, [pc, #12]	@ (8003ee8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800b350 	.word	0x0800b350

08003eec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e041      	b.n	8003f82 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fe fe12 	bl	8002b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3304      	adds	r3, #4
 8003f28:	4619      	mov	r1, r3
 8003f2a:	4610      	mov	r0, r2
 8003f2c:	f000 fcc4 	bl	80048b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d001      	beq.n	8003fa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e04e      	b.n	8004042 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2202      	movs	r2, #2
 8003fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68da      	ldr	r2, [r3, #12]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f042 0201 	orr.w	r2, r2, #1
 8003fba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a23      	ldr	r2, [pc, #140]	@ (8004050 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d022      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x80>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fce:	d01d      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x80>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1f      	ldr	r2, [pc, #124]	@ (8004054 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d018      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x80>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a1e      	ldr	r2, [pc, #120]	@ (8004058 <HAL_TIM_Base_Start_IT+0xcc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d013      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x80>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1c      	ldr	r2, [pc, #112]	@ (800405c <HAL_TIM_Base_Start_IT+0xd0>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00e      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x80>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1b      	ldr	r2, [pc, #108]	@ (8004060 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d009      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x80>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a19      	ldr	r2, [pc, #100]	@ (8004064 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_TIM_Base_Start_IT+0x80>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a18      	ldr	r2, [pc, #96]	@ (8004068 <HAL_TIM_Base_Start_IT+0xdc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d111      	bne.n	8004030 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b06      	cmp	r3, #6
 800401c:	d010      	beq.n	8004040 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402e:	e007      	b.n	8004040 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800
 800405c:	40000c00 	.word	0x40000c00
 8004060:	40010400 	.word	0x40010400
 8004064:	40014000 	.word	0x40014000
 8004068:	40001800 	.word	0x40001800

0800406c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e041      	b.n	8004102 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004084:	b2db      	uxtb	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f7fe fd14 	bl	8002ac0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2202      	movs	r2, #2
 800409c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	3304      	adds	r3, #4
 80040a8:	4619      	mov	r1, r3
 80040aa:	4610      	mov	r0, r2
 80040ac:	f000 fc04 	bl	80048b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004100:	2300      	movs	r3, #0
}
 8004102:	4618      	mov	r0, r3
 8004104:	3708      	adds	r7, #8
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
	...

0800410c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d109      	bne.n	8004130 <HAL_TIM_PWM_Start+0x24>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004122:	b2db      	uxtb	r3, r3
 8004124:	2b01      	cmp	r3, #1
 8004126:	bf14      	ite	ne
 8004128:	2301      	movne	r3, #1
 800412a:	2300      	moveq	r3, #0
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e022      	b.n	8004176 <HAL_TIM_PWM_Start+0x6a>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b04      	cmp	r3, #4
 8004134:	d109      	bne.n	800414a <HAL_TIM_PWM_Start+0x3e>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800413c:	b2db      	uxtb	r3, r3
 800413e:	2b01      	cmp	r3, #1
 8004140:	bf14      	ite	ne
 8004142:	2301      	movne	r3, #1
 8004144:	2300      	moveq	r3, #0
 8004146:	b2db      	uxtb	r3, r3
 8004148:	e015      	b.n	8004176 <HAL_TIM_PWM_Start+0x6a>
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d109      	bne.n	8004164 <HAL_TIM_PWM_Start+0x58>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	bf14      	ite	ne
 800415c:	2301      	movne	r3, #1
 800415e:	2300      	moveq	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	e008      	b.n	8004176 <HAL_TIM_PWM_Start+0x6a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800416a:	b2db      	uxtb	r3, r3
 800416c:	2b01      	cmp	r3, #1
 800416e:	bf14      	ite	ne
 8004170:	2301      	movne	r3, #1
 8004172:	2300      	moveq	r3, #0
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d001      	beq.n	800417e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e07c      	b.n	8004278 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d104      	bne.n	800418e <HAL_TIM_PWM_Start+0x82>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800418c:	e013      	b.n	80041b6 <HAL_TIM_PWM_Start+0xaa>
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	2b04      	cmp	r3, #4
 8004192:	d104      	bne.n	800419e <HAL_TIM_PWM_Start+0x92>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2202      	movs	r2, #2
 8004198:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800419c:	e00b      	b.n	80041b6 <HAL_TIM_PWM_Start+0xaa>
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d104      	bne.n	80041ae <HAL_TIM_PWM_Start+0xa2>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2202      	movs	r2, #2
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80041ac:	e003      	b.n	80041b6 <HAL_TIM_PWM_Start+0xaa>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2202      	movs	r2, #2
 80041b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2201      	movs	r2, #1
 80041bc:	6839      	ldr	r1, [r7, #0]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fdd6 	bl	8004d70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a2d      	ldr	r2, [pc, #180]	@ (8004280 <HAL_TIM_PWM_Start+0x174>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d004      	beq.n	80041d8 <HAL_TIM_PWM_Start+0xcc>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a2c      	ldr	r2, [pc, #176]	@ (8004284 <HAL_TIM_PWM_Start+0x178>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d101      	bne.n	80041dc <HAL_TIM_PWM_Start+0xd0>
 80041d8:	2301      	movs	r3, #1
 80041da:	e000      	b.n	80041de <HAL_TIM_PWM_Start+0xd2>
 80041dc:	2300      	movs	r3, #0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d007      	beq.n	80041f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80041f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a22      	ldr	r2, [pc, #136]	@ (8004280 <HAL_TIM_PWM_Start+0x174>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d022      	beq.n	8004242 <HAL_TIM_PWM_Start+0x136>
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004204:	d01d      	beq.n	8004242 <HAL_TIM_PWM_Start+0x136>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a1f      	ldr	r2, [pc, #124]	@ (8004288 <HAL_TIM_PWM_Start+0x17c>)
 800420c:	4293      	cmp	r3, r2
 800420e:	d018      	beq.n	8004242 <HAL_TIM_PWM_Start+0x136>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a1d      	ldr	r2, [pc, #116]	@ (800428c <HAL_TIM_PWM_Start+0x180>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d013      	beq.n	8004242 <HAL_TIM_PWM_Start+0x136>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4a1c      	ldr	r2, [pc, #112]	@ (8004290 <HAL_TIM_PWM_Start+0x184>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d00e      	beq.n	8004242 <HAL_TIM_PWM_Start+0x136>
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a16      	ldr	r2, [pc, #88]	@ (8004284 <HAL_TIM_PWM_Start+0x178>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d009      	beq.n	8004242 <HAL_TIM_PWM_Start+0x136>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	4a18      	ldr	r2, [pc, #96]	@ (8004294 <HAL_TIM_PWM_Start+0x188>)
 8004234:	4293      	cmp	r3, r2
 8004236:	d004      	beq.n	8004242 <HAL_TIM_PWM_Start+0x136>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a16      	ldr	r2, [pc, #88]	@ (8004298 <HAL_TIM_PWM_Start+0x18c>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d111      	bne.n	8004266 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	f003 0307 	and.w	r3, r3, #7
 800424c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b06      	cmp	r3, #6
 8004252:	d010      	beq.n	8004276 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004264:	e007      	b.n	8004276 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f042 0201 	orr.w	r2, r2, #1
 8004274:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
}
 8004278:	4618      	mov	r0, r3
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40010000 	.word	0x40010000
 8004284:	40010400 	.word	0x40010400
 8004288:	40000400 	.word	0x40000400
 800428c:	40000800 	.word	0x40000800
 8004290:	40000c00 	.word	0x40000c00
 8004294:	40014000 	.word	0x40014000
 8004298:	40001800 	.word	0x40001800

0800429c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b086      	sub	sp, #24
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	e097      	b.n	80043e0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d106      	bne.n	80042ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f7fe faf7 	bl	80028b8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	687a      	ldr	r2, [r7, #4]
 80042da:	6812      	ldr	r2, [r2, #0]
 80042dc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042e0:	f023 0307 	bic.w	r3, r3, #7
 80042e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	3304      	adds	r3, #4
 80042ee:	4619      	mov	r1, r3
 80042f0:	4610      	mov	r0, r2
 80042f2:	f000 fae1 	bl	80048b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a1b      	ldr	r3, [r3, #32]
 800430c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	689a      	ldr	r2, [r3, #8]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	021b      	lsls	r3, r3, #8
 800432e:	4313      	orrs	r3, r2
 8004330:	693a      	ldr	r2, [r7, #16]
 8004332:	4313      	orrs	r3, r2
 8004334:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800433c:	f023 030c 	bic.w	r3, r3, #12
 8004340:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004348:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800434c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	4313      	orrs	r3, r2
 800435a:	693a      	ldr	r2, [r7, #16]
 800435c:	4313      	orrs	r3, r2
 800435e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	691b      	ldr	r3, [r3, #16]
 8004364:	011a      	lsls	r2, r3, #4
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	031b      	lsls	r3, r3, #12
 800436c:	4313      	orrs	r3, r2
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800437a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004382:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	4313      	orrs	r3, r2
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	697a      	ldr	r2, [r7, #20]
 800439c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	68fa      	ldr	r2, [r7, #12]
 80043ac:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2201      	movs	r2, #1
 80043b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2201      	movs	r2, #1
 80043c2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2201      	movs	r2, #1
 80043ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2201      	movs	r2, #1
 80043d2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2201      	movs	r2, #1
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80043de:	2300      	movs	r3, #0
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3718      	adds	r7, #24
 80043e4:	46bd      	mov	sp, r7
 80043e6:	bd80      	pop	{r7, pc}

080043e8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80043f8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004400:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004408:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004410:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d110      	bne.n	800443a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004418:	7bfb      	ldrb	r3, [r7, #15]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d102      	bne.n	8004424 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800441e:	7b7b      	ldrb	r3, [r7, #13]
 8004420:	2b01      	cmp	r3, #1
 8004422:	d001      	beq.n	8004428 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e069      	b.n	80044fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2202      	movs	r2, #2
 800442c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004438:	e031      	b.n	800449e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	2b04      	cmp	r3, #4
 800443e:	d110      	bne.n	8004462 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004440:	7bbb      	ldrb	r3, [r7, #14]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d102      	bne.n	800444c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004446:	7b3b      	ldrb	r3, [r7, #12]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d001      	beq.n	8004450 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800444c:	2301      	movs	r3, #1
 800444e:	e055      	b.n	80044fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2202      	movs	r2, #2
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004460:	e01d      	b.n	800449e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004462:	7bfb      	ldrb	r3, [r7, #15]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d108      	bne.n	800447a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004468:	7bbb      	ldrb	r3, [r7, #14]
 800446a:	2b01      	cmp	r3, #1
 800446c:	d105      	bne.n	800447a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800446e:	7b7b      	ldrb	r3, [r7, #13]
 8004470:	2b01      	cmp	r3, #1
 8004472:	d102      	bne.n	800447a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004474:	7b3b      	ldrb	r3, [r7, #12]
 8004476:	2b01      	cmp	r3, #1
 8004478:	d001      	beq.n	800447e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e03e      	b.n	80044fc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2202      	movs	r2, #2
 8004482:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2202      	movs	r2, #2
 800448a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2202      	movs	r2, #2
 8004492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d003      	beq.n	80044ac <HAL_TIM_Encoder_Start+0xc4>
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2b04      	cmp	r3, #4
 80044a8:	d008      	beq.n	80044bc <HAL_TIM_Encoder_Start+0xd4>
 80044aa:	e00f      	b.n	80044cc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	2201      	movs	r2, #1
 80044b2:	2100      	movs	r1, #0
 80044b4:	4618      	mov	r0, r3
 80044b6:	f000 fc5b 	bl	8004d70 <TIM_CCxChannelCmd>
      break;
 80044ba:	e016      	b.n	80044ea <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	2201      	movs	r2, #1
 80044c2:	2104      	movs	r1, #4
 80044c4:	4618      	mov	r0, r3
 80044c6:	f000 fc53 	bl	8004d70 <TIM_CCxChannelCmd>
      break;
 80044ca:	e00e      	b.n	80044ea <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	2201      	movs	r2, #1
 80044d2:	2100      	movs	r1, #0
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fc4b 	bl	8004d70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	2201      	movs	r2, #1
 80044e0:	2104      	movs	r1, #4
 80044e2:	4618      	mov	r0, r3
 80044e4:	f000 fc44 	bl	8004d70 <TIM_CCxChannelCmd>
      break;
 80044e8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681a      	ldr	r2, [r3, #0]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f042 0201 	orr.w	r2, r2, #1
 80044f8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3710      	adds	r7, #16
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	f003 0302 	and.w	r3, r3, #2
 8004522:	2b00      	cmp	r3, #0
 8004524:	d020      	beq.n	8004568 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f003 0302 	and.w	r3, r3, #2
 800452c:	2b00      	cmp	r3, #0
 800452e:	d01b      	beq.n	8004568 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f06f 0202 	mvn.w	r2, #2
 8004538:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2201      	movs	r2, #1
 800453e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	699b      	ldr	r3, [r3, #24]
 8004546:	f003 0303 	and.w	r3, r3, #3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d003      	beq.n	8004556 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f994 	bl	800487c <HAL_TIM_IC_CaptureCallback>
 8004554:	e005      	b.n	8004562 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f000 f986 	bl	8004868 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800455c:	6878      	ldr	r0, [r7, #4]
 800455e:	f000 f997 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2200      	movs	r2, #0
 8004566:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0304 	and.w	r3, r3, #4
 800456e:	2b00      	cmp	r3, #0
 8004570:	d020      	beq.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d01b      	beq.n	80045b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f06f 0204 	mvn.w	r2, #4
 8004584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2202      	movs	r2, #2
 800458a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004596:	2b00      	cmp	r3, #0
 8004598:	d003      	beq.n	80045a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f96e 	bl	800487c <HAL_TIM_IC_CaptureCallback>
 80045a0:	e005      	b.n	80045ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 f960 	bl	8004868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f971 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2200      	movs	r2, #0
 80045b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d020      	beq.n	8004600 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f003 0308 	and.w	r3, r3, #8
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d01b      	beq.n	8004600 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f06f 0208 	mvn.w	r2, #8
 80045d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	2204      	movs	r2, #4
 80045d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d003      	beq.n	80045ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f948 	bl	800487c <HAL_TIM_IC_CaptureCallback>
 80045ec:	e005      	b.n	80045fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f93a 	bl	8004868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f94b 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2200      	movs	r2, #0
 80045fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	f003 0310 	and.w	r3, r3, #16
 8004606:	2b00      	cmp	r3, #0
 8004608:	d020      	beq.n	800464c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	f003 0310 	and.w	r3, r3, #16
 8004610:	2b00      	cmp	r3, #0
 8004612:	d01b      	beq.n	800464c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f06f 0210 	mvn.w	r2, #16
 800461c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2208      	movs	r2, #8
 8004622:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	69db      	ldr	r3, [r3, #28]
 800462a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800462e:	2b00      	cmp	r3, #0
 8004630:	d003      	beq.n	800463a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f922 	bl	800487c <HAL_TIM_IC_CaptureCallback>
 8004638:	e005      	b.n	8004646 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f000 f914 	bl	8004868 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 f925 	bl	8004890 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0301 	and.w	r3, r3, #1
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00c      	beq.n	8004670 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	2b00      	cmp	r3, #0
 800465e:	d007      	beq.n	8004670 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0201 	mvn.w	r2, #1
 8004668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7fc ff12 	bl	8001494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00c      	beq.n	8004694 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004680:	2b00      	cmp	r3, #0
 8004682:	d007      	beq.n	8004694 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800468c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f000 fc6c 	bl	8004f6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469a:	2b00      	cmp	r3, #0
 800469c:	d00c      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d007      	beq.n	80046b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80046b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f8f6 	bl	80048a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	f003 0320 	and.w	r3, r3, #32
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00c      	beq.n	80046dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 0320 	and.w	r3, r3, #32
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d007      	beq.n	80046dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f06f 0220 	mvn.w	r2, #32
 80046d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 fc3e 	bl	8004f58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046dc:	bf00      	nop
 80046de:	3710      	adds	r7, #16
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046f0:	2300      	movs	r3, #0
 80046f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046fa:	2b01      	cmp	r3, #1
 80046fc:	d101      	bne.n	8004702 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046fe:	2302      	movs	r3, #2
 8004700:	e0ae      	b.n	8004860 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2b0c      	cmp	r3, #12
 800470e:	f200 809f 	bhi.w	8004850 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004712:	a201      	add	r2, pc, #4	@ (adr r2, 8004718 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	0800474d 	.word	0x0800474d
 800471c:	08004851 	.word	0x08004851
 8004720:	08004851 	.word	0x08004851
 8004724:	08004851 	.word	0x08004851
 8004728:	0800478d 	.word	0x0800478d
 800472c:	08004851 	.word	0x08004851
 8004730:	08004851 	.word	0x08004851
 8004734:	08004851 	.word	0x08004851
 8004738:	080047cf 	.word	0x080047cf
 800473c:	08004851 	.word	0x08004851
 8004740:	08004851 	.word	0x08004851
 8004744:	08004851 	.word	0x08004851
 8004748:	0800480f 	.word	0x0800480f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	4618      	mov	r0, r3
 8004754:	f000 f95c 	bl	8004a10 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	699a      	ldr	r2, [r3, #24]
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f042 0208 	orr.w	r2, r2, #8
 8004766:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	699a      	ldr	r2, [r3, #24]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0204 	bic.w	r2, r2, #4
 8004776:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	6999      	ldr	r1, [r3, #24]
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	691a      	ldr	r2, [r3, #16]
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	619a      	str	r2, [r3, #24]
      break;
 800478a:	e064      	b.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	68b9      	ldr	r1, [r7, #8]
 8004792:	4618      	mov	r0, r3
 8004794:	f000 f9ac 	bl	8004af0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80047a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	699a      	ldr	r2, [r3, #24]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	6999      	ldr	r1, [r3, #24]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	021a      	lsls	r2, r3, #8
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	430a      	orrs	r2, r1
 80047ca:	619a      	str	r2, [r3, #24]
      break;
 80047cc:	e043      	b.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68b9      	ldr	r1, [r7, #8]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f000 fa01 	bl	8004bdc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	69da      	ldr	r2, [r3, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0208 	orr.w	r2, r2, #8
 80047e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	69da      	ldr	r2, [r3, #28]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0204 	bic.w	r2, r2, #4
 80047f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	69d9      	ldr	r1, [r3, #28]
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	691a      	ldr	r2, [r3, #16]
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	430a      	orrs	r2, r1
 800480a:	61da      	str	r2, [r3, #28]
      break;
 800480c:	e023      	b.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68b9      	ldr	r1, [r7, #8]
 8004814:	4618      	mov	r0, r3
 8004816:	f000 fa55 	bl	8004cc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	69da      	ldr	r2, [r3, #28]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004828:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69da      	ldr	r2, [r3, #28]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004838:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	69d9      	ldr	r1, [r3, #28]
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	021a      	lsls	r2, r3, #8
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	61da      	str	r2, [r3, #28]
      break;
 800484e:	e002      	b.n	8004856 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004850:	2301      	movs	r3, #1
 8004852:	75fb      	strb	r3, [r7, #23]
      break;
 8004854:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2200      	movs	r2, #0
 800485a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800485e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004860:	4618      	mov	r0, r3
 8004862:	3718      	adds	r7, #24
 8004864:	46bd      	mov	sp, r7
 8004866:	bd80      	pop	{r7, pc}

08004868 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004898:	bf00      	nop
 800489a:	370c      	adds	r7, #12
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b083      	sub	sp, #12
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr

080048b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80048b8:	b480      	push	{r7}
 80048ba:	b085      	sub	sp, #20
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
 80048c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	4a46      	ldr	r2, [pc, #280]	@ (80049e4 <TIM_Base_SetConfig+0x12c>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d013      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048d6:	d00f      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	4a43      	ldr	r2, [pc, #268]	@ (80049e8 <TIM_Base_SetConfig+0x130>)
 80048dc:	4293      	cmp	r3, r2
 80048de:	d00b      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	4a42      	ldr	r2, [pc, #264]	@ (80049ec <TIM_Base_SetConfig+0x134>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d007      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a41      	ldr	r2, [pc, #260]	@ (80049f0 <TIM_Base_SetConfig+0x138>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d003      	beq.n	80048f8 <TIM_Base_SetConfig+0x40>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a40      	ldr	r2, [pc, #256]	@ (80049f4 <TIM_Base_SetConfig+0x13c>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d108      	bne.n	800490a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4313      	orrs	r3, r2
 8004908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	4a35      	ldr	r2, [pc, #212]	@ (80049e4 <TIM_Base_SetConfig+0x12c>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d02b      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004918:	d027      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a32      	ldr	r2, [pc, #200]	@ (80049e8 <TIM_Base_SetConfig+0x130>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d023      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a31      	ldr	r2, [pc, #196]	@ (80049ec <TIM_Base_SetConfig+0x134>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d01f      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a30      	ldr	r2, [pc, #192]	@ (80049f0 <TIM_Base_SetConfig+0x138>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d01b      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a2f      	ldr	r2, [pc, #188]	@ (80049f4 <TIM_Base_SetConfig+0x13c>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d017      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a2e      	ldr	r2, [pc, #184]	@ (80049f8 <TIM_Base_SetConfig+0x140>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d013      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a2d      	ldr	r2, [pc, #180]	@ (80049fc <TIM_Base_SetConfig+0x144>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d00f      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a2c      	ldr	r2, [pc, #176]	@ (8004a00 <TIM_Base_SetConfig+0x148>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d00b      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a2b      	ldr	r2, [pc, #172]	@ (8004a04 <TIM_Base_SetConfig+0x14c>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d007      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	4a2a      	ldr	r2, [pc, #168]	@ (8004a08 <TIM_Base_SetConfig+0x150>)
 800495e:	4293      	cmp	r3, r2
 8004960:	d003      	beq.n	800496a <TIM_Base_SetConfig+0xb2>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	4a29      	ldr	r2, [pc, #164]	@ (8004a0c <TIM_Base_SetConfig+0x154>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d108      	bne.n	800497c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	695b      	ldr	r3, [r3, #20]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	68fa      	ldr	r2, [r7, #12]
 800498e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	689a      	ldr	r2, [r3, #8]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	4a10      	ldr	r2, [pc, #64]	@ (80049e4 <TIM_Base_SetConfig+0x12c>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d003      	beq.n	80049b0 <TIM_Base_SetConfig+0xf8>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <TIM_Base_SetConfig+0x13c>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d103      	bne.n	80049b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	691a      	ldr	r2, [r3, #16]
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	2201      	movs	r2, #1
 80049bc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d105      	bne.n	80049d6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f023 0201 	bic.w	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	611a      	str	r2, [r3, #16]
  }
}
 80049d6:	bf00      	nop
 80049d8:	3714      	adds	r7, #20
 80049da:	46bd      	mov	sp, r7
 80049dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40000400 	.word	0x40000400
 80049ec:	40000800 	.word	0x40000800
 80049f0:	40000c00 	.word	0x40000c00
 80049f4:	40010400 	.word	0x40010400
 80049f8:	40014000 	.word	0x40014000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800
 8004a04:	40001800 	.word	0x40001800
 8004a08:	40001c00 	.word	0x40001c00
 8004a0c:	40002000 	.word	0x40002000

08004a10 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
 8004a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f023 0201 	bic.w	r2, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
 8004a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f023 0303 	bic.w	r3, r3, #3
 8004a46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4313      	orrs	r3, r2
 8004a50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	f023 0302 	bic.w	r3, r3, #2
 8004a58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a20      	ldr	r2, [pc, #128]	@ (8004ae8 <TIM_OC1_SetConfig+0xd8>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_OC1_SetConfig+0x64>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a1f      	ldr	r2, [pc, #124]	@ (8004aec <TIM_OC1_SetConfig+0xdc>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d10c      	bne.n	8004a8e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	f023 0308 	bic.w	r3, r3, #8
 8004a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	697a      	ldr	r2, [r7, #20]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004a86:	697b      	ldr	r3, [r7, #20]
 8004a88:	f023 0304 	bic.w	r3, r3, #4
 8004a8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	4a15      	ldr	r2, [pc, #84]	@ (8004ae8 <TIM_OC1_SetConfig+0xd8>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d003      	beq.n	8004a9e <TIM_OC1_SetConfig+0x8e>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a14      	ldr	r2, [pc, #80]	@ (8004aec <TIM_OC1_SetConfig+0xdc>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d111      	bne.n	8004ac2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004aa4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004aa6:	693b      	ldr	r3, [r7, #16]
 8004aa8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004aac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	693a      	ldr	r2, [r7, #16]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	699b      	ldr	r3, [r3, #24]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68fa      	ldr	r2, [r7, #12]
 8004acc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	685a      	ldr	r2, [r3, #4]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	697a      	ldr	r2, [r7, #20]
 8004ada:	621a      	str	r2, [r3, #32]
}
 8004adc:	bf00      	nop
 8004ade:	371c      	adds	r7, #28
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr
 8004ae8:	40010000 	.word	0x40010000
 8004aec:	40010400 	.word	0x40010400

08004af0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b087      	sub	sp, #28
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6a1b      	ldr	r3, [r3, #32]
 8004b04:	f023 0210 	bic.w	r2, r3, #16
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	699b      	ldr	r3, [r3, #24]
 8004b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004b26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	021b      	lsls	r3, r3, #8
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f023 0320 	bic.w	r3, r3, #32
 8004b3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	011b      	lsls	r3, r3, #4
 8004b42:	697a      	ldr	r2, [r7, #20]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a22      	ldr	r2, [pc, #136]	@ (8004bd4 <TIM_OC2_SetConfig+0xe4>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d003      	beq.n	8004b58 <TIM_OC2_SetConfig+0x68>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	4a21      	ldr	r2, [pc, #132]	@ (8004bd8 <TIM_OC2_SetConfig+0xe8>)
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d10d      	bne.n	8004b74 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b5e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	011b      	lsls	r3, r3, #4
 8004b66:	697a      	ldr	r2, [r7, #20]
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b72:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4a17      	ldr	r2, [pc, #92]	@ (8004bd4 <TIM_OC2_SetConfig+0xe4>)
 8004b78:	4293      	cmp	r3, r2
 8004b7a:	d003      	beq.n	8004b84 <TIM_OC2_SetConfig+0x94>
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	4a16      	ldr	r2, [pc, #88]	@ (8004bd8 <TIM_OC2_SetConfig+0xe8>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d113      	bne.n	8004bac <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004b8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004b92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	695b      	ldr	r3, [r3, #20]
 8004b98:	009b      	lsls	r3, r3, #2
 8004b9a:	693a      	ldr	r2, [r7, #16]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	693a      	ldr	r2, [r7, #16]
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	693a      	ldr	r2, [r7, #16]
 8004bb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	68fa      	ldr	r2, [r7, #12]
 8004bb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	685a      	ldr	r2, [r3, #4]
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	697a      	ldr	r2, [r7, #20]
 8004bc4:	621a      	str	r2, [r3, #32]
}
 8004bc6:	bf00      	nop
 8004bc8:	371c      	adds	r7, #28
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd0:	4770      	bx	lr
 8004bd2:	bf00      	nop
 8004bd4:	40010000 	.word	0x40010000
 8004bd8:	40010400 	.word	0x40010400

08004bdc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b087      	sub	sp, #28
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a1b      	ldr	r3, [r3, #32]
 8004bea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a1b      	ldr	r3, [r3, #32]
 8004bf0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	69db      	ldr	r3, [r3, #28]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f023 0303 	bic.w	r3, r3, #3
 8004c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68fa      	ldr	r2, [r7, #12]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	021b      	lsls	r3, r3, #8
 8004c2c:	697a      	ldr	r2, [r7, #20]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	4a21      	ldr	r2, [pc, #132]	@ (8004cbc <TIM_OC3_SetConfig+0xe0>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d003      	beq.n	8004c42 <TIM_OC3_SetConfig+0x66>
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	4a20      	ldr	r2, [pc, #128]	@ (8004cc0 <TIM_OC3_SetConfig+0xe4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d10d      	bne.n	8004c5e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	68db      	ldr	r3, [r3, #12]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	697a      	ldr	r2, [r7, #20]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	4a16      	ldr	r2, [pc, #88]	@ (8004cbc <TIM_OC3_SetConfig+0xe0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d003      	beq.n	8004c6e <TIM_OC3_SetConfig+0x92>
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	4a15      	ldr	r2, [pc, #84]	@ (8004cc0 <TIM_OC3_SetConfig+0xe4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d113      	bne.n	8004c96 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004c6e:	693b      	ldr	r3, [r7, #16]
 8004c70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004c7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	011b      	lsls	r3, r3, #4
 8004c84:	693a      	ldr	r2, [r7, #16]
 8004c86:	4313      	orrs	r3, r2
 8004c88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	011b      	lsls	r3, r3, #4
 8004c90:	693a      	ldr	r2, [r7, #16]
 8004c92:	4313      	orrs	r3, r2
 8004c94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	693a      	ldr	r2, [r7, #16]
 8004c9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	68fa      	ldr	r2, [r7, #12]
 8004ca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	685a      	ldr	r2, [r3, #4]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	621a      	str	r2, [r3, #32]
}
 8004cb0:	bf00      	nop
 8004cb2:	371c      	adds	r7, #28
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	40010000 	.word	0x40010000
 8004cc0:	40010400 	.word	0x40010400

08004cc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a1b      	ldr	r3, [r3, #32]
 8004cd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	69db      	ldr	r3, [r3, #28]
 8004cea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004cf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	4313      	orrs	r3, r2
 8004d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004d0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	031b      	lsls	r3, r3, #12
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	4a12      	ldr	r2, [pc, #72]	@ (8004d68 <TIM_OC4_SetConfig+0xa4>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d003      	beq.n	8004d2c <TIM_OC4_SetConfig+0x68>
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a11      	ldr	r2, [pc, #68]	@ (8004d6c <TIM_OC4_SetConfig+0xa8>)
 8004d28:	4293      	cmp	r3, r2
 8004d2a:	d109      	bne.n	8004d40 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004d32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	695b      	ldr	r3, [r3, #20]
 8004d38:	019b      	lsls	r3, r3, #6
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	693a      	ldr	r2, [r7, #16]
 8004d58:	621a      	str	r2, [r3, #32]
}
 8004d5a:	bf00      	nop
 8004d5c:	371c      	adds	r7, #28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	40010000 	.word	0x40010000
 8004d6c:	40010400 	.word	0x40010400

08004d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b087      	sub	sp, #28
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	2201      	movs	r2, #1
 8004d84:	fa02 f303 	lsl.w	r3, r2, r3
 8004d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6a1a      	ldr	r2, [r3, #32]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	43db      	mvns	r3, r3
 8004d92:	401a      	ands	r2, r3
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6a1a      	ldr	r2, [r3, #32]
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	f003 031f 	and.w	r3, r3, #31
 8004da2:	6879      	ldr	r1, [r7, #4]
 8004da4:	fa01 f303 	lsl.w	r3, r1, r3
 8004da8:	431a      	orrs	r2, r3
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	621a      	str	r2, [r3, #32]
}
 8004dae:	bf00      	nop
 8004db0:	371c      	adds	r7, #28
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
	...

08004dbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d101      	bne.n	8004dd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	e05a      	b.n	8004e8a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	689b      	ldr	r3, [r3, #8]
 8004df2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	68fa      	ldr	r2, [r7, #12]
 8004e02:	4313      	orrs	r3, r2
 8004e04:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a21      	ldr	r2, [pc, #132]	@ (8004e98 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e20:	d01d      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1d      	ldr	r2, [pc, #116]	@ (8004e9c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a1b      	ldr	r2, [pc, #108]	@ (8004ea0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ea4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a17      	ldr	r2, [pc, #92]	@ (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a15      	ldr	r2, [pc, #84]	@ (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d10c      	bne.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e64:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	68ba      	ldr	r2, [r7, #8]
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68ba      	ldr	r2, [r7, #8]
 8004e76:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e88:	2300      	movs	r3, #0
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	3714      	adds	r7, #20
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr
 8004e96:	bf00      	nop
 8004e98:	40010000 	.word	0x40010000
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40000c00 	.word	0x40000c00
 8004ea8:	40010400 	.word	0x40010400
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40001800 	.word	0x40001800

08004eb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d101      	bne.n	8004ed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e03d      	b.n	8004f4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	68db      	ldr	r3, [r3, #12]
 8004ee2:	4313      	orrs	r3, r2
 8004ee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	4313      	orrs	r3, r2
 8004f00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	695b      	ldr	r3, [r3, #20]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	69db      	ldr	r3, [r3, #28]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68fa      	ldr	r2, [r7, #12]
 8004f40:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f4a:	2300      	movs	r3, #0
}
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	3714      	adds	r7, #20
 8004f50:	46bd      	mov	sp, r7
 8004f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f56:	4770      	bx	lr

08004f58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f60:	bf00      	nop
 8004f62:	370c      	adds	r7, #12
 8004f64:	46bd      	mov	sp, r7
 8004f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6a:	4770      	bx	lr

08004f6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f74:	bf00      	nop
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr

08004f80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f80:	b580      	push	{r7, lr}
 8004f82:	b082      	sub	sp, #8
 8004f84:	af00      	add	r7, sp, #0
 8004f86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d101      	bne.n	8004f92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e042      	b.n	8005018 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d106      	bne.n	8004fac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f7fd fea8 	bl	8002cfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2224      	movs	r2, #36	@ 0x24
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004fc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fc4:	6878      	ldr	r0, [r7, #4]
 8004fc6:	f000 fdbd 	bl	8005b44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	691a      	ldr	r2, [r3, #16]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695a      	ldr	r2, [r3, #20]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fe8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ff8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2220      	movs	r2, #32
 8005004:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2200      	movs	r2, #0
 8005014:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005016:	2300      	movs	r3, #0
}
 8005018:	4618      	mov	r0, r3
 800501a:	3708      	adds	r7, #8
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}

08005020 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b08a      	sub	sp, #40	@ 0x28
 8005024:	af02      	add	r7, sp, #8
 8005026:	60f8      	str	r0, [r7, #12]
 8005028:	60b9      	str	r1, [r7, #8]
 800502a:	603b      	str	r3, [r7, #0]
 800502c:	4613      	mov	r3, r2
 800502e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800503a:	b2db      	uxtb	r3, r3
 800503c:	2b20      	cmp	r3, #32
 800503e:	d175      	bne.n	800512c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d002      	beq.n	800504c <HAL_UART_Transmit+0x2c>
 8005046:	88fb      	ldrh	r3, [r7, #6]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d101      	bne.n	8005050 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e06e      	b.n	800512e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2221      	movs	r2, #33	@ 0x21
 800505a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800505e:	f7fd ff61 	bl	8002f24 <HAL_GetTick>
 8005062:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	88fa      	ldrh	r2, [r7, #6]
 8005068:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	88fa      	ldrh	r2, [r7, #6]
 800506e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005078:	d108      	bne.n	800508c <HAL_UART_Transmit+0x6c>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d104      	bne.n	800508c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005082:	2300      	movs	r3, #0
 8005084:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	e003      	b.n	8005094 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800508c:	68bb      	ldr	r3, [r7, #8]
 800508e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005090:	2300      	movs	r3, #0
 8005092:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005094:	e02e      	b.n	80050f4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	9300      	str	r3, [sp, #0]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	2200      	movs	r2, #0
 800509e:	2180      	movs	r1, #128	@ 0x80
 80050a0:	68f8      	ldr	r0, [r7, #12]
 80050a2:	f000 fb1f 	bl	80056e4 <UART_WaitOnFlagUntilTimeout>
 80050a6:	4603      	mov	r3, r0
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2220      	movs	r2, #32
 80050b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80050b4:	2303      	movs	r3, #3
 80050b6:	e03a      	b.n	800512e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10b      	bne.n	80050d6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050be:	69bb      	ldr	r3, [r7, #24]
 80050c0:	881b      	ldrh	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050cc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	3302      	adds	r3, #2
 80050d2:	61bb      	str	r3, [r7, #24]
 80050d4:	e007      	b.n	80050e6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	781a      	ldrb	r2, [r3, #0]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	3301      	adds	r3, #1
 80050e4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	3b01      	subs	r3, #1
 80050ee:	b29a      	uxth	r2, r3
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80050f8:	b29b      	uxth	r3, r3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d1cb      	bne.n	8005096 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2200      	movs	r2, #0
 8005106:	2140      	movs	r1, #64	@ 0x40
 8005108:	68f8      	ldr	r0, [r7, #12]
 800510a:	f000 faeb 	bl	80056e4 <UART_WaitOnFlagUntilTimeout>
 800510e:	4603      	mov	r3, r0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d005      	beq.n	8005120 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2220      	movs	r2, #32
 8005118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800511c:	2303      	movs	r3, #3
 800511e:	e006      	b.n	800512e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2220      	movs	r2, #32
 8005124:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005128:	2300      	movs	r3, #0
 800512a:	e000      	b.n	800512e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800512c:	2302      	movs	r3, #2
  }
}
 800512e:	4618      	mov	r0, r3
 8005130:	3720      	adds	r7, #32
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b084      	sub	sp, #16
 800513a:	af00      	add	r7, sp, #0
 800513c:	60f8      	str	r0, [r7, #12]
 800513e:	60b9      	str	r1, [r7, #8]
 8005140:	4613      	mov	r3, r2
 8005142:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800514a:	b2db      	uxtb	r3, r3
 800514c:	2b20      	cmp	r3, #32
 800514e:	d112      	bne.n	8005176 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d002      	beq.n	800515c <HAL_UART_Receive_IT+0x26>
 8005156:	88fb      	ldrh	r3, [r7, #6]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e00b      	b.n	8005178 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005166:	88fb      	ldrh	r3, [r7, #6]
 8005168:	461a      	mov	r2, r3
 800516a:	68b9      	ldr	r1, [r7, #8]
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f000 fb12 	bl	8005796 <UART_Start_Receive_IT>
 8005172:	4603      	mov	r3, r0
 8005174:	e000      	b.n	8005178 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005176:	2302      	movs	r3, #2
  }
}
 8005178:	4618      	mov	r0, r3
 800517a:	3710      	adds	r7, #16
 800517c:	46bd      	mov	sp, r7
 800517e:	bd80      	pop	{r7, pc}

08005180 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b0ba      	sub	sp, #232	@ 0xe8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	695b      	ldr	r3, [r3, #20]
 80051a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80051a6:	2300      	movs	r3, #0
 80051a8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051b6:	f003 030f 	and.w	r3, r3, #15
 80051ba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80051be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10f      	bne.n	80051e6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ca:	f003 0320 	and.w	r3, r3, #32
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_UART_IRQHandler+0x66>
 80051d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d003      	beq.n	80051e6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051de:	6878      	ldr	r0, [r7, #4]
 80051e0:	f000 fbf2 	bl	80059c8 <UART_Receive_IT>
      return;
 80051e4:	e25b      	b.n	800569e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	f000 80de 	beq.w	80053ac <HAL_UART_IRQHandler+0x22c>
 80051f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051f4:	f003 0301 	and.w	r3, r3, #1
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d106      	bne.n	800520a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005200:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005204:	2b00      	cmp	r3, #0
 8005206:	f000 80d1 	beq.w	80053ac <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800520a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00b      	beq.n	800522e <HAL_UART_IRQHandler+0xae>
 8005216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800521a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800521e:	2b00      	cmp	r3, #0
 8005220:	d005      	beq.n	800522e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005226:	f043 0201 	orr.w	r2, r3, #1
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800522e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005232:	f003 0304 	and.w	r3, r3, #4
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00b      	beq.n	8005252 <HAL_UART_IRQHandler+0xd2>
 800523a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b00      	cmp	r3, #0
 8005244:	d005      	beq.n	8005252 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800524a:	f043 0202 	orr.w	r2, r3, #2
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005256:	f003 0302 	and.w	r3, r3, #2
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00b      	beq.n	8005276 <HAL_UART_IRQHandler+0xf6>
 800525e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d005      	beq.n	8005276 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800526e:	f043 0204 	orr.w	r2, r3, #4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527a:	f003 0308 	and.w	r3, r3, #8
 800527e:	2b00      	cmp	r3, #0
 8005280:	d011      	beq.n	80052a6 <HAL_UART_IRQHandler+0x126>
 8005282:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005286:	f003 0320 	and.w	r3, r3, #32
 800528a:	2b00      	cmp	r3, #0
 800528c:	d105      	bne.n	800529a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800528e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005292:	f003 0301 	and.w	r3, r3, #1
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800529e:	f043 0208 	orr.w	r2, r3, #8
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f000 81f2 	beq.w	8005694 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052b4:	f003 0320 	and.w	r3, r3, #32
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d008      	beq.n	80052ce <HAL_UART_IRQHandler+0x14e>
 80052bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052c0:	f003 0320 	and.w	r3, r3, #32
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d002      	beq.n	80052ce <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f000 fb7d 	bl	80059c8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	695b      	ldr	r3, [r3, #20]
 80052d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052d8:	2b40      	cmp	r3, #64	@ 0x40
 80052da:	bf0c      	ite	eq
 80052dc:	2301      	moveq	r3, #1
 80052de:	2300      	movne	r3, #0
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052ea:	f003 0308 	and.w	r3, r3, #8
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d103      	bne.n	80052fa <HAL_UART_IRQHandler+0x17a>
 80052f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d04f      	beq.n	800539a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 fa85 	bl	800580a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	695b      	ldr	r3, [r3, #20]
 8005306:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800530a:	2b40      	cmp	r3, #64	@ 0x40
 800530c:	d141      	bne.n	8005392 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3314      	adds	r3, #20
 8005314:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005318:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800531c:	e853 3f00 	ldrex	r3, [r3]
 8005320:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005324:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005328:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800532c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	3314      	adds	r3, #20
 8005336:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800533a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800533e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005346:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800534a:	e841 2300 	strex	r3, r2, [r1]
 800534e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005352:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d1d9      	bne.n	800530e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800535e:	2b00      	cmp	r3, #0
 8005360:	d013      	beq.n	800538a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005366:	4a7e      	ldr	r2, [pc, #504]	@ (8005560 <HAL_UART_IRQHandler+0x3e0>)
 8005368:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800536e:	4618      	mov	r0, r3
 8005370:	f7fd ff65 	bl	800323e <HAL_DMA_Abort_IT>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d016      	beq.n	80053a8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800537e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005384:	4610      	mov	r0, r2
 8005386:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	e00e      	b.n	80053a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f994 	bl	80056b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	e00a      	b.n	80053a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f990 	bl	80056b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005398:	e006      	b.n	80053a8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800539a:	6878      	ldr	r0, [r7, #4]
 800539c:	f000 f98c 	bl	80056b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80053a6:	e175      	b.n	8005694 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a8:	bf00      	nop
    return;
 80053aa:	e173      	b.n	8005694 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b0:	2b01      	cmp	r3, #1
 80053b2:	f040 814f 	bne.w	8005654 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053ba:	f003 0310 	and.w	r3, r3, #16
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8148 	beq.w	8005654 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053c8:	f003 0310 	and.w	r3, r3, #16
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	f000 8141 	beq.w	8005654 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685b      	ldr	r3, [r3, #4]
 80053e4:	60bb      	str	r3, [r7, #8]
 80053e6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f2:	2b40      	cmp	r3, #64	@ 0x40
 80053f4:	f040 80b6 	bne.w	8005564 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685b      	ldr	r3, [r3, #4]
 8005400:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005404:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005408:	2b00      	cmp	r3, #0
 800540a:	f000 8145 	beq.w	8005698 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005416:	429a      	cmp	r2, r3
 8005418:	f080 813e 	bcs.w	8005698 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005422:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005428:	69db      	ldr	r3, [r3, #28]
 800542a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800542e:	f000 8088 	beq.w	8005542 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	330c      	adds	r3, #12
 8005438:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800543c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005440:	e853 3f00 	ldrex	r3, [r3]
 8005444:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005448:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800544c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005450:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	330c      	adds	r3, #12
 800545a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800545e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005462:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005466:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800546a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800546e:	e841 2300 	strex	r3, r2, [r1]
 8005472:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005476:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800547a:	2b00      	cmp	r3, #0
 800547c:	d1d9      	bne.n	8005432 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	3314      	adds	r3, #20
 8005484:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005486:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005488:	e853 3f00 	ldrex	r3, [r3]
 800548c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800548e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005490:	f023 0301 	bic.w	r3, r3, #1
 8005494:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	3314      	adds	r3, #20
 800549e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80054a2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80054a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80054aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80054ae:	e841 2300 	strex	r3, r2, [r1]
 80054b2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80054b4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1e1      	bne.n	800547e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	3314      	adds	r3, #20
 80054c0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80054c4:	e853 3f00 	ldrex	r3, [r3]
 80054c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80054ca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80054cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3314      	adds	r3, #20
 80054da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80054de:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80054e0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80054e4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80054e6:	e841 2300 	strex	r3, r2, [r1]
 80054ea:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80054ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1e3      	bne.n	80054ba <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2220      	movs	r2, #32
 80054f6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	2200      	movs	r2, #0
 80054fe:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	330c      	adds	r3, #12
 8005506:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005508:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800550a:	e853 3f00 	ldrex	r3, [r3]
 800550e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005510:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005512:	f023 0310 	bic.w	r3, r3, #16
 8005516:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	330c      	adds	r3, #12
 8005520:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005524:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005526:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005528:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800552a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800552c:	e841 2300 	strex	r3, r2, [r1]
 8005530:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005532:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005534:	2b00      	cmp	r3, #0
 8005536:	d1e3      	bne.n	8005500 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800553c:	4618      	mov	r0, r3
 800553e:	f7fd fe0e 	bl	800315e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2202      	movs	r2, #2
 8005546:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005550:	b29b      	uxth	r3, r3
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	b29b      	uxth	r3, r3
 8005556:	4619      	mov	r1, r3
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 f8b7 	bl	80056cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800555e:	e09b      	b.n	8005698 <HAL_UART_IRQHandler+0x518>
 8005560:	080058d1 	.word	0x080058d1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800556c:	b29b      	uxth	r3, r3
 800556e:	1ad3      	subs	r3, r2, r3
 8005570:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005578:	b29b      	uxth	r3, r3
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 808e 	beq.w	800569c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005580:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 8089 	beq.w	800569c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005594:	e853 3f00 	ldrex	r3, [r3]
 8005598:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800559a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800559c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055a0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	330c      	adds	r3, #12
 80055aa:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80055ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80055b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80055b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80055b6:	e841 2300 	strex	r3, r2, [r1]
 80055ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80055bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1e3      	bne.n	800558a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	3314      	adds	r3, #20
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055cc:	e853 3f00 	ldrex	r3, [r3]
 80055d0:	623b      	str	r3, [r7, #32]
   return(result);
 80055d2:	6a3b      	ldr	r3, [r7, #32]
 80055d4:	f023 0301 	bic.w	r3, r3, #1
 80055d8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3314      	adds	r3, #20
 80055e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80055e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80055e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1e3      	bne.n	80055c2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2220      	movs	r2, #32
 80055fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	330c      	adds	r3, #12
 800560e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	e853 3f00 	ldrex	r3, [r3]
 8005616:	60fb      	str	r3, [r7, #12]
   return(result);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	f023 0310 	bic.w	r3, r3, #16
 800561e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	330c      	adds	r3, #12
 8005628:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800562c:	61fa      	str	r2, [r7, #28]
 800562e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005630:	69b9      	ldr	r1, [r7, #24]
 8005632:	69fa      	ldr	r2, [r7, #28]
 8005634:	e841 2300 	strex	r3, r2, [r1]
 8005638:	617b      	str	r3, [r7, #20]
   return(result);
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1e3      	bne.n	8005608 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2202      	movs	r2, #2
 8005644:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005646:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800564a:	4619      	mov	r1, r3
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 f83d 	bl	80056cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005652:	e023      	b.n	800569c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005654:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005658:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800565c:	2b00      	cmp	r3, #0
 800565e:	d009      	beq.n	8005674 <HAL_UART_IRQHandler+0x4f4>
 8005660:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005664:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005668:	2b00      	cmp	r3, #0
 800566a:	d003      	beq.n	8005674 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f000 f943 	bl	80058f8 <UART_Transmit_IT>
    return;
 8005672:	e014      	b.n	800569e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005678:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <HAL_UART_IRQHandler+0x51e>
 8005680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005684:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005688:	2b00      	cmp	r3, #0
 800568a:	d008      	beq.n	800569e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800568c:	6878      	ldr	r0, [r7, #4]
 800568e:	f000 f983 	bl	8005998 <UART_EndTransmit_IT>
    return;
 8005692:	e004      	b.n	800569e <HAL_UART_IRQHandler+0x51e>
    return;
 8005694:	bf00      	nop
 8005696:	e002      	b.n	800569e <HAL_UART_IRQHandler+0x51e>
      return;
 8005698:	bf00      	nop
 800569a:	e000      	b.n	800569e <HAL_UART_IRQHandler+0x51e>
      return;
 800569c:	bf00      	nop
  }
}
 800569e:	37e8      	adds	r7, #232	@ 0xe8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
 80056d4:	460b      	mov	r3, r1
 80056d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b086      	sub	sp, #24
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	603b      	str	r3, [r7, #0]
 80056f0:	4613      	mov	r3, r2
 80056f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056f4:	e03b      	b.n	800576e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056fc:	d037      	beq.n	800576e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056fe:	f7fd fc11 	bl	8002f24 <HAL_GetTick>
 8005702:	4602      	mov	r2, r0
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	1ad3      	subs	r3, r2, r3
 8005708:	6a3a      	ldr	r2, [r7, #32]
 800570a:	429a      	cmp	r2, r3
 800570c:	d302      	bcc.n	8005714 <UART_WaitOnFlagUntilTimeout+0x30>
 800570e:	6a3b      	ldr	r3, [r7, #32]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d101      	bne.n	8005718 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e03a      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	68db      	ldr	r3, [r3, #12]
 800571e:	f003 0304 	and.w	r3, r3, #4
 8005722:	2b00      	cmp	r3, #0
 8005724:	d023      	beq.n	800576e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	2b80      	cmp	r3, #128	@ 0x80
 800572a:	d020      	beq.n	800576e <UART_WaitOnFlagUntilTimeout+0x8a>
 800572c:	68bb      	ldr	r3, [r7, #8]
 800572e:	2b40      	cmp	r3, #64	@ 0x40
 8005730:	d01d      	beq.n	800576e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 0308 	and.w	r3, r3, #8
 800573c:	2b08      	cmp	r3, #8
 800573e:	d116      	bne.n	800576e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005740:	2300      	movs	r3, #0
 8005742:	617b      	str	r3, [r7, #20]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	617b      	str	r3, [r7, #20]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685b      	ldr	r3, [r3, #4]
 8005752:	617b      	str	r3, [r7, #20]
 8005754:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 f857 	bl	800580a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	2208      	movs	r2, #8
 8005760:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800576a:	2301      	movs	r3, #1
 800576c:	e00f      	b.n	800578e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	681a      	ldr	r2, [r3, #0]
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	4013      	ands	r3, r2
 8005778:	68ba      	ldr	r2, [r7, #8]
 800577a:	429a      	cmp	r2, r3
 800577c:	bf0c      	ite	eq
 800577e:	2301      	moveq	r3, #1
 8005780:	2300      	movne	r3, #0
 8005782:	b2db      	uxtb	r3, r3
 8005784:	461a      	mov	r2, r3
 8005786:	79fb      	ldrb	r3, [r7, #7]
 8005788:	429a      	cmp	r2, r3
 800578a:	d0b4      	beq.n	80056f6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3718      	adds	r7, #24
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005796:	b480      	push	{r7}
 8005798:	b085      	sub	sp, #20
 800579a:	af00      	add	r7, sp, #0
 800579c:	60f8      	str	r0, [r7, #12]
 800579e:	60b9      	str	r1, [r7, #8]
 80057a0:	4613      	mov	r3, r2
 80057a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	68ba      	ldr	r2, [r7, #8]
 80057a8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	88fa      	ldrh	r2, [r7, #6]
 80057ae:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	88fa      	ldrh	r2, [r7, #6]
 80057b4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	2200      	movs	r2, #0
 80057ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2222      	movs	r2, #34	@ 0x22
 80057c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	691b      	ldr	r3, [r3, #16]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	68da      	ldr	r2, [r3, #12]
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695a      	ldr	r2, [r3, #20]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	f042 0201 	orr.w	r2, r2, #1
 80057ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68da      	ldr	r2, [r3, #12]
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f042 0220 	orr.w	r2, r2, #32
 80057fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80057fc:	2300      	movs	r3, #0
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3714      	adds	r7, #20
 8005802:	46bd      	mov	sp, r7
 8005804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005808:	4770      	bx	lr

0800580a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800580a:	b480      	push	{r7}
 800580c:	b095      	sub	sp, #84	@ 0x54
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	330c      	adds	r3, #12
 8005818:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005824:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005828:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005832:	643a      	str	r2, [r7, #64]	@ 0x40
 8005834:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005836:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005838:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800583a:	e841 2300 	strex	r3, r2, [r1]
 800583e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005840:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1e5      	bne.n	8005812 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	3314      	adds	r3, #20
 800584c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584e:	6a3b      	ldr	r3, [r7, #32]
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	61fb      	str	r3, [r7, #28]
   return(result);
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	f023 0301 	bic.w	r3, r3, #1
 800585c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	3314      	adds	r3, #20
 8005864:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005866:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005868:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800586c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800586e:	e841 2300 	strex	r3, r2, [r1]
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	d1e5      	bne.n	8005846 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587e:	2b01      	cmp	r3, #1
 8005880:	d119      	bne.n	80058b6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	e853 3f00 	ldrex	r3, [r3]
 8005890:	60bb      	str	r3, [r7, #8]
   return(result);
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	f023 0310 	bic.w	r3, r3, #16
 8005898:	647b      	str	r3, [r7, #68]	@ 0x44
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80058a2:	61ba      	str	r2, [r7, #24]
 80058a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a6:	6979      	ldr	r1, [r7, #20]
 80058a8:	69ba      	ldr	r2, [r7, #24]
 80058aa:	e841 2300 	strex	r3, r2, [r1]
 80058ae:	613b      	str	r3, [r7, #16]
   return(result);
 80058b0:	693b      	ldr	r3, [r7, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d1e5      	bne.n	8005882 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80058c4:	bf00      	nop
 80058c6:	3754      	adds	r7, #84	@ 0x54
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2200      	movs	r2, #0
 80058e8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f7ff fee4 	bl	80056b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b21      	cmp	r3, #33	@ 0x21
 800590a:	d13e      	bne.n	800598a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005914:	d114      	bne.n	8005940 <UART_Transmit_IT+0x48>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	691b      	ldr	r3, [r3, #16]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d110      	bne.n	8005940 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	881b      	ldrh	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005932:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a1b      	ldr	r3, [r3, #32]
 8005938:	1c9a      	adds	r2, r3, #2
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	621a      	str	r2, [r3, #32]
 800593e:	e008      	b.n	8005952 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6a1b      	ldr	r3, [r3, #32]
 8005944:	1c59      	adds	r1, r3, #1
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6211      	str	r1, [r2, #32]
 800594a:	781a      	ldrb	r2, [r3, #0]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005956:	b29b      	uxth	r3, r3
 8005958:	3b01      	subs	r3, #1
 800595a:	b29b      	uxth	r3, r3
 800595c:	687a      	ldr	r2, [r7, #4]
 800595e:	4619      	mov	r1, r3
 8005960:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005962:	2b00      	cmp	r3, #0
 8005964:	d10f      	bne.n	8005986 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005974:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68da      	ldr	r2, [r3, #12]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005984:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005986:	2300      	movs	r3, #0
 8005988:	e000      	b.n	800598c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800598a:	2302      	movs	r3, #2
  }
}
 800598c:	4618      	mov	r0, r3
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr

08005998 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b082      	sub	sp, #8
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059ae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	2220      	movs	r2, #32
 80059b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80059b8:	6878      	ldr	r0, [r7, #4]
 80059ba:	f7ff fe73 	bl	80056a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b08c      	sub	sp, #48	@ 0x30
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	2b22      	cmp	r3, #34	@ 0x22
 80059da:	f040 80ae 	bne.w	8005b3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	689b      	ldr	r3, [r3, #8]
 80059e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059e6:	d117      	bne.n	8005a18 <UART_Receive_IT+0x50>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d113      	bne.n	8005a18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80059f0:	2300      	movs	r3, #0
 80059f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	685b      	ldr	r3, [r3, #4]
 8005a00:	b29b      	uxth	r3, r3
 8005a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a10:	1c9a      	adds	r2, r3, #2
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	629a      	str	r2, [r3, #40]	@ 0x28
 8005a16:	e026      	b.n	8005a66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a2a:	d007      	beq.n	8005a3c <UART_Receive_IT+0x74>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	689b      	ldr	r3, [r3, #8]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <UART_Receive_IT+0x82>
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	691b      	ldr	r3, [r3, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d106      	bne.n	8005a4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	b2da      	uxtb	r2, r3
 8005a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a46:	701a      	strb	r2, [r3, #0]
 8005a48:	e008      	b.n	8005a5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a60:	1c5a      	adds	r2, r3, #1
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	4619      	mov	r1, r3
 8005a74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d15d      	bne.n	8005b36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0220 	bic.w	r2, r2, #32
 8005a88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005a98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	695a      	ldr	r2, [r3, #20]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f022 0201 	bic.w	r2, r2, #1
 8005aa8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d135      	bne.n	8005b2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	330c      	adds	r3, #12
 8005acc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	e853 3f00 	ldrex	r3, [r3]
 8005ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ad6:	693b      	ldr	r3, [r7, #16]
 8005ad8:	f023 0310 	bic.w	r3, r3, #16
 8005adc:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	330c      	adds	r3, #12
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ae6:	623a      	str	r2, [r7, #32]
 8005ae8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aea:	69f9      	ldr	r1, [r7, #28]
 8005aec:	6a3a      	ldr	r2, [r7, #32]
 8005aee:	e841 2300 	strex	r3, r2, [r1]
 8005af2:	61bb      	str	r3, [r7, #24]
   return(result);
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1e5      	bne.n	8005ac6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d10a      	bne.n	8005b1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005b08:	2300      	movs	r3, #0
 8005b0a:	60fb      	str	r3, [r7, #12]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	685b      	ldr	r3, [r3, #4]
 8005b1a:	60fb      	str	r3, [r7, #12]
 8005b1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7ff fdd1 	bl	80056cc <HAL_UARTEx_RxEventCallback>
 8005b2a:	e002      	b.n	8005b32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7fb fc1f 	bl	8001370 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005b32:	2300      	movs	r3, #0
 8005b34:	e002      	b.n	8005b3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005b36:	2300      	movs	r3, #0
 8005b38:	e000      	b.n	8005b3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005b3a:	2302      	movs	r3, #2
  }
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3730      	adds	r7, #48	@ 0x30
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b48:	b0c0      	sub	sp, #256	@ 0x100
 8005b4a:	af00      	add	r7, sp, #0
 8005b4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	691b      	ldr	r3, [r3, #16]
 8005b58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b60:	68d9      	ldr	r1, [r3, #12]
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	ea40 0301 	orr.w	r3, r0, r1
 8005b6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b72:	689a      	ldr	r2, [r3, #8]
 8005b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	431a      	orrs	r2, r3
 8005b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	68db      	ldr	r3, [r3, #12]
 8005b98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b9c:	f021 010c 	bic.w	r1, r1, #12
 8005ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba4:	681a      	ldr	r2, [r3, #0]
 8005ba6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005baa:	430b      	orrs	r3, r1
 8005bac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	695b      	ldr	r3, [r3, #20]
 8005bb6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbe:	6999      	ldr	r1, [r3, #24]
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	ea40 0301 	orr.w	r3, r0, r1
 8005bca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8005e10 <UART_SetConfig+0x2cc>)
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d005      	beq.n	8005be4 <UART_SetConfig+0xa0>
 8005bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bdc:	681a      	ldr	r2, [r3, #0]
 8005bde:	4b8d      	ldr	r3, [pc, #564]	@ (8005e14 <UART_SetConfig+0x2d0>)
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d104      	bne.n	8005bee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005be4:	f7fe f96e 	bl	8003ec4 <HAL_RCC_GetPCLK2Freq>
 8005be8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005bec:	e003      	b.n	8005bf6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005bee:	f7fe f955 	bl	8003e9c <HAL_RCC_GetPCLK1Freq>
 8005bf2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfa:	69db      	ldr	r3, [r3, #28]
 8005bfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c00:	f040 810c 	bne.w	8005e1c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c08:	2200      	movs	r2, #0
 8005c0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c16:	4622      	mov	r2, r4
 8005c18:	462b      	mov	r3, r5
 8005c1a:	1891      	adds	r1, r2, r2
 8005c1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c1e:	415b      	adcs	r3, r3
 8005c20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c26:	4621      	mov	r1, r4
 8005c28:	eb12 0801 	adds.w	r8, r2, r1
 8005c2c:	4629      	mov	r1, r5
 8005c2e:	eb43 0901 	adc.w	r9, r3, r1
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	f04f 0300 	mov.w	r3, #0
 8005c3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c46:	4690      	mov	r8, r2
 8005c48:	4699      	mov	r9, r3
 8005c4a:	4623      	mov	r3, r4
 8005c4c:	eb18 0303 	adds.w	r3, r8, r3
 8005c50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c54:	462b      	mov	r3, r5
 8005c56:	eb49 0303 	adc.w	r3, r9, r3
 8005c5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c72:	460b      	mov	r3, r1
 8005c74:	18db      	adds	r3, r3, r3
 8005c76:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c78:	4613      	mov	r3, r2
 8005c7a:	eb42 0303 	adc.w	r3, r2, r3
 8005c7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c88:	f7fa fffe 	bl	8000c88 <__aeabi_uldivmod>
 8005c8c:	4602      	mov	r2, r0
 8005c8e:	460b      	mov	r3, r1
 8005c90:	4b61      	ldr	r3, [pc, #388]	@ (8005e18 <UART_SetConfig+0x2d4>)
 8005c92:	fba3 2302 	umull	r2, r3, r3, r2
 8005c96:	095b      	lsrs	r3, r3, #5
 8005c98:	011c      	lsls	r4, r3, #4
 8005c9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005ca4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005ca8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005cac:	4642      	mov	r2, r8
 8005cae:	464b      	mov	r3, r9
 8005cb0:	1891      	adds	r1, r2, r2
 8005cb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005cb4:	415b      	adcs	r3, r3
 8005cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	eb12 0a01 	adds.w	sl, r2, r1
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	eb43 0b01 	adc.w	fp, r3, r1
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cd4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005cd8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cdc:	4692      	mov	sl, r2
 8005cde:	469b      	mov	fp, r3
 8005ce0:	4643      	mov	r3, r8
 8005ce2:	eb1a 0303 	adds.w	r3, sl, r3
 8005ce6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cea:	464b      	mov	r3, r9
 8005cec:	eb4b 0303 	adc.w	r3, fp, r3
 8005cf0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d08:	460b      	mov	r3, r1
 8005d0a:	18db      	adds	r3, r3, r3
 8005d0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d0e:	4613      	mov	r3, r2
 8005d10:	eb42 0303 	adc.w	r3, r2, r3
 8005d14:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d1e:	f7fa ffb3 	bl	8000c88 <__aeabi_uldivmod>
 8005d22:	4602      	mov	r2, r0
 8005d24:	460b      	mov	r3, r1
 8005d26:	4611      	mov	r1, r2
 8005d28:	4b3b      	ldr	r3, [pc, #236]	@ (8005e18 <UART_SetConfig+0x2d4>)
 8005d2a:	fba3 2301 	umull	r2, r3, r3, r1
 8005d2e:	095b      	lsrs	r3, r3, #5
 8005d30:	2264      	movs	r2, #100	@ 0x64
 8005d32:	fb02 f303 	mul.w	r3, r2, r3
 8005d36:	1acb      	subs	r3, r1, r3
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d3e:	4b36      	ldr	r3, [pc, #216]	@ (8005e18 <UART_SetConfig+0x2d4>)
 8005d40:	fba3 2302 	umull	r2, r3, r3, r2
 8005d44:	095b      	lsrs	r3, r3, #5
 8005d46:	005b      	lsls	r3, r3, #1
 8005d48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d4c:	441c      	add	r4, r3
 8005d4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d60:	4642      	mov	r2, r8
 8005d62:	464b      	mov	r3, r9
 8005d64:	1891      	adds	r1, r2, r2
 8005d66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d68:	415b      	adcs	r3, r3
 8005d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d70:	4641      	mov	r1, r8
 8005d72:	1851      	adds	r1, r2, r1
 8005d74:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d76:	4649      	mov	r1, r9
 8005d78:	414b      	adcs	r3, r1
 8005d7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d88:	4659      	mov	r1, fp
 8005d8a:	00cb      	lsls	r3, r1, #3
 8005d8c:	4651      	mov	r1, sl
 8005d8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d92:	4651      	mov	r1, sl
 8005d94:	00ca      	lsls	r2, r1, #3
 8005d96:	4610      	mov	r0, r2
 8005d98:	4619      	mov	r1, r3
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	4642      	mov	r2, r8
 8005d9e:	189b      	adds	r3, r3, r2
 8005da0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005da4:	464b      	mov	r3, r9
 8005da6:	460a      	mov	r2, r1
 8005da8:	eb42 0303 	adc.w	r3, r2, r3
 8005dac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005dbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005dc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	18db      	adds	r3, r3, r3
 8005dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dca:	4613      	mov	r3, r2
 8005dcc:	eb42 0303 	adc.w	r3, r2, r3
 8005dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005dda:	f7fa ff55 	bl	8000c88 <__aeabi_uldivmod>
 8005dde:	4602      	mov	r2, r0
 8005de0:	460b      	mov	r3, r1
 8005de2:	4b0d      	ldr	r3, [pc, #52]	@ (8005e18 <UART_SetConfig+0x2d4>)
 8005de4:	fba3 1302 	umull	r1, r3, r3, r2
 8005de8:	095b      	lsrs	r3, r3, #5
 8005dea:	2164      	movs	r1, #100	@ 0x64
 8005dec:	fb01 f303 	mul.w	r3, r1, r3
 8005df0:	1ad3      	subs	r3, r2, r3
 8005df2:	00db      	lsls	r3, r3, #3
 8005df4:	3332      	adds	r3, #50	@ 0x32
 8005df6:	4a08      	ldr	r2, [pc, #32]	@ (8005e18 <UART_SetConfig+0x2d4>)
 8005df8:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfc:	095b      	lsrs	r3, r3, #5
 8005dfe:	f003 0207 	and.w	r2, r3, #7
 8005e02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4422      	add	r2, r4
 8005e0a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e0c:	e106      	b.n	800601c <UART_SetConfig+0x4d8>
 8005e0e:	bf00      	nop
 8005e10:	40011000 	.word	0x40011000
 8005e14:	40011400 	.word	0x40011400
 8005e18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e20:	2200      	movs	r2, #0
 8005e22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e2e:	4642      	mov	r2, r8
 8005e30:	464b      	mov	r3, r9
 8005e32:	1891      	adds	r1, r2, r2
 8005e34:	6239      	str	r1, [r7, #32]
 8005e36:	415b      	adcs	r3, r3
 8005e38:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e3e:	4641      	mov	r1, r8
 8005e40:	1854      	adds	r4, r2, r1
 8005e42:	4649      	mov	r1, r9
 8005e44:	eb43 0501 	adc.w	r5, r3, r1
 8005e48:	f04f 0200 	mov.w	r2, #0
 8005e4c:	f04f 0300 	mov.w	r3, #0
 8005e50:	00eb      	lsls	r3, r5, #3
 8005e52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e56:	00e2      	lsls	r2, r4, #3
 8005e58:	4614      	mov	r4, r2
 8005e5a:	461d      	mov	r5, r3
 8005e5c:	4643      	mov	r3, r8
 8005e5e:	18e3      	adds	r3, r4, r3
 8005e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e64:	464b      	mov	r3, r9
 8005e66:	eb45 0303 	adc.w	r3, r5, r3
 8005e6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e72:	685b      	ldr	r3, [r3, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e7e:	f04f 0200 	mov.w	r2, #0
 8005e82:	f04f 0300 	mov.w	r3, #0
 8005e86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e8a:	4629      	mov	r1, r5
 8005e8c:	008b      	lsls	r3, r1, #2
 8005e8e:	4621      	mov	r1, r4
 8005e90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e94:	4621      	mov	r1, r4
 8005e96:	008a      	lsls	r2, r1, #2
 8005e98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e9c:	f7fa fef4 	bl	8000c88 <__aeabi_uldivmod>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	460b      	mov	r3, r1
 8005ea4:	4b60      	ldr	r3, [pc, #384]	@ (8006028 <UART_SetConfig+0x4e4>)
 8005ea6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	011c      	lsls	r4, r3, #4
 8005eae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005eb8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ebc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005ec0:	4642      	mov	r2, r8
 8005ec2:	464b      	mov	r3, r9
 8005ec4:	1891      	adds	r1, r2, r2
 8005ec6:	61b9      	str	r1, [r7, #24]
 8005ec8:	415b      	adcs	r3, r3
 8005eca:	61fb      	str	r3, [r7, #28]
 8005ecc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ed0:	4641      	mov	r1, r8
 8005ed2:	1851      	adds	r1, r2, r1
 8005ed4:	6139      	str	r1, [r7, #16]
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	414b      	adcs	r3, r1
 8005eda:	617b      	str	r3, [r7, #20]
 8005edc:	f04f 0200 	mov.w	r2, #0
 8005ee0:	f04f 0300 	mov.w	r3, #0
 8005ee4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ee8:	4659      	mov	r1, fp
 8005eea:	00cb      	lsls	r3, r1, #3
 8005eec:	4651      	mov	r1, sl
 8005eee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ef2:	4651      	mov	r1, sl
 8005ef4:	00ca      	lsls	r2, r1, #3
 8005ef6:	4610      	mov	r0, r2
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4603      	mov	r3, r0
 8005efc:	4642      	mov	r2, r8
 8005efe:	189b      	adds	r3, r3, r2
 8005f00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f04:	464b      	mov	r3, r9
 8005f06:	460a      	mov	r2, r1
 8005f08:	eb42 0303 	adc.w	r3, r2, r3
 8005f0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f14:	685b      	ldr	r3, [r3, #4]
 8005f16:	2200      	movs	r2, #0
 8005f18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f1c:	f04f 0200 	mov.w	r2, #0
 8005f20:	f04f 0300 	mov.w	r3, #0
 8005f24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f28:	4649      	mov	r1, r9
 8005f2a:	008b      	lsls	r3, r1, #2
 8005f2c:	4641      	mov	r1, r8
 8005f2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f32:	4641      	mov	r1, r8
 8005f34:	008a      	lsls	r2, r1, #2
 8005f36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f3a:	f7fa fea5 	bl	8000c88 <__aeabi_uldivmod>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	460b      	mov	r3, r1
 8005f42:	4611      	mov	r1, r2
 8005f44:	4b38      	ldr	r3, [pc, #224]	@ (8006028 <UART_SetConfig+0x4e4>)
 8005f46:	fba3 2301 	umull	r2, r3, r3, r1
 8005f4a:	095b      	lsrs	r3, r3, #5
 8005f4c:	2264      	movs	r2, #100	@ 0x64
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	1acb      	subs	r3, r1, r3
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	3332      	adds	r3, #50	@ 0x32
 8005f58:	4a33      	ldr	r2, [pc, #204]	@ (8006028 <UART_SetConfig+0x4e4>)
 8005f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8005f5e:	095b      	lsrs	r3, r3, #5
 8005f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f64:	441c      	add	r4, r3
 8005f66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f74:	4642      	mov	r2, r8
 8005f76:	464b      	mov	r3, r9
 8005f78:	1891      	adds	r1, r2, r2
 8005f7a:	60b9      	str	r1, [r7, #8]
 8005f7c:	415b      	adcs	r3, r3
 8005f7e:	60fb      	str	r3, [r7, #12]
 8005f80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f84:	4641      	mov	r1, r8
 8005f86:	1851      	adds	r1, r2, r1
 8005f88:	6039      	str	r1, [r7, #0]
 8005f8a:	4649      	mov	r1, r9
 8005f8c:	414b      	adcs	r3, r1
 8005f8e:	607b      	str	r3, [r7, #4]
 8005f90:	f04f 0200 	mov.w	r2, #0
 8005f94:	f04f 0300 	mov.w	r3, #0
 8005f98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	00cb      	lsls	r3, r1, #3
 8005fa0:	4651      	mov	r1, sl
 8005fa2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fa6:	4651      	mov	r1, sl
 8005fa8:	00ca      	lsls	r2, r1, #3
 8005faa:	4610      	mov	r0, r2
 8005fac:	4619      	mov	r1, r3
 8005fae:	4603      	mov	r3, r0
 8005fb0:	4642      	mov	r2, r8
 8005fb2:	189b      	adds	r3, r3, r2
 8005fb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005fb6:	464b      	mov	r3, r9
 8005fb8:	460a      	mov	r2, r1
 8005fba:	eb42 0303 	adc.w	r3, r2, r3
 8005fbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fca:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fcc:	f04f 0200 	mov.w	r2, #0
 8005fd0:	f04f 0300 	mov.w	r3, #0
 8005fd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005fd8:	4649      	mov	r1, r9
 8005fda:	008b      	lsls	r3, r1, #2
 8005fdc:	4641      	mov	r1, r8
 8005fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fe2:	4641      	mov	r1, r8
 8005fe4:	008a      	lsls	r2, r1, #2
 8005fe6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fea:	f7fa fe4d 	bl	8000c88 <__aeabi_uldivmod>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8006028 <UART_SetConfig+0x4e4>)
 8005ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ff8:	095b      	lsrs	r3, r3, #5
 8005ffa:	2164      	movs	r1, #100	@ 0x64
 8005ffc:	fb01 f303 	mul.w	r3, r1, r3
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	3332      	adds	r3, #50	@ 0x32
 8006006:	4a08      	ldr	r2, [pc, #32]	@ (8006028 <UART_SetConfig+0x4e4>)
 8006008:	fba2 2303 	umull	r2, r3, r2, r3
 800600c:	095b      	lsrs	r3, r3, #5
 800600e:	f003 020f 	and.w	r2, r3, #15
 8006012:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4422      	add	r2, r4
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006022:	46bd      	mov	sp, r7
 8006024:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006028:	51eb851f 	.word	0x51eb851f

0800602c <cosf>:
 800602c:	ee10 3a10 	vmov	r3, s0
 8006030:	b507      	push	{r0, r1, r2, lr}
 8006032:	4a1e      	ldr	r2, [pc, #120]	@ (80060ac <cosf+0x80>)
 8006034:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006038:	4293      	cmp	r3, r2
 800603a:	d806      	bhi.n	800604a <cosf+0x1e>
 800603c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 80060b0 <cosf+0x84>
 8006040:	b003      	add	sp, #12
 8006042:	f85d eb04 	ldr.w	lr, [sp], #4
 8006046:	f000 b87b 	b.w	8006140 <__kernel_cosf>
 800604a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800604e:	d304      	bcc.n	800605a <cosf+0x2e>
 8006050:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006054:	b003      	add	sp, #12
 8006056:	f85d fb04 	ldr.w	pc, [sp], #4
 800605a:	4668      	mov	r0, sp
 800605c:	f000 f910 	bl	8006280 <__ieee754_rem_pio2f>
 8006060:	f000 0003 	and.w	r0, r0, #3
 8006064:	2801      	cmp	r0, #1
 8006066:	d009      	beq.n	800607c <cosf+0x50>
 8006068:	2802      	cmp	r0, #2
 800606a:	d010      	beq.n	800608e <cosf+0x62>
 800606c:	b9b0      	cbnz	r0, 800609c <cosf+0x70>
 800606e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006072:	ed9d 0a00 	vldr	s0, [sp]
 8006076:	f000 f863 	bl	8006140 <__kernel_cosf>
 800607a:	e7eb      	b.n	8006054 <cosf+0x28>
 800607c:	eddd 0a01 	vldr	s1, [sp, #4]
 8006080:	ed9d 0a00 	vldr	s0, [sp]
 8006084:	f000 f8b4 	bl	80061f0 <__kernel_sinf>
 8006088:	eeb1 0a40 	vneg.f32	s0, s0
 800608c:	e7e2      	b.n	8006054 <cosf+0x28>
 800608e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006092:	ed9d 0a00 	vldr	s0, [sp]
 8006096:	f000 f853 	bl	8006140 <__kernel_cosf>
 800609a:	e7f5      	b.n	8006088 <cosf+0x5c>
 800609c:	eddd 0a01 	vldr	s1, [sp, #4]
 80060a0:	ed9d 0a00 	vldr	s0, [sp]
 80060a4:	2001      	movs	r0, #1
 80060a6:	f000 f8a3 	bl	80061f0 <__kernel_sinf>
 80060aa:	e7d3      	b.n	8006054 <cosf+0x28>
 80060ac:	3f490fd8 	.word	0x3f490fd8
 80060b0:	00000000 	.word	0x00000000

080060b4 <sinf>:
 80060b4:	ee10 3a10 	vmov	r3, s0
 80060b8:	b507      	push	{r0, r1, r2, lr}
 80060ba:	4a1f      	ldr	r2, [pc, #124]	@ (8006138 <sinf+0x84>)
 80060bc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d807      	bhi.n	80060d4 <sinf+0x20>
 80060c4:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800613c <sinf+0x88>
 80060c8:	2000      	movs	r0, #0
 80060ca:	b003      	add	sp, #12
 80060cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80060d0:	f000 b88e 	b.w	80061f0 <__kernel_sinf>
 80060d4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80060d8:	d304      	bcc.n	80060e4 <sinf+0x30>
 80060da:	ee30 0a40 	vsub.f32	s0, s0, s0
 80060de:	b003      	add	sp, #12
 80060e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80060e4:	4668      	mov	r0, sp
 80060e6:	f000 f8cb 	bl	8006280 <__ieee754_rem_pio2f>
 80060ea:	f000 0003 	and.w	r0, r0, #3
 80060ee:	2801      	cmp	r0, #1
 80060f0:	d00a      	beq.n	8006108 <sinf+0x54>
 80060f2:	2802      	cmp	r0, #2
 80060f4:	d00f      	beq.n	8006116 <sinf+0x62>
 80060f6:	b9c0      	cbnz	r0, 800612a <sinf+0x76>
 80060f8:	eddd 0a01 	vldr	s1, [sp, #4]
 80060fc:	ed9d 0a00 	vldr	s0, [sp]
 8006100:	2001      	movs	r0, #1
 8006102:	f000 f875 	bl	80061f0 <__kernel_sinf>
 8006106:	e7ea      	b.n	80060de <sinf+0x2a>
 8006108:	eddd 0a01 	vldr	s1, [sp, #4]
 800610c:	ed9d 0a00 	vldr	s0, [sp]
 8006110:	f000 f816 	bl	8006140 <__kernel_cosf>
 8006114:	e7e3      	b.n	80060de <sinf+0x2a>
 8006116:	eddd 0a01 	vldr	s1, [sp, #4]
 800611a:	ed9d 0a00 	vldr	s0, [sp]
 800611e:	2001      	movs	r0, #1
 8006120:	f000 f866 	bl	80061f0 <__kernel_sinf>
 8006124:	eeb1 0a40 	vneg.f32	s0, s0
 8006128:	e7d9      	b.n	80060de <sinf+0x2a>
 800612a:	eddd 0a01 	vldr	s1, [sp, #4]
 800612e:	ed9d 0a00 	vldr	s0, [sp]
 8006132:	f000 f805 	bl	8006140 <__kernel_cosf>
 8006136:	e7f5      	b.n	8006124 <sinf+0x70>
 8006138:	3f490fd8 	.word	0x3f490fd8
 800613c:	00000000 	.word	0x00000000

08006140 <__kernel_cosf>:
 8006140:	ee10 3a10 	vmov	r3, s0
 8006144:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006148:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800614c:	eef0 6a40 	vmov.f32	s13, s0
 8006150:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006154:	d204      	bcs.n	8006160 <__kernel_cosf+0x20>
 8006156:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800615a:	ee17 2a90 	vmov	r2, s15
 800615e:	b342      	cbz	r2, 80061b2 <__kernel_cosf+0x72>
 8006160:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8006164:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 80061d0 <__kernel_cosf+0x90>
 8006168:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 80061d4 <__kernel_cosf+0x94>
 800616c:	4a1a      	ldr	r2, [pc, #104]	@ (80061d8 <__kernel_cosf+0x98>)
 800616e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006172:	4293      	cmp	r3, r2
 8006174:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80061dc <__kernel_cosf+0x9c>
 8006178:	eee6 7a07 	vfma.f32	s15, s12, s14
 800617c:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 80061e0 <__kernel_cosf+0xa0>
 8006180:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006184:	eddf 7a17 	vldr	s15, [pc, #92]	@ 80061e4 <__kernel_cosf+0xa4>
 8006188:	eee6 7a07 	vfma.f32	s15, s12, s14
 800618c:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 80061e8 <__kernel_cosf+0xa8>
 8006190:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006194:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 8006198:	ee26 6a07 	vmul.f32	s12, s12, s14
 800619c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80061a0:	eee7 0a06 	vfma.f32	s1, s14, s12
 80061a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061a8:	d804      	bhi.n	80061b4 <__kernel_cosf+0x74>
 80061aa:	ee77 7ae0 	vsub.f32	s15, s15, s1
 80061ae:	ee30 0a67 	vsub.f32	s0, s0, s15
 80061b2:	4770      	bx	lr
 80061b4:	4a0d      	ldr	r2, [pc, #52]	@ (80061ec <__kernel_cosf+0xac>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	bf9a      	itte	ls
 80061ba:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 80061be:	ee07 3a10 	vmovls	s14, r3
 80061c2:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 80061c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 80061ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061ce:	e7ec      	b.n	80061aa <__kernel_cosf+0x6a>
 80061d0:	ad47d74e 	.word	0xad47d74e
 80061d4:	310f74f6 	.word	0x310f74f6
 80061d8:	3e999999 	.word	0x3e999999
 80061dc:	b493f27c 	.word	0xb493f27c
 80061e0:	37d00d01 	.word	0x37d00d01
 80061e4:	bab60b61 	.word	0xbab60b61
 80061e8:	3d2aaaab 	.word	0x3d2aaaab
 80061ec:	3f480000 	.word	0x3f480000

080061f0 <__kernel_sinf>:
 80061f0:	ee10 3a10 	vmov	r3, s0
 80061f4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80061f8:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 80061fc:	d204      	bcs.n	8006208 <__kernel_sinf+0x18>
 80061fe:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006202:	ee17 3a90 	vmov	r3, s15
 8006206:	b35b      	cbz	r3, 8006260 <__kernel_sinf+0x70>
 8006208:	ee20 7a00 	vmul.f32	s14, s0, s0
 800620c:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8006264 <__kernel_sinf+0x74>
 8006210:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 8006268 <__kernel_sinf+0x78>
 8006214:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006218:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800626c <__kernel_sinf+0x7c>
 800621c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006220:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 8006270 <__kernel_sinf+0x80>
 8006224:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006228:	eddf 7a12 	vldr	s15, [pc, #72]	@ 8006274 <__kernel_sinf+0x84>
 800622c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006230:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006234:	b930      	cbnz	r0, 8006244 <__kernel_sinf+0x54>
 8006236:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 8006278 <__kernel_sinf+0x88>
 800623a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800623e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006242:	4770      	bx	lr
 8006244:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006248:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800624c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006250:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006254:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800627c <__kernel_sinf+0x8c>
 8006258:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800625c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006260:	4770      	bx	lr
 8006262:	bf00      	nop
 8006264:	2f2ec9d3 	.word	0x2f2ec9d3
 8006268:	b2d72f34 	.word	0xb2d72f34
 800626c:	3638ef1b 	.word	0x3638ef1b
 8006270:	b9500d01 	.word	0xb9500d01
 8006274:	3c088889 	.word	0x3c088889
 8006278:	be2aaaab 	.word	0xbe2aaaab
 800627c:	3e2aaaab 	.word	0x3e2aaaab

08006280 <__ieee754_rem_pio2f>:
 8006280:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006282:	ee10 6a10 	vmov	r6, s0
 8006286:	4b88      	ldr	r3, [pc, #544]	@ (80064a8 <__ieee754_rem_pio2f+0x228>)
 8006288:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800628c:	429d      	cmp	r5, r3
 800628e:	b087      	sub	sp, #28
 8006290:	4604      	mov	r4, r0
 8006292:	d805      	bhi.n	80062a0 <__ieee754_rem_pio2f+0x20>
 8006294:	2300      	movs	r3, #0
 8006296:	ed80 0a00 	vstr	s0, [r0]
 800629a:	6043      	str	r3, [r0, #4]
 800629c:	2000      	movs	r0, #0
 800629e:	e022      	b.n	80062e6 <__ieee754_rem_pio2f+0x66>
 80062a0:	4b82      	ldr	r3, [pc, #520]	@ (80064ac <__ieee754_rem_pio2f+0x22c>)
 80062a2:	429d      	cmp	r5, r3
 80062a4:	d83a      	bhi.n	800631c <__ieee754_rem_pio2f+0x9c>
 80062a6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 80062aa:	2e00      	cmp	r6, #0
 80062ac:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80064b0 <__ieee754_rem_pio2f+0x230>
 80062b0:	4a80      	ldr	r2, [pc, #512]	@ (80064b4 <__ieee754_rem_pio2f+0x234>)
 80062b2:	f023 030f 	bic.w	r3, r3, #15
 80062b6:	dd18      	ble.n	80062ea <__ieee754_rem_pio2f+0x6a>
 80062b8:	4293      	cmp	r3, r2
 80062ba:	ee70 7a47 	vsub.f32	s15, s0, s14
 80062be:	bf09      	itett	eq
 80062c0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80064b8 <__ieee754_rem_pio2f+0x238>
 80062c4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80064bc <__ieee754_rem_pio2f+0x23c>
 80062c8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80064c0 <__ieee754_rem_pio2f+0x240>
 80062cc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 80062d0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 80062d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80062d8:	ed80 7a00 	vstr	s14, [r0]
 80062dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80062e0:	edc0 7a01 	vstr	s15, [r0, #4]
 80062e4:	2001      	movs	r0, #1
 80062e6:	b007      	add	sp, #28
 80062e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ea:	4293      	cmp	r3, r2
 80062ec:	ee70 7a07 	vadd.f32	s15, s0, s14
 80062f0:	bf09      	itett	eq
 80062f2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80064b8 <__ieee754_rem_pio2f+0x238>
 80062f6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80064bc <__ieee754_rem_pio2f+0x23c>
 80062fa:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80064c0 <__ieee754_rem_pio2f+0x240>
 80062fe:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8006302:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800630a:	ed80 7a00 	vstr	s14, [r0]
 800630e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006312:	edc0 7a01 	vstr	s15, [r0, #4]
 8006316:	f04f 30ff 	mov.w	r0, #4294967295
 800631a:	e7e4      	b.n	80062e6 <__ieee754_rem_pio2f+0x66>
 800631c:	4b69      	ldr	r3, [pc, #420]	@ (80064c4 <__ieee754_rem_pio2f+0x244>)
 800631e:	429d      	cmp	r5, r3
 8006320:	d873      	bhi.n	800640a <__ieee754_rem_pio2f+0x18a>
 8006322:	f000 f8dd 	bl	80064e0 <fabsf>
 8006326:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80064c8 <__ieee754_rem_pio2f+0x248>
 800632a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800632e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006332:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006336:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800633a:	ee17 0a90 	vmov	r0, s15
 800633e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80064b0 <__ieee754_rem_pio2f+0x230>
 8006342:	eea7 0a67 	vfms.f32	s0, s14, s15
 8006346:	281f      	cmp	r0, #31
 8006348:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80064bc <__ieee754_rem_pio2f+0x23c>
 800634c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006350:	eeb1 6a47 	vneg.f32	s12, s14
 8006354:	ee70 6a67 	vsub.f32	s13, s0, s15
 8006358:	ee16 1a90 	vmov	r1, s13
 800635c:	dc09      	bgt.n	8006372 <__ieee754_rem_pio2f+0xf2>
 800635e:	4a5b      	ldr	r2, [pc, #364]	@ (80064cc <__ieee754_rem_pio2f+0x24c>)
 8006360:	1e47      	subs	r7, r0, #1
 8006362:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 8006366:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800636a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800636e:	4293      	cmp	r3, r2
 8006370:	d107      	bne.n	8006382 <__ieee754_rem_pio2f+0x102>
 8006372:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 8006376:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800637a:	2a08      	cmp	r2, #8
 800637c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8006380:	dc14      	bgt.n	80063ac <__ieee754_rem_pio2f+0x12c>
 8006382:	6021      	str	r1, [r4, #0]
 8006384:	ed94 7a00 	vldr	s14, [r4]
 8006388:	ee30 0a47 	vsub.f32	s0, s0, s14
 800638c:	2e00      	cmp	r6, #0
 800638e:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006392:	ed84 0a01 	vstr	s0, [r4, #4]
 8006396:	daa6      	bge.n	80062e6 <__ieee754_rem_pio2f+0x66>
 8006398:	eeb1 7a47 	vneg.f32	s14, s14
 800639c:	eeb1 0a40 	vneg.f32	s0, s0
 80063a0:	ed84 7a00 	vstr	s14, [r4]
 80063a4:	ed84 0a01 	vstr	s0, [r4, #4]
 80063a8:	4240      	negs	r0, r0
 80063aa:	e79c      	b.n	80062e6 <__ieee754_rem_pio2f+0x66>
 80063ac:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80064b8 <__ieee754_rem_pio2f+0x238>
 80063b0:	eef0 6a40 	vmov.f32	s13, s0
 80063b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 80063b8:	ee70 7a66 	vsub.f32	s15, s0, s13
 80063bc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80063c0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80064c0 <__ieee754_rem_pio2f+0x240>
 80063c4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 80063c8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 80063cc:	ee15 2a90 	vmov	r2, s11
 80063d0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80063d4:	1a5b      	subs	r3, r3, r1
 80063d6:	2b19      	cmp	r3, #25
 80063d8:	dc04      	bgt.n	80063e4 <__ieee754_rem_pio2f+0x164>
 80063da:	edc4 5a00 	vstr	s11, [r4]
 80063de:	eeb0 0a66 	vmov.f32	s0, s13
 80063e2:	e7cf      	b.n	8006384 <__ieee754_rem_pio2f+0x104>
 80063e4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80064d0 <__ieee754_rem_pio2f+0x250>
 80063e8:	eeb0 0a66 	vmov.f32	s0, s13
 80063ec:	eea6 0a25 	vfma.f32	s0, s12, s11
 80063f0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 80063f4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80064d4 <__ieee754_rem_pio2f+0x254>
 80063f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 80063fc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8006400:	ee30 7a67 	vsub.f32	s14, s0, s15
 8006404:	ed84 7a00 	vstr	s14, [r4]
 8006408:	e7bc      	b.n	8006384 <__ieee754_rem_pio2f+0x104>
 800640a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800640e:	d306      	bcc.n	800641e <__ieee754_rem_pio2f+0x19e>
 8006410:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006414:	edc0 7a01 	vstr	s15, [r0, #4]
 8006418:	edc0 7a00 	vstr	s15, [r0]
 800641c:	e73e      	b.n	800629c <__ieee754_rem_pio2f+0x1c>
 800641e:	15ea      	asrs	r2, r5, #23
 8006420:	3a86      	subs	r2, #134	@ 0x86
 8006422:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8006426:	ee07 3a90 	vmov	s15, r3
 800642a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800642e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80064d8 <__ieee754_rem_pio2f+0x258>
 8006432:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8006436:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800643a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800643e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006442:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8006446:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800644a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800644e:	ed8d 7a04 	vstr	s14, [sp, #16]
 8006452:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006456:	eef5 7a40 	vcmp.f32	s15, #0.0
 800645a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645e:	edcd 7a05 	vstr	s15, [sp, #20]
 8006462:	d11e      	bne.n	80064a2 <__ieee754_rem_pio2f+0x222>
 8006464:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8006468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646c:	bf0c      	ite	eq
 800646e:	2301      	moveq	r3, #1
 8006470:	2302      	movne	r3, #2
 8006472:	491a      	ldr	r1, [pc, #104]	@ (80064dc <__ieee754_rem_pio2f+0x25c>)
 8006474:	9101      	str	r1, [sp, #4]
 8006476:	2102      	movs	r1, #2
 8006478:	9100      	str	r1, [sp, #0]
 800647a:	a803      	add	r0, sp, #12
 800647c:	4621      	mov	r1, r4
 800647e:	f000 f837 	bl	80064f0 <__kernel_rem_pio2f>
 8006482:	2e00      	cmp	r6, #0
 8006484:	f6bf af2f 	bge.w	80062e6 <__ieee754_rem_pio2f+0x66>
 8006488:	edd4 7a00 	vldr	s15, [r4]
 800648c:	eef1 7a67 	vneg.f32	s15, s15
 8006490:	edc4 7a00 	vstr	s15, [r4]
 8006494:	edd4 7a01 	vldr	s15, [r4, #4]
 8006498:	eef1 7a67 	vneg.f32	s15, s15
 800649c:	edc4 7a01 	vstr	s15, [r4, #4]
 80064a0:	e782      	b.n	80063a8 <__ieee754_rem_pio2f+0x128>
 80064a2:	2303      	movs	r3, #3
 80064a4:	e7e5      	b.n	8006472 <__ieee754_rem_pio2f+0x1f2>
 80064a6:	bf00      	nop
 80064a8:	3f490fd8 	.word	0x3f490fd8
 80064ac:	4016cbe3 	.word	0x4016cbe3
 80064b0:	3fc90f80 	.word	0x3fc90f80
 80064b4:	3fc90fd0 	.word	0x3fc90fd0
 80064b8:	37354400 	.word	0x37354400
 80064bc:	37354443 	.word	0x37354443
 80064c0:	2e85a308 	.word	0x2e85a308
 80064c4:	43490f80 	.word	0x43490f80
 80064c8:	3f22f984 	.word	0x3f22f984
 80064cc:	0800b358 	.word	0x0800b358
 80064d0:	2e85a300 	.word	0x2e85a300
 80064d4:	248d3132 	.word	0x248d3132
 80064d8:	43800000 	.word	0x43800000
 80064dc:	0800b3d8 	.word	0x0800b3d8

080064e0 <fabsf>:
 80064e0:	ee10 3a10 	vmov	r3, s0
 80064e4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064e8:	ee00 3a10 	vmov	s0, r3
 80064ec:	4770      	bx	lr
	...

080064f0 <__kernel_rem_pio2f>:
 80064f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f4:	ed2d 8b04 	vpush	{d8-d9}
 80064f8:	b0d9      	sub	sp, #356	@ 0x164
 80064fa:	4690      	mov	r8, r2
 80064fc:	9001      	str	r0, [sp, #4]
 80064fe:	4ab9      	ldr	r2, [pc, #740]	@ (80067e4 <__kernel_rem_pio2f+0x2f4>)
 8006500:	9866      	ldr	r0, [sp, #408]	@ 0x198
 8006502:	f118 0f04 	cmn.w	r8, #4
 8006506:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800650a:	460f      	mov	r7, r1
 800650c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006510:	db27      	blt.n	8006562 <__kernel_rem_pio2f+0x72>
 8006512:	f1b8 0203 	subs.w	r2, r8, #3
 8006516:	bf48      	it	mi
 8006518:	f108 0204 	addmi.w	r2, r8, #4
 800651c:	10d2      	asrs	r2, r2, #3
 800651e:	1c55      	adds	r5, r2, #1
 8006520:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 8006522:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 80067f4 <__kernel_rem_pio2f+0x304>
 8006526:	00e8      	lsls	r0, r5, #3
 8006528:	eba2 060b 	sub.w	r6, r2, fp
 800652c:	9002      	str	r0, [sp, #8]
 800652e:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 8006532:	eb0a 0c0b 	add.w	ip, sl, fp
 8006536:	ac1c      	add	r4, sp, #112	@ 0x70
 8006538:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800653c:	2000      	movs	r0, #0
 800653e:	4560      	cmp	r0, ip
 8006540:	dd11      	ble.n	8006566 <__kernel_rem_pio2f+0x76>
 8006542:	a91c      	add	r1, sp, #112	@ 0x70
 8006544:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8006548:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800654c:	f04f 0c00 	mov.w	ip, #0
 8006550:	45d4      	cmp	ip, sl
 8006552:	dc27      	bgt.n	80065a4 <__kernel_rem_pio2f+0xb4>
 8006554:	f8dd e004 	ldr.w	lr, [sp, #4]
 8006558:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 80067f4 <__kernel_rem_pio2f+0x304>
 800655c:	4606      	mov	r6, r0
 800655e:	2400      	movs	r4, #0
 8006560:	e016      	b.n	8006590 <__kernel_rem_pio2f+0xa0>
 8006562:	2200      	movs	r2, #0
 8006564:	e7db      	b.n	800651e <__kernel_rem_pio2f+0x2e>
 8006566:	42c6      	cmn	r6, r0
 8006568:	bf5d      	ittte	pl
 800656a:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800656e:	ee07 1a90 	vmovpl	s15, r1
 8006572:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006576:	eef0 7a47 	vmovmi.f32	s15, s14
 800657a:	ece4 7a01 	vstmia	r4!, {s15}
 800657e:	3001      	adds	r0, #1
 8006580:	e7dd      	b.n	800653e <__kernel_rem_pio2f+0x4e>
 8006582:	ecfe 6a01 	vldmia	lr!, {s13}
 8006586:	ed96 7a00 	vldr	s14, [r6]
 800658a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800658e:	3401      	adds	r4, #1
 8006590:	455c      	cmp	r4, fp
 8006592:	f1a6 0604 	sub.w	r6, r6, #4
 8006596:	ddf4      	ble.n	8006582 <__kernel_rem_pio2f+0x92>
 8006598:	ece9 7a01 	vstmia	r9!, {s15}
 800659c:	f10c 0c01 	add.w	ip, ip, #1
 80065a0:	3004      	adds	r0, #4
 80065a2:	e7d5      	b.n	8006550 <__kernel_rem_pio2f+0x60>
 80065a4:	a908      	add	r1, sp, #32
 80065a6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80065aa:	9104      	str	r1, [sp, #16]
 80065ac:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80065ae:	eddf 8a90 	vldr	s17, [pc, #576]	@ 80067f0 <__kernel_rem_pio2f+0x300>
 80065b2:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 80067ec <__kernel_rem_pio2f+0x2fc>
 80065b6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80065ba:	9203      	str	r2, [sp, #12]
 80065bc:	4654      	mov	r4, sl
 80065be:	00a2      	lsls	r2, r4, #2
 80065c0:	9205      	str	r2, [sp, #20]
 80065c2:	aa58      	add	r2, sp, #352	@ 0x160
 80065c4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 80065c8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 80065cc:	a944      	add	r1, sp, #272	@ 0x110
 80065ce:	aa08      	add	r2, sp, #32
 80065d0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 80065d4:	4694      	mov	ip, r2
 80065d6:	4626      	mov	r6, r4
 80065d8:	2e00      	cmp	r6, #0
 80065da:	f1a0 0004 	sub.w	r0, r0, #4
 80065de:	dc4c      	bgt.n	800667a <__kernel_rem_pio2f+0x18a>
 80065e0:	4628      	mov	r0, r5
 80065e2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80065e6:	f000 f9f5 	bl	80069d4 <scalbnf>
 80065ea:	eeb0 8a40 	vmov.f32	s16, s0
 80065ee:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 80065f2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80065f6:	f000 fa53 	bl	8006aa0 <floorf>
 80065fa:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80065fe:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006602:	2d00      	cmp	r5, #0
 8006604:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006608:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800660c:	ee17 9a90 	vmov	r9, s15
 8006610:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006614:	ee38 8a67 	vsub.f32	s16, s16, s15
 8006618:	dd41      	ble.n	800669e <__kernel_rem_pio2f+0x1ae>
 800661a:	f104 3cff 	add.w	ip, r4, #4294967295
 800661e:	a908      	add	r1, sp, #32
 8006620:	f1c5 0e08 	rsb	lr, r5, #8
 8006624:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 8006628:	fa46 f00e 	asr.w	r0, r6, lr
 800662c:	4481      	add	r9, r0
 800662e:	fa00 f00e 	lsl.w	r0, r0, lr
 8006632:	1a36      	subs	r6, r6, r0
 8006634:	f1c5 0007 	rsb	r0, r5, #7
 8006638:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800663c:	4106      	asrs	r6, r0
 800663e:	2e00      	cmp	r6, #0
 8006640:	dd3c      	ble.n	80066bc <__kernel_rem_pio2f+0x1cc>
 8006642:	f04f 0e00 	mov.w	lr, #0
 8006646:	f109 0901 	add.w	r9, r9, #1
 800664a:	4670      	mov	r0, lr
 800664c:	4574      	cmp	r4, lr
 800664e:	dc68      	bgt.n	8006722 <__kernel_rem_pio2f+0x232>
 8006650:	2d00      	cmp	r5, #0
 8006652:	dd03      	ble.n	800665c <__kernel_rem_pio2f+0x16c>
 8006654:	2d01      	cmp	r5, #1
 8006656:	d074      	beq.n	8006742 <__kernel_rem_pio2f+0x252>
 8006658:	2d02      	cmp	r5, #2
 800665a:	d07d      	beq.n	8006758 <__kernel_rem_pio2f+0x268>
 800665c:	2e02      	cmp	r6, #2
 800665e:	d12d      	bne.n	80066bc <__kernel_rem_pio2f+0x1cc>
 8006660:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8006664:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006668:	b340      	cbz	r0, 80066bc <__kernel_rem_pio2f+0x1cc>
 800666a:	4628      	mov	r0, r5
 800666c:	9306      	str	r3, [sp, #24]
 800666e:	f000 f9b1 	bl	80069d4 <scalbnf>
 8006672:	9b06      	ldr	r3, [sp, #24]
 8006674:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006678:	e020      	b.n	80066bc <__kernel_rem_pio2f+0x1cc>
 800667a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800667e:	3e01      	subs	r6, #1
 8006680:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006684:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006688:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800668c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006690:	ecac 0a01 	vstmia	ip!, {s0}
 8006694:	ed90 0a00 	vldr	s0, [r0]
 8006698:	ee37 0a80 	vadd.f32	s0, s15, s0
 800669c:	e79c      	b.n	80065d8 <__kernel_rem_pio2f+0xe8>
 800669e:	d105      	bne.n	80066ac <__kernel_rem_pio2f+0x1bc>
 80066a0:	1e60      	subs	r0, r4, #1
 80066a2:	a908      	add	r1, sp, #32
 80066a4:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 80066a8:	11f6      	asrs	r6, r6, #7
 80066aa:	e7c8      	b.n	800663e <__kernel_rem_pio2f+0x14e>
 80066ac:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 80066b0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80066b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066b8:	da31      	bge.n	800671e <__kernel_rem_pio2f+0x22e>
 80066ba:	2600      	movs	r6, #0
 80066bc:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	f040 8098 	bne.w	80067f8 <__kernel_rem_pio2f+0x308>
 80066c8:	1e60      	subs	r0, r4, #1
 80066ca:	2200      	movs	r2, #0
 80066cc:	4550      	cmp	r0, sl
 80066ce:	da4b      	bge.n	8006768 <__kernel_rem_pio2f+0x278>
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	d065      	beq.n	80067a0 <__kernel_rem_pio2f+0x2b0>
 80066d4:	3c01      	subs	r4, #1
 80066d6:	ab08      	add	r3, sp, #32
 80066d8:	3d08      	subs	r5, #8
 80066da:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d0f8      	beq.n	80066d4 <__kernel_rem_pio2f+0x1e4>
 80066e2:	4628      	mov	r0, r5
 80066e4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80066e8:	f000 f974 	bl	80069d4 <scalbnf>
 80066ec:	1c63      	adds	r3, r4, #1
 80066ee:	aa44      	add	r2, sp, #272	@ 0x110
 80066f0:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 80067f0 <__kernel_rem_pio2f+0x300>
 80066f4:	0099      	lsls	r1, r3, #2
 80066f6:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80066fa:	4623      	mov	r3, r4
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	f280 80a9 	bge.w	8006854 <__kernel_rem_pio2f+0x364>
 8006702:	4623      	mov	r3, r4
 8006704:	2b00      	cmp	r3, #0
 8006706:	f2c0 80c7 	blt.w	8006898 <__kernel_rem_pio2f+0x3a8>
 800670a:	aa44      	add	r2, sp, #272	@ 0x110
 800670c:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8006710:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 80067e8 <__kernel_rem_pio2f+0x2f8>
 8006714:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80067f4 <__kernel_rem_pio2f+0x304>
 8006718:	2000      	movs	r0, #0
 800671a:	1ae2      	subs	r2, r4, r3
 800671c:	e0b1      	b.n	8006882 <__kernel_rem_pio2f+0x392>
 800671e:	2602      	movs	r6, #2
 8006720:	e78f      	b.n	8006642 <__kernel_rem_pio2f+0x152>
 8006722:	f852 1b04 	ldr.w	r1, [r2], #4
 8006726:	b948      	cbnz	r0, 800673c <__kernel_rem_pio2f+0x24c>
 8006728:	b121      	cbz	r1, 8006734 <__kernel_rem_pio2f+0x244>
 800672a:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800672e:	f842 1c04 	str.w	r1, [r2, #-4]
 8006732:	2101      	movs	r1, #1
 8006734:	f10e 0e01 	add.w	lr, lr, #1
 8006738:	4608      	mov	r0, r1
 800673a:	e787      	b.n	800664c <__kernel_rem_pio2f+0x15c>
 800673c:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 8006740:	e7f5      	b.n	800672e <__kernel_rem_pio2f+0x23e>
 8006742:	f104 3cff 	add.w	ip, r4, #4294967295
 8006746:	aa08      	add	r2, sp, #32
 8006748:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800674c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8006750:	a908      	add	r1, sp, #32
 8006752:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8006756:	e781      	b.n	800665c <__kernel_rem_pio2f+0x16c>
 8006758:	f104 3cff 	add.w	ip, r4, #4294967295
 800675c:	aa08      	add	r2, sp, #32
 800675e:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 8006762:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8006766:	e7f3      	b.n	8006750 <__kernel_rem_pio2f+0x260>
 8006768:	a908      	add	r1, sp, #32
 800676a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800676e:	3801      	subs	r0, #1
 8006770:	430a      	orrs	r2, r1
 8006772:	e7ab      	b.n	80066cc <__kernel_rem_pio2f+0x1dc>
 8006774:	3201      	adds	r2, #1
 8006776:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800677a:	2e00      	cmp	r6, #0
 800677c:	d0fa      	beq.n	8006774 <__kernel_rem_pio2f+0x284>
 800677e:	9905      	ldr	r1, [sp, #20]
 8006780:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8006784:	eb0d 0001 	add.w	r0, sp, r1
 8006788:	18e6      	adds	r6, r4, r3
 800678a:	a91c      	add	r1, sp, #112	@ 0x70
 800678c:	f104 0c01 	add.w	ip, r4, #1
 8006790:	384c      	subs	r0, #76	@ 0x4c
 8006792:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8006796:	4422      	add	r2, r4
 8006798:	4562      	cmp	r2, ip
 800679a:	da04      	bge.n	80067a6 <__kernel_rem_pio2f+0x2b6>
 800679c:	4614      	mov	r4, r2
 800679e:	e70e      	b.n	80065be <__kernel_rem_pio2f+0xce>
 80067a0:	9804      	ldr	r0, [sp, #16]
 80067a2:	2201      	movs	r2, #1
 80067a4:	e7e7      	b.n	8006776 <__kernel_rem_pio2f+0x286>
 80067a6:	9903      	ldr	r1, [sp, #12]
 80067a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80067ac:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80067b0:	9105      	str	r1, [sp, #20]
 80067b2:	ee07 1a90 	vmov	s15, r1
 80067b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067ba:	2400      	movs	r4, #0
 80067bc:	ece6 7a01 	vstmia	r6!, {s15}
 80067c0:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80067f4 <__kernel_rem_pio2f+0x304>
 80067c4:	46b1      	mov	r9, r6
 80067c6:	455c      	cmp	r4, fp
 80067c8:	dd04      	ble.n	80067d4 <__kernel_rem_pio2f+0x2e4>
 80067ca:	ece0 7a01 	vstmia	r0!, {s15}
 80067ce:	f10c 0c01 	add.w	ip, ip, #1
 80067d2:	e7e1      	b.n	8006798 <__kernel_rem_pio2f+0x2a8>
 80067d4:	ecfe 6a01 	vldmia	lr!, {s13}
 80067d8:	ed39 7a01 	vldmdb	r9!, {s14}
 80067dc:	3401      	adds	r4, #1
 80067de:	eee6 7a87 	vfma.f32	s15, s13, s14
 80067e2:	e7f0      	b.n	80067c6 <__kernel_rem_pio2f+0x2d6>
 80067e4:	0800b71c 	.word	0x0800b71c
 80067e8:	0800b6f0 	.word	0x0800b6f0
 80067ec:	43800000 	.word	0x43800000
 80067f0:	3b800000 	.word	0x3b800000
 80067f4:	00000000 	.word	0x00000000
 80067f8:	9b02      	ldr	r3, [sp, #8]
 80067fa:	eeb0 0a48 	vmov.f32	s0, s16
 80067fe:	eba3 0008 	sub.w	r0, r3, r8
 8006802:	f000 f8e7 	bl	80069d4 <scalbnf>
 8006806:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 80067ec <__kernel_rem_pio2f+0x2fc>
 800680a:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800680e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006812:	db19      	blt.n	8006848 <__kernel_rem_pio2f+0x358>
 8006814:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 80067f0 <__kernel_rem_pio2f+0x300>
 8006818:	ee60 7a27 	vmul.f32	s15, s0, s15
 800681c:	aa08      	add	r2, sp, #32
 800681e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006822:	3508      	adds	r5, #8
 8006824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006828:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800682c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006830:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006834:	ee10 3a10 	vmov	r3, s0
 8006838:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800683c:	ee17 3a90 	vmov	r3, s15
 8006840:	3401      	adds	r4, #1
 8006842:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006846:	e74c      	b.n	80066e2 <__kernel_rem_pio2f+0x1f2>
 8006848:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800684c:	aa08      	add	r2, sp, #32
 800684e:	ee10 3a10 	vmov	r3, s0
 8006852:	e7f6      	b.n	8006842 <__kernel_rem_pio2f+0x352>
 8006854:	a808      	add	r0, sp, #32
 8006856:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800685a:	9001      	str	r0, [sp, #4]
 800685c:	ee07 0a90 	vmov	s15, r0
 8006860:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006864:	3b01      	subs	r3, #1
 8006866:	ee67 7a80 	vmul.f32	s15, s15, s0
 800686a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800686e:	ed62 7a01 	vstmdb	r2!, {s15}
 8006872:	e743      	b.n	80066fc <__kernel_rem_pio2f+0x20c>
 8006874:	ecfc 6a01 	vldmia	ip!, {s13}
 8006878:	ecb5 7a01 	vldmia	r5!, {s14}
 800687c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006880:	3001      	adds	r0, #1
 8006882:	4550      	cmp	r0, sl
 8006884:	dc01      	bgt.n	800688a <__kernel_rem_pio2f+0x39a>
 8006886:	4282      	cmp	r2, r0
 8006888:	daf4      	bge.n	8006874 <__kernel_rem_pio2f+0x384>
 800688a:	a858      	add	r0, sp, #352	@ 0x160
 800688c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006890:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8006894:	3b01      	subs	r3, #1
 8006896:	e735      	b.n	8006704 <__kernel_rem_pio2f+0x214>
 8006898:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800689a:	2b02      	cmp	r3, #2
 800689c:	dc09      	bgt.n	80068b2 <__kernel_rem_pio2f+0x3c2>
 800689e:	2b00      	cmp	r3, #0
 80068a0:	dc2b      	bgt.n	80068fa <__kernel_rem_pio2f+0x40a>
 80068a2:	d044      	beq.n	800692e <__kernel_rem_pio2f+0x43e>
 80068a4:	f009 0007 	and.w	r0, r9, #7
 80068a8:	b059      	add	sp, #356	@ 0x164
 80068aa:	ecbd 8b04 	vpop	{d8-d9}
 80068ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068b2:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 80068b4:	2b03      	cmp	r3, #3
 80068b6:	d1f5      	bne.n	80068a4 <__kernel_rem_pio2f+0x3b4>
 80068b8:	aa30      	add	r2, sp, #192	@ 0xc0
 80068ba:	1f0b      	subs	r3, r1, #4
 80068bc:	4413      	add	r3, r2
 80068be:	461a      	mov	r2, r3
 80068c0:	4620      	mov	r0, r4
 80068c2:	2800      	cmp	r0, #0
 80068c4:	f1a2 0204 	sub.w	r2, r2, #4
 80068c8:	dc52      	bgt.n	8006970 <__kernel_rem_pio2f+0x480>
 80068ca:	4622      	mov	r2, r4
 80068cc:	2a01      	cmp	r2, #1
 80068ce:	f1a3 0304 	sub.w	r3, r3, #4
 80068d2:	dc5d      	bgt.n	8006990 <__kernel_rem_pio2f+0x4a0>
 80068d4:	ab30      	add	r3, sp, #192	@ 0xc0
 80068d6:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 80067f4 <__kernel_rem_pio2f+0x304>
 80068da:	440b      	add	r3, r1
 80068dc:	2c01      	cmp	r4, #1
 80068de:	dc67      	bgt.n	80069b0 <__kernel_rem_pio2f+0x4c0>
 80068e0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 80068e4:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 80068e8:	2e00      	cmp	r6, #0
 80068ea:	d167      	bne.n	80069bc <__kernel_rem_pio2f+0x4cc>
 80068ec:	edc7 6a00 	vstr	s13, [r7]
 80068f0:	ed87 7a01 	vstr	s14, [r7, #4]
 80068f4:	edc7 7a02 	vstr	s15, [r7, #8]
 80068f8:	e7d4      	b.n	80068a4 <__kernel_rem_pio2f+0x3b4>
 80068fa:	ab30      	add	r3, sp, #192	@ 0xc0
 80068fc:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 80067f4 <__kernel_rem_pio2f+0x304>
 8006900:	440b      	add	r3, r1
 8006902:	4622      	mov	r2, r4
 8006904:	2a00      	cmp	r2, #0
 8006906:	da24      	bge.n	8006952 <__kernel_rem_pio2f+0x462>
 8006908:	b34e      	cbz	r6, 800695e <__kernel_rem_pio2f+0x46e>
 800690a:	eef1 7a47 	vneg.f32	s15, s14
 800690e:	edc7 7a00 	vstr	s15, [r7]
 8006912:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 8006916:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800691a:	aa31      	add	r2, sp, #196	@ 0xc4
 800691c:	2301      	movs	r3, #1
 800691e:	429c      	cmp	r4, r3
 8006920:	da20      	bge.n	8006964 <__kernel_rem_pio2f+0x474>
 8006922:	b10e      	cbz	r6, 8006928 <__kernel_rem_pio2f+0x438>
 8006924:	eef1 7a67 	vneg.f32	s15, s15
 8006928:	edc7 7a01 	vstr	s15, [r7, #4]
 800692c:	e7ba      	b.n	80068a4 <__kernel_rem_pio2f+0x3b4>
 800692e:	ab30      	add	r3, sp, #192	@ 0xc0
 8006930:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 80067f4 <__kernel_rem_pio2f+0x304>
 8006934:	440b      	add	r3, r1
 8006936:	2c00      	cmp	r4, #0
 8006938:	da05      	bge.n	8006946 <__kernel_rem_pio2f+0x456>
 800693a:	b10e      	cbz	r6, 8006940 <__kernel_rem_pio2f+0x450>
 800693c:	eef1 7a67 	vneg.f32	s15, s15
 8006940:	edc7 7a00 	vstr	s15, [r7]
 8006944:	e7ae      	b.n	80068a4 <__kernel_rem_pio2f+0x3b4>
 8006946:	ed33 7a01 	vldmdb	r3!, {s14}
 800694a:	3c01      	subs	r4, #1
 800694c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006950:	e7f1      	b.n	8006936 <__kernel_rem_pio2f+0x446>
 8006952:	ed73 7a01 	vldmdb	r3!, {s15}
 8006956:	3a01      	subs	r2, #1
 8006958:	ee37 7a27 	vadd.f32	s14, s14, s15
 800695c:	e7d2      	b.n	8006904 <__kernel_rem_pio2f+0x414>
 800695e:	eef0 7a47 	vmov.f32	s15, s14
 8006962:	e7d4      	b.n	800690e <__kernel_rem_pio2f+0x41e>
 8006964:	ecb2 7a01 	vldmia	r2!, {s14}
 8006968:	3301      	adds	r3, #1
 800696a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800696e:	e7d6      	b.n	800691e <__kernel_rem_pio2f+0x42e>
 8006970:	edd2 7a00 	vldr	s15, [r2]
 8006974:	edd2 6a01 	vldr	s13, [r2, #4]
 8006978:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800697c:	3801      	subs	r0, #1
 800697e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006982:	ed82 7a00 	vstr	s14, [r2]
 8006986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800698a:	edc2 7a01 	vstr	s15, [r2, #4]
 800698e:	e798      	b.n	80068c2 <__kernel_rem_pio2f+0x3d2>
 8006990:	edd3 7a00 	vldr	s15, [r3]
 8006994:	edd3 6a01 	vldr	s13, [r3, #4]
 8006998:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800699c:	3a01      	subs	r2, #1
 800699e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80069a2:	ed83 7a00 	vstr	s14, [r3]
 80069a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80069aa:	edc3 7a01 	vstr	s15, [r3, #4]
 80069ae:	e78d      	b.n	80068cc <__kernel_rem_pio2f+0x3dc>
 80069b0:	ed33 7a01 	vldmdb	r3!, {s14}
 80069b4:	3c01      	subs	r4, #1
 80069b6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80069ba:	e78f      	b.n	80068dc <__kernel_rem_pio2f+0x3ec>
 80069bc:	eef1 6a66 	vneg.f32	s13, s13
 80069c0:	eeb1 7a47 	vneg.f32	s14, s14
 80069c4:	edc7 6a00 	vstr	s13, [r7]
 80069c8:	ed87 7a01 	vstr	s14, [r7, #4]
 80069cc:	eef1 7a67 	vneg.f32	s15, s15
 80069d0:	e790      	b.n	80068f4 <__kernel_rem_pio2f+0x404>
 80069d2:	bf00      	nop

080069d4 <scalbnf>:
 80069d4:	ee10 3a10 	vmov	r3, s0
 80069d8:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80069dc:	d02b      	beq.n	8006a36 <scalbnf+0x62>
 80069de:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80069e2:	d302      	bcc.n	80069ea <scalbnf+0x16>
 80069e4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80069e8:	4770      	bx	lr
 80069ea:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80069ee:	d123      	bne.n	8006a38 <scalbnf+0x64>
 80069f0:	4b24      	ldr	r3, [pc, #144]	@ (8006a84 <scalbnf+0xb0>)
 80069f2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8006a88 <scalbnf+0xb4>
 80069f6:	4298      	cmp	r0, r3
 80069f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80069fc:	db17      	blt.n	8006a2e <scalbnf+0x5a>
 80069fe:	ee10 3a10 	vmov	r3, s0
 8006a02:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006a06:	3a19      	subs	r2, #25
 8006a08:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8006a0c:	4288      	cmp	r0, r1
 8006a0e:	dd15      	ble.n	8006a3c <scalbnf+0x68>
 8006a10:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8006a8c <scalbnf+0xb8>
 8006a14:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 8006a90 <scalbnf+0xbc>
 8006a18:	ee10 3a10 	vmov	r3, s0
 8006a1c:	eeb0 7a67 	vmov.f32	s14, s15
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	bfb8      	it	lt
 8006a24:	eef0 7a66 	vmovlt.f32	s15, s13
 8006a28:	ee27 0a87 	vmul.f32	s0, s15, s14
 8006a2c:	4770      	bx	lr
 8006a2e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006a94 <scalbnf+0xc0>
 8006a32:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006a36:	4770      	bx	lr
 8006a38:	0dd2      	lsrs	r2, r2, #23
 8006a3a:	e7e5      	b.n	8006a08 <scalbnf+0x34>
 8006a3c:	4410      	add	r0, r2
 8006a3e:	28fe      	cmp	r0, #254	@ 0xfe
 8006a40:	dce6      	bgt.n	8006a10 <scalbnf+0x3c>
 8006a42:	2800      	cmp	r0, #0
 8006a44:	dd06      	ble.n	8006a54 <scalbnf+0x80>
 8006a46:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006a4a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006a4e:	ee00 3a10 	vmov	s0, r3
 8006a52:	4770      	bx	lr
 8006a54:	f110 0f16 	cmn.w	r0, #22
 8006a58:	da09      	bge.n	8006a6e <scalbnf+0x9a>
 8006a5a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8006a94 <scalbnf+0xc0>
 8006a5e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8006a98 <scalbnf+0xc4>
 8006a62:	ee10 3a10 	vmov	r3, s0
 8006a66:	eeb0 7a67 	vmov.f32	s14, s15
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	e7d9      	b.n	8006a22 <scalbnf+0x4e>
 8006a6e:	3019      	adds	r0, #25
 8006a70:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8006a74:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8006a78:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006a9c <scalbnf+0xc8>
 8006a7c:	ee07 3a90 	vmov	s15, r3
 8006a80:	e7d7      	b.n	8006a32 <scalbnf+0x5e>
 8006a82:	bf00      	nop
 8006a84:	ffff3cb0 	.word	0xffff3cb0
 8006a88:	4c000000 	.word	0x4c000000
 8006a8c:	7149f2ca 	.word	0x7149f2ca
 8006a90:	f149f2ca 	.word	0xf149f2ca
 8006a94:	0da24260 	.word	0x0da24260
 8006a98:	8da24260 	.word	0x8da24260
 8006a9c:	33000000 	.word	0x33000000

08006aa0 <floorf>:
 8006aa0:	ee10 3a10 	vmov	r3, s0
 8006aa4:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006aa8:	3a7f      	subs	r2, #127	@ 0x7f
 8006aaa:	2a16      	cmp	r2, #22
 8006aac:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006ab0:	dc2b      	bgt.n	8006b0a <floorf+0x6a>
 8006ab2:	2a00      	cmp	r2, #0
 8006ab4:	da12      	bge.n	8006adc <floorf+0x3c>
 8006ab6:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8006b1c <floorf+0x7c>
 8006aba:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006abe:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006ac2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ac6:	dd06      	ble.n	8006ad6 <floorf+0x36>
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	da24      	bge.n	8006b16 <floorf+0x76>
 8006acc:	2900      	cmp	r1, #0
 8006ace:	4b14      	ldr	r3, [pc, #80]	@ (8006b20 <floorf+0x80>)
 8006ad0:	bf08      	it	eq
 8006ad2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 8006ad6:	ee00 3a10 	vmov	s0, r3
 8006ada:	4770      	bx	lr
 8006adc:	4911      	ldr	r1, [pc, #68]	@ (8006b24 <floorf+0x84>)
 8006ade:	4111      	asrs	r1, r2
 8006ae0:	420b      	tst	r3, r1
 8006ae2:	d0fa      	beq.n	8006ada <floorf+0x3a>
 8006ae4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8006b1c <floorf+0x7c>
 8006ae8:	ee30 0a27 	vadd.f32	s0, s0, s15
 8006aec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8006af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006af4:	ddef      	ble.n	8006ad6 <floorf+0x36>
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	bfbe      	ittt	lt
 8006afa:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 8006afe:	fa40 f202 	asrlt.w	r2, r0, r2
 8006b02:	189b      	addlt	r3, r3, r2
 8006b04:	ea23 0301 	bic.w	r3, r3, r1
 8006b08:	e7e5      	b.n	8006ad6 <floorf+0x36>
 8006b0a:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8006b0e:	d3e4      	bcc.n	8006ada <floorf+0x3a>
 8006b10:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006b14:	4770      	bx	lr
 8006b16:	2300      	movs	r3, #0
 8006b18:	e7dd      	b.n	8006ad6 <floorf+0x36>
 8006b1a:	bf00      	nop
 8006b1c:	7149f2ca 	.word	0x7149f2ca
 8006b20:	bf800000 	.word	0xbf800000
 8006b24:	007fffff 	.word	0x007fffff

08006b28 <sulp>:
 8006b28:	b570      	push	{r4, r5, r6, lr}
 8006b2a:	4604      	mov	r4, r0
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	ec45 4b10 	vmov	d0, r4, r5
 8006b32:	4616      	mov	r6, r2
 8006b34:	f003 fcc8 	bl	800a4c8 <__ulp>
 8006b38:	ec51 0b10 	vmov	r0, r1, d0
 8006b3c:	b17e      	cbz	r6, 8006b5e <sulp+0x36>
 8006b3e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006b42:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	dd09      	ble.n	8006b5e <sulp+0x36>
 8006b4a:	051b      	lsls	r3, r3, #20
 8006b4c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006b50:	2400      	movs	r4, #0
 8006b52:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006b56:	4622      	mov	r2, r4
 8006b58:	462b      	mov	r3, r5
 8006b5a:	f7f9 fd4d 	bl	80005f8 <__aeabi_dmul>
 8006b5e:	ec41 0b10 	vmov	d0, r0, r1
 8006b62:	bd70      	pop	{r4, r5, r6, pc}
 8006b64:	0000      	movs	r0, r0
	...

08006b68 <_strtod_l>:
 8006b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b6c:	b09f      	sub	sp, #124	@ 0x7c
 8006b6e:	460c      	mov	r4, r1
 8006b70:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006b72:	2200      	movs	r2, #0
 8006b74:	921a      	str	r2, [sp, #104]	@ 0x68
 8006b76:	9005      	str	r0, [sp, #20]
 8006b78:	f04f 0a00 	mov.w	sl, #0
 8006b7c:	f04f 0b00 	mov.w	fp, #0
 8006b80:	460a      	mov	r2, r1
 8006b82:	9219      	str	r2, [sp, #100]	@ 0x64
 8006b84:	7811      	ldrb	r1, [r2, #0]
 8006b86:	292b      	cmp	r1, #43	@ 0x2b
 8006b88:	d04a      	beq.n	8006c20 <_strtod_l+0xb8>
 8006b8a:	d838      	bhi.n	8006bfe <_strtod_l+0x96>
 8006b8c:	290d      	cmp	r1, #13
 8006b8e:	d832      	bhi.n	8006bf6 <_strtod_l+0x8e>
 8006b90:	2908      	cmp	r1, #8
 8006b92:	d832      	bhi.n	8006bfa <_strtod_l+0x92>
 8006b94:	2900      	cmp	r1, #0
 8006b96:	d03b      	beq.n	8006c10 <_strtod_l+0xa8>
 8006b98:	2200      	movs	r2, #0
 8006b9a:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006b9c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006b9e:	782a      	ldrb	r2, [r5, #0]
 8006ba0:	2a30      	cmp	r2, #48	@ 0x30
 8006ba2:	f040 80b3 	bne.w	8006d0c <_strtod_l+0x1a4>
 8006ba6:	786a      	ldrb	r2, [r5, #1]
 8006ba8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006bac:	2a58      	cmp	r2, #88	@ 0x58
 8006bae:	d16e      	bne.n	8006c8e <_strtod_l+0x126>
 8006bb0:	9302      	str	r3, [sp, #8]
 8006bb2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bb4:	9301      	str	r3, [sp, #4]
 8006bb6:	ab1a      	add	r3, sp, #104	@ 0x68
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	4a8e      	ldr	r2, [pc, #568]	@ (8006df4 <_strtod_l+0x28c>)
 8006bbc:	9805      	ldr	r0, [sp, #20]
 8006bbe:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006bc0:	a919      	add	r1, sp, #100	@ 0x64
 8006bc2:	f002 fd73 	bl	80096ac <__gethex>
 8006bc6:	f010 060f 	ands.w	r6, r0, #15
 8006bca:	4604      	mov	r4, r0
 8006bcc:	d005      	beq.n	8006bda <_strtod_l+0x72>
 8006bce:	2e06      	cmp	r6, #6
 8006bd0:	d128      	bne.n	8006c24 <_strtod_l+0xbc>
 8006bd2:	3501      	adds	r5, #1
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	9519      	str	r5, [sp, #100]	@ 0x64
 8006bd8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006bda:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f040 858e 	bne.w	80076fe <_strtod_l+0xb96>
 8006be2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006be4:	b1cb      	cbz	r3, 8006c1a <_strtod_l+0xb2>
 8006be6:	4652      	mov	r2, sl
 8006be8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8006bec:	ec43 2b10 	vmov	d0, r2, r3
 8006bf0:	b01f      	add	sp, #124	@ 0x7c
 8006bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf6:	2920      	cmp	r1, #32
 8006bf8:	d1ce      	bne.n	8006b98 <_strtod_l+0x30>
 8006bfa:	3201      	adds	r2, #1
 8006bfc:	e7c1      	b.n	8006b82 <_strtod_l+0x1a>
 8006bfe:	292d      	cmp	r1, #45	@ 0x2d
 8006c00:	d1ca      	bne.n	8006b98 <_strtod_l+0x30>
 8006c02:	2101      	movs	r1, #1
 8006c04:	910b      	str	r1, [sp, #44]	@ 0x2c
 8006c06:	1c51      	adds	r1, r2, #1
 8006c08:	9119      	str	r1, [sp, #100]	@ 0x64
 8006c0a:	7852      	ldrb	r2, [r2, #1]
 8006c0c:	2a00      	cmp	r2, #0
 8006c0e:	d1c5      	bne.n	8006b9c <_strtod_l+0x34>
 8006c10:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006c12:	9419      	str	r4, [sp, #100]	@ 0x64
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	f040 8570 	bne.w	80076fa <_strtod_l+0xb92>
 8006c1a:	4652      	mov	r2, sl
 8006c1c:	465b      	mov	r3, fp
 8006c1e:	e7e5      	b.n	8006bec <_strtod_l+0x84>
 8006c20:	2100      	movs	r1, #0
 8006c22:	e7ef      	b.n	8006c04 <_strtod_l+0x9c>
 8006c24:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8006c26:	b13a      	cbz	r2, 8006c38 <_strtod_l+0xd0>
 8006c28:	2135      	movs	r1, #53	@ 0x35
 8006c2a:	a81c      	add	r0, sp, #112	@ 0x70
 8006c2c:	f003 fd46 	bl	800a6bc <__copybits>
 8006c30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006c32:	9805      	ldr	r0, [sp, #20]
 8006c34:	f003 f914 	bl	8009e60 <_Bfree>
 8006c38:	3e01      	subs	r6, #1
 8006c3a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8006c3c:	2e04      	cmp	r6, #4
 8006c3e:	d806      	bhi.n	8006c4e <_strtod_l+0xe6>
 8006c40:	e8df f006 	tbb	[pc, r6]
 8006c44:	201d0314 	.word	0x201d0314
 8006c48:	14          	.byte	0x14
 8006c49:	00          	.byte	0x00
 8006c4a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8006c4e:	05e1      	lsls	r1, r4, #23
 8006c50:	bf48      	it	mi
 8006c52:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8006c56:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006c5a:	0d1b      	lsrs	r3, r3, #20
 8006c5c:	051b      	lsls	r3, r3, #20
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1bb      	bne.n	8006bda <_strtod_l+0x72>
 8006c62:	f001 fdd7 	bl	8008814 <__errno>
 8006c66:	2322      	movs	r3, #34	@ 0x22
 8006c68:	6003      	str	r3, [r0, #0]
 8006c6a:	e7b6      	b.n	8006bda <_strtod_l+0x72>
 8006c6c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8006c70:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8006c74:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8006c78:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006c7c:	e7e7      	b.n	8006c4e <_strtod_l+0xe6>
 8006c7e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8006dfc <_strtod_l+0x294>
 8006c82:	e7e4      	b.n	8006c4e <_strtod_l+0xe6>
 8006c84:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8006c88:	f04f 3aff 	mov.w	sl, #4294967295
 8006c8c:	e7df      	b.n	8006c4e <_strtod_l+0xe6>
 8006c8e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006c90:	1c5a      	adds	r2, r3, #1
 8006c92:	9219      	str	r2, [sp, #100]	@ 0x64
 8006c94:	785b      	ldrb	r3, [r3, #1]
 8006c96:	2b30      	cmp	r3, #48	@ 0x30
 8006c98:	d0f9      	beq.n	8006c8e <_strtod_l+0x126>
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d09d      	beq.n	8006bda <_strtod_l+0x72>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006ca4:	930c      	str	r3, [sp, #48]	@ 0x30
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	9308      	str	r3, [sp, #32]
 8006caa:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cac:	461f      	mov	r7, r3
 8006cae:	220a      	movs	r2, #10
 8006cb0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8006cb2:	7805      	ldrb	r5, [r0, #0]
 8006cb4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8006cb8:	b2d9      	uxtb	r1, r3
 8006cba:	2909      	cmp	r1, #9
 8006cbc:	d928      	bls.n	8006d10 <_strtod_l+0x1a8>
 8006cbe:	494e      	ldr	r1, [pc, #312]	@ (8006df8 <_strtod_l+0x290>)
 8006cc0:	2201      	movs	r2, #1
 8006cc2:	f001 fd4a 	bl	800875a <strncmp>
 8006cc6:	2800      	cmp	r0, #0
 8006cc8:	d032      	beq.n	8006d30 <_strtod_l+0x1c8>
 8006cca:	2000      	movs	r0, #0
 8006ccc:	462a      	mov	r2, r5
 8006cce:	4681      	mov	r9, r0
 8006cd0:	463d      	mov	r5, r7
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2a65      	cmp	r2, #101	@ 0x65
 8006cd6:	d001      	beq.n	8006cdc <_strtod_l+0x174>
 8006cd8:	2a45      	cmp	r2, #69	@ 0x45
 8006cda:	d114      	bne.n	8006d06 <_strtod_l+0x19e>
 8006cdc:	b91d      	cbnz	r5, 8006ce6 <_strtod_l+0x17e>
 8006cde:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006ce0:	4302      	orrs	r2, r0
 8006ce2:	d095      	beq.n	8006c10 <_strtod_l+0xa8>
 8006ce4:	2500      	movs	r5, #0
 8006ce6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8006ce8:	1c62      	adds	r2, r4, #1
 8006cea:	9219      	str	r2, [sp, #100]	@ 0x64
 8006cec:	7862      	ldrb	r2, [r4, #1]
 8006cee:	2a2b      	cmp	r2, #43	@ 0x2b
 8006cf0:	d077      	beq.n	8006de2 <_strtod_l+0x27a>
 8006cf2:	2a2d      	cmp	r2, #45	@ 0x2d
 8006cf4:	d07b      	beq.n	8006dee <_strtod_l+0x286>
 8006cf6:	f04f 0c00 	mov.w	ip, #0
 8006cfa:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8006cfe:	2909      	cmp	r1, #9
 8006d00:	f240 8082 	bls.w	8006e08 <_strtod_l+0x2a0>
 8006d04:	9419      	str	r4, [sp, #100]	@ 0x64
 8006d06:	f04f 0800 	mov.w	r8, #0
 8006d0a:	e0a2      	b.n	8006e52 <_strtod_l+0x2ea>
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	e7c7      	b.n	8006ca0 <_strtod_l+0x138>
 8006d10:	2f08      	cmp	r7, #8
 8006d12:	bfd5      	itete	le
 8006d14:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8006d16:	9908      	ldrgt	r1, [sp, #32]
 8006d18:	fb02 3301 	mlale	r3, r2, r1, r3
 8006d1c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8006d20:	f100 0001 	add.w	r0, r0, #1
 8006d24:	bfd4      	ite	le
 8006d26:	930a      	strle	r3, [sp, #40]	@ 0x28
 8006d28:	9308      	strgt	r3, [sp, #32]
 8006d2a:	3701      	adds	r7, #1
 8006d2c:	9019      	str	r0, [sp, #100]	@ 0x64
 8006d2e:	e7bf      	b.n	8006cb0 <_strtod_l+0x148>
 8006d30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d32:	1c5a      	adds	r2, r3, #1
 8006d34:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d36:	785a      	ldrb	r2, [r3, #1]
 8006d38:	b37f      	cbz	r7, 8006d9a <_strtod_l+0x232>
 8006d3a:	4681      	mov	r9, r0
 8006d3c:	463d      	mov	r5, r7
 8006d3e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8006d42:	2b09      	cmp	r3, #9
 8006d44:	d912      	bls.n	8006d6c <_strtod_l+0x204>
 8006d46:	2301      	movs	r3, #1
 8006d48:	e7c4      	b.n	8006cd4 <_strtod_l+0x16c>
 8006d4a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d4c:	1c5a      	adds	r2, r3, #1
 8006d4e:	9219      	str	r2, [sp, #100]	@ 0x64
 8006d50:	785a      	ldrb	r2, [r3, #1]
 8006d52:	3001      	adds	r0, #1
 8006d54:	2a30      	cmp	r2, #48	@ 0x30
 8006d56:	d0f8      	beq.n	8006d4a <_strtod_l+0x1e2>
 8006d58:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8006d5c:	2b08      	cmp	r3, #8
 8006d5e:	f200 84d3 	bhi.w	8007708 <_strtod_l+0xba0>
 8006d62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006d64:	930c      	str	r3, [sp, #48]	@ 0x30
 8006d66:	4681      	mov	r9, r0
 8006d68:	2000      	movs	r0, #0
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	3a30      	subs	r2, #48	@ 0x30
 8006d6e:	f100 0301 	add.w	r3, r0, #1
 8006d72:	d02a      	beq.n	8006dca <_strtod_l+0x262>
 8006d74:	4499      	add	r9, r3
 8006d76:	eb00 0c05 	add.w	ip, r0, r5
 8006d7a:	462b      	mov	r3, r5
 8006d7c:	210a      	movs	r1, #10
 8006d7e:	4563      	cmp	r3, ip
 8006d80:	d10d      	bne.n	8006d9e <_strtod_l+0x236>
 8006d82:	1c69      	adds	r1, r5, #1
 8006d84:	4401      	add	r1, r0
 8006d86:	4428      	add	r0, r5
 8006d88:	2808      	cmp	r0, #8
 8006d8a:	dc16      	bgt.n	8006dba <_strtod_l+0x252>
 8006d8c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006d8e:	230a      	movs	r3, #10
 8006d90:	fb03 2300 	mla	r3, r3, r0, r2
 8006d94:	930a      	str	r3, [sp, #40]	@ 0x28
 8006d96:	2300      	movs	r3, #0
 8006d98:	e018      	b.n	8006dcc <_strtod_l+0x264>
 8006d9a:	4638      	mov	r0, r7
 8006d9c:	e7da      	b.n	8006d54 <_strtod_l+0x1ec>
 8006d9e:	2b08      	cmp	r3, #8
 8006da0:	f103 0301 	add.w	r3, r3, #1
 8006da4:	dc03      	bgt.n	8006dae <_strtod_l+0x246>
 8006da6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8006da8:	434e      	muls	r6, r1
 8006daa:	960a      	str	r6, [sp, #40]	@ 0x28
 8006dac:	e7e7      	b.n	8006d7e <_strtod_l+0x216>
 8006dae:	2b10      	cmp	r3, #16
 8006db0:	bfde      	ittt	le
 8006db2:	9e08      	ldrle	r6, [sp, #32]
 8006db4:	434e      	mulle	r6, r1
 8006db6:	9608      	strle	r6, [sp, #32]
 8006db8:	e7e1      	b.n	8006d7e <_strtod_l+0x216>
 8006dba:	280f      	cmp	r0, #15
 8006dbc:	dceb      	bgt.n	8006d96 <_strtod_l+0x22e>
 8006dbe:	9808      	ldr	r0, [sp, #32]
 8006dc0:	230a      	movs	r3, #10
 8006dc2:	fb03 2300 	mla	r3, r3, r0, r2
 8006dc6:	9308      	str	r3, [sp, #32]
 8006dc8:	e7e5      	b.n	8006d96 <_strtod_l+0x22e>
 8006dca:	4629      	mov	r1, r5
 8006dcc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006dce:	1c50      	adds	r0, r2, #1
 8006dd0:	9019      	str	r0, [sp, #100]	@ 0x64
 8006dd2:	7852      	ldrb	r2, [r2, #1]
 8006dd4:	4618      	mov	r0, r3
 8006dd6:	460d      	mov	r5, r1
 8006dd8:	e7b1      	b.n	8006d3e <_strtod_l+0x1d6>
 8006dda:	f04f 0900 	mov.w	r9, #0
 8006dde:	2301      	movs	r3, #1
 8006de0:	e77d      	b.n	8006cde <_strtod_l+0x176>
 8006de2:	f04f 0c00 	mov.w	ip, #0
 8006de6:	1ca2      	adds	r2, r4, #2
 8006de8:	9219      	str	r2, [sp, #100]	@ 0x64
 8006dea:	78a2      	ldrb	r2, [r4, #2]
 8006dec:	e785      	b.n	8006cfa <_strtod_l+0x192>
 8006dee:	f04f 0c01 	mov.w	ip, #1
 8006df2:	e7f8      	b.n	8006de6 <_strtod_l+0x27e>
 8006df4:	0800b740 	.word	0x0800b740
 8006df8:	0800b728 	.word	0x0800b728
 8006dfc:	7ff00000 	.word	0x7ff00000
 8006e00:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e02:	1c51      	adds	r1, r2, #1
 8006e04:	9119      	str	r1, [sp, #100]	@ 0x64
 8006e06:	7852      	ldrb	r2, [r2, #1]
 8006e08:	2a30      	cmp	r2, #48	@ 0x30
 8006e0a:	d0f9      	beq.n	8006e00 <_strtod_l+0x298>
 8006e0c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8006e10:	2908      	cmp	r1, #8
 8006e12:	f63f af78 	bhi.w	8006d06 <_strtod_l+0x19e>
 8006e16:	3a30      	subs	r2, #48	@ 0x30
 8006e18:	920e      	str	r2, [sp, #56]	@ 0x38
 8006e1a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e1c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8006e1e:	f04f 080a 	mov.w	r8, #10
 8006e22:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8006e24:	1c56      	adds	r6, r2, #1
 8006e26:	9619      	str	r6, [sp, #100]	@ 0x64
 8006e28:	7852      	ldrb	r2, [r2, #1]
 8006e2a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8006e2e:	f1be 0f09 	cmp.w	lr, #9
 8006e32:	d939      	bls.n	8006ea8 <_strtod_l+0x340>
 8006e34:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e36:	1a76      	subs	r6, r6, r1
 8006e38:	2e08      	cmp	r6, #8
 8006e3a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8006e3e:	dc03      	bgt.n	8006e48 <_strtod_l+0x2e0>
 8006e40:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006e42:	4588      	cmp	r8, r1
 8006e44:	bfa8      	it	ge
 8006e46:	4688      	movge	r8, r1
 8006e48:	f1bc 0f00 	cmp.w	ip, #0
 8006e4c:	d001      	beq.n	8006e52 <_strtod_l+0x2ea>
 8006e4e:	f1c8 0800 	rsb	r8, r8, #0
 8006e52:	2d00      	cmp	r5, #0
 8006e54:	d14e      	bne.n	8006ef4 <_strtod_l+0x38c>
 8006e56:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006e58:	4308      	orrs	r0, r1
 8006e5a:	f47f aebe 	bne.w	8006bda <_strtod_l+0x72>
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	f47f aed6 	bne.w	8006c10 <_strtod_l+0xa8>
 8006e64:	2a69      	cmp	r2, #105	@ 0x69
 8006e66:	d028      	beq.n	8006eba <_strtod_l+0x352>
 8006e68:	dc25      	bgt.n	8006eb6 <_strtod_l+0x34e>
 8006e6a:	2a49      	cmp	r2, #73	@ 0x49
 8006e6c:	d025      	beq.n	8006eba <_strtod_l+0x352>
 8006e6e:	2a4e      	cmp	r2, #78	@ 0x4e
 8006e70:	f47f aece 	bne.w	8006c10 <_strtod_l+0xa8>
 8006e74:	499b      	ldr	r1, [pc, #620]	@ (80070e4 <_strtod_l+0x57c>)
 8006e76:	a819      	add	r0, sp, #100	@ 0x64
 8006e78:	f002 fe3a 	bl	8009af0 <__match>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	f43f aec7 	beq.w	8006c10 <_strtod_l+0xa8>
 8006e82:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006e84:	781b      	ldrb	r3, [r3, #0]
 8006e86:	2b28      	cmp	r3, #40	@ 0x28
 8006e88:	d12e      	bne.n	8006ee8 <_strtod_l+0x380>
 8006e8a:	4997      	ldr	r1, [pc, #604]	@ (80070e8 <_strtod_l+0x580>)
 8006e8c:	aa1c      	add	r2, sp, #112	@ 0x70
 8006e8e:	a819      	add	r0, sp, #100	@ 0x64
 8006e90:	f002 fe42 	bl	8009b18 <__hexnan>
 8006e94:	2805      	cmp	r0, #5
 8006e96:	d127      	bne.n	8006ee8 <_strtod_l+0x380>
 8006e98:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006e9a:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8006e9e:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8006ea2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8006ea6:	e698      	b.n	8006bda <_strtod_l+0x72>
 8006ea8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8006eaa:	fb08 2101 	mla	r1, r8, r1, r2
 8006eae:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8006eb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006eb4:	e7b5      	b.n	8006e22 <_strtod_l+0x2ba>
 8006eb6:	2a6e      	cmp	r2, #110	@ 0x6e
 8006eb8:	e7da      	b.n	8006e70 <_strtod_l+0x308>
 8006eba:	498c      	ldr	r1, [pc, #560]	@ (80070ec <_strtod_l+0x584>)
 8006ebc:	a819      	add	r0, sp, #100	@ 0x64
 8006ebe:	f002 fe17 	bl	8009af0 <__match>
 8006ec2:	2800      	cmp	r0, #0
 8006ec4:	f43f aea4 	beq.w	8006c10 <_strtod_l+0xa8>
 8006ec8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eca:	4989      	ldr	r1, [pc, #548]	@ (80070f0 <_strtod_l+0x588>)
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	a819      	add	r0, sp, #100	@ 0x64
 8006ed0:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ed2:	f002 fe0d 	bl	8009af0 <__match>
 8006ed6:	b910      	cbnz	r0, 8006ede <_strtod_l+0x376>
 8006ed8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006eda:	3301      	adds	r3, #1
 8006edc:	9319      	str	r3, [sp, #100]	@ 0x64
 8006ede:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007100 <_strtod_l+0x598>
 8006ee2:	f04f 0a00 	mov.w	sl, #0
 8006ee6:	e678      	b.n	8006bda <_strtod_l+0x72>
 8006ee8:	4882      	ldr	r0, [pc, #520]	@ (80070f4 <_strtod_l+0x58c>)
 8006eea:	f001 fcd1 	bl	8008890 <nan>
 8006eee:	ec5b ab10 	vmov	sl, fp, d0
 8006ef2:	e672      	b.n	8006bda <_strtod_l+0x72>
 8006ef4:	eba8 0309 	sub.w	r3, r8, r9
 8006ef8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8006efa:	9309      	str	r3, [sp, #36]	@ 0x24
 8006efc:	2f00      	cmp	r7, #0
 8006efe:	bf08      	it	eq
 8006f00:	462f      	moveq	r7, r5
 8006f02:	2d10      	cmp	r5, #16
 8006f04:	462c      	mov	r4, r5
 8006f06:	bfa8      	it	ge
 8006f08:	2410      	movge	r4, #16
 8006f0a:	f7f9 fafb 	bl	8000504 <__aeabi_ui2d>
 8006f0e:	2d09      	cmp	r5, #9
 8006f10:	4682      	mov	sl, r0
 8006f12:	468b      	mov	fp, r1
 8006f14:	dc13      	bgt.n	8006f3e <_strtod_l+0x3d6>
 8006f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	f43f ae5e 	beq.w	8006bda <_strtod_l+0x72>
 8006f1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f20:	dd78      	ble.n	8007014 <_strtod_l+0x4ac>
 8006f22:	2b16      	cmp	r3, #22
 8006f24:	dc5f      	bgt.n	8006fe6 <_strtod_l+0x47e>
 8006f26:	4974      	ldr	r1, [pc, #464]	@ (80070f8 <_strtod_l+0x590>)
 8006f28:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f30:	4652      	mov	r2, sl
 8006f32:	465b      	mov	r3, fp
 8006f34:	f7f9 fb60 	bl	80005f8 <__aeabi_dmul>
 8006f38:	4682      	mov	sl, r0
 8006f3a:	468b      	mov	fp, r1
 8006f3c:	e64d      	b.n	8006bda <_strtod_l+0x72>
 8006f3e:	4b6e      	ldr	r3, [pc, #440]	@ (80070f8 <_strtod_l+0x590>)
 8006f40:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006f44:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8006f48:	f7f9 fb56 	bl	80005f8 <__aeabi_dmul>
 8006f4c:	4682      	mov	sl, r0
 8006f4e:	9808      	ldr	r0, [sp, #32]
 8006f50:	468b      	mov	fp, r1
 8006f52:	f7f9 fad7 	bl	8000504 <__aeabi_ui2d>
 8006f56:	4602      	mov	r2, r0
 8006f58:	460b      	mov	r3, r1
 8006f5a:	4650      	mov	r0, sl
 8006f5c:	4659      	mov	r1, fp
 8006f5e:	f7f9 f995 	bl	800028c <__adddf3>
 8006f62:	2d0f      	cmp	r5, #15
 8006f64:	4682      	mov	sl, r0
 8006f66:	468b      	mov	fp, r1
 8006f68:	ddd5      	ble.n	8006f16 <_strtod_l+0x3ae>
 8006f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f6c:	1b2c      	subs	r4, r5, r4
 8006f6e:	441c      	add	r4, r3
 8006f70:	2c00      	cmp	r4, #0
 8006f72:	f340 8096 	ble.w	80070a2 <_strtod_l+0x53a>
 8006f76:	f014 030f 	ands.w	r3, r4, #15
 8006f7a:	d00a      	beq.n	8006f92 <_strtod_l+0x42a>
 8006f7c:	495e      	ldr	r1, [pc, #376]	@ (80070f8 <_strtod_l+0x590>)
 8006f7e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8006f82:	4652      	mov	r2, sl
 8006f84:	465b      	mov	r3, fp
 8006f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006f8a:	f7f9 fb35 	bl	80005f8 <__aeabi_dmul>
 8006f8e:	4682      	mov	sl, r0
 8006f90:	468b      	mov	fp, r1
 8006f92:	f034 040f 	bics.w	r4, r4, #15
 8006f96:	d073      	beq.n	8007080 <_strtod_l+0x518>
 8006f98:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8006f9c:	dd48      	ble.n	8007030 <_strtod_l+0x4c8>
 8006f9e:	2400      	movs	r4, #0
 8006fa0:	46a0      	mov	r8, r4
 8006fa2:	940a      	str	r4, [sp, #40]	@ 0x28
 8006fa4:	46a1      	mov	r9, r4
 8006fa6:	9a05      	ldr	r2, [sp, #20]
 8006fa8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007100 <_strtod_l+0x598>
 8006fac:	2322      	movs	r3, #34	@ 0x22
 8006fae:	6013      	str	r3, [r2, #0]
 8006fb0:	f04f 0a00 	mov.w	sl, #0
 8006fb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f43f ae0f 	beq.w	8006bda <_strtod_l+0x72>
 8006fbc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006fbe:	9805      	ldr	r0, [sp, #20]
 8006fc0:	f002 ff4e 	bl	8009e60 <_Bfree>
 8006fc4:	9805      	ldr	r0, [sp, #20]
 8006fc6:	4649      	mov	r1, r9
 8006fc8:	f002 ff4a 	bl	8009e60 <_Bfree>
 8006fcc:	9805      	ldr	r0, [sp, #20]
 8006fce:	4641      	mov	r1, r8
 8006fd0:	f002 ff46 	bl	8009e60 <_Bfree>
 8006fd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006fd6:	9805      	ldr	r0, [sp, #20]
 8006fd8:	f002 ff42 	bl	8009e60 <_Bfree>
 8006fdc:	9805      	ldr	r0, [sp, #20]
 8006fde:	4621      	mov	r1, r4
 8006fe0:	f002 ff3e 	bl	8009e60 <_Bfree>
 8006fe4:	e5f9      	b.n	8006bda <_strtod_l+0x72>
 8006fe6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006fe8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8006fec:	4293      	cmp	r3, r2
 8006fee:	dbbc      	blt.n	8006f6a <_strtod_l+0x402>
 8006ff0:	4c41      	ldr	r4, [pc, #260]	@ (80070f8 <_strtod_l+0x590>)
 8006ff2:	f1c5 050f 	rsb	r5, r5, #15
 8006ff6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8006ffa:	4652      	mov	r2, sl
 8006ffc:	465b      	mov	r3, fp
 8006ffe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007002:	f7f9 faf9 	bl	80005f8 <__aeabi_dmul>
 8007006:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007008:	1b5d      	subs	r5, r3, r5
 800700a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800700e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007012:	e78f      	b.n	8006f34 <_strtod_l+0x3cc>
 8007014:	3316      	adds	r3, #22
 8007016:	dba8      	blt.n	8006f6a <_strtod_l+0x402>
 8007018:	4b37      	ldr	r3, [pc, #220]	@ (80070f8 <_strtod_l+0x590>)
 800701a:	eba9 0808 	sub.w	r8, r9, r8
 800701e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007022:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007026:	4650      	mov	r0, sl
 8007028:	4659      	mov	r1, fp
 800702a:	f7f9 fc0f 	bl	800084c <__aeabi_ddiv>
 800702e:	e783      	b.n	8006f38 <_strtod_l+0x3d0>
 8007030:	4b32      	ldr	r3, [pc, #200]	@ (80070fc <_strtod_l+0x594>)
 8007032:	9308      	str	r3, [sp, #32]
 8007034:	2300      	movs	r3, #0
 8007036:	1124      	asrs	r4, r4, #4
 8007038:	4650      	mov	r0, sl
 800703a:	4659      	mov	r1, fp
 800703c:	461e      	mov	r6, r3
 800703e:	2c01      	cmp	r4, #1
 8007040:	dc21      	bgt.n	8007086 <_strtod_l+0x51e>
 8007042:	b10b      	cbz	r3, 8007048 <_strtod_l+0x4e0>
 8007044:	4682      	mov	sl, r0
 8007046:	468b      	mov	fp, r1
 8007048:	492c      	ldr	r1, [pc, #176]	@ (80070fc <_strtod_l+0x594>)
 800704a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800704e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007052:	4652      	mov	r2, sl
 8007054:	465b      	mov	r3, fp
 8007056:	e9d1 0100 	ldrd	r0, r1, [r1]
 800705a:	f7f9 facd 	bl	80005f8 <__aeabi_dmul>
 800705e:	4b28      	ldr	r3, [pc, #160]	@ (8007100 <_strtod_l+0x598>)
 8007060:	460a      	mov	r2, r1
 8007062:	400b      	ands	r3, r1
 8007064:	4927      	ldr	r1, [pc, #156]	@ (8007104 <_strtod_l+0x59c>)
 8007066:	428b      	cmp	r3, r1
 8007068:	4682      	mov	sl, r0
 800706a:	d898      	bhi.n	8006f9e <_strtod_l+0x436>
 800706c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007070:	428b      	cmp	r3, r1
 8007072:	bf86      	itte	hi
 8007074:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007108 <_strtod_l+0x5a0>
 8007078:	f04f 3aff 	movhi.w	sl, #4294967295
 800707c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007080:	2300      	movs	r3, #0
 8007082:	9308      	str	r3, [sp, #32]
 8007084:	e07a      	b.n	800717c <_strtod_l+0x614>
 8007086:	07e2      	lsls	r2, r4, #31
 8007088:	d505      	bpl.n	8007096 <_strtod_l+0x52e>
 800708a:	9b08      	ldr	r3, [sp, #32]
 800708c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007090:	f7f9 fab2 	bl	80005f8 <__aeabi_dmul>
 8007094:	2301      	movs	r3, #1
 8007096:	9a08      	ldr	r2, [sp, #32]
 8007098:	3208      	adds	r2, #8
 800709a:	3601      	adds	r6, #1
 800709c:	1064      	asrs	r4, r4, #1
 800709e:	9208      	str	r2, [sp, #32]
 80070a0:	e7cd      	b.n	800703e <_strtod_l+0x4d6>
 80070a2:	d0ed      	beq.n	8007080 <_strtod_l+0x518>
 80070a4:	4264      	negs	r4, r4
 80070a6:	f014 020f 	ands.w	r2, r4, #15
 80070aa:	d00a      	beq.n	80070c2 <_strtod_l+0x55a>
 80070ac:	4b12      	ldr	r3, [pc, #72]	@ (80070f8 <_strtod_l+0x590>)
 80070ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80070b2:	4650      	mov	r0, sl
 80070b4:	4659      	mov	r1, fp
 80070b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ba:	f7f9 fbc7 	bl	800084c <__aeabi_ddiv>
 80070be:	4682      	mov	sl, r0
 80070c0:	468b      	mov	fp, r1
 80070c2:	1124      	asrs	r4, r4, #4
 80070c4:	d0dc      	beq.n	8007080 <_strtod_l+0x518>
 80070c6:	2c1f      	cmp	r4, #31
 80070c8:	dd20      	ble.n	800710c <_strtod_l+0x5a4>
 80070ca:	2400      	movs	r4, #0
 80070cc:	46a0      	mov	r8, r4
 80070ce:	940a      	str	r4, [sp, #40]	@ 0x28
 80070d0:	46a1      	mov	r9, r4
 80070d2:	9a05      	ldr	r2, [sp, #20]
 80070d4:	2322      	movs	r3, #34	@ 0x22
 80070d6:	f04f 0a00 	mov.w	sl, #0
 80070da:	f04f 0b00 	mov.w	fp, #0
 80070de:	6013      	str	r3, [r2, #0]
 80070e0:	e768      	b.n	8006fb4 <_strtod_l+0x44c>
 80070e2:	bf00      	nop
 80070e4:	0800b78d 	.word	0x0800b78d
 80070e8:	0800b72c 	.word	0x0800b72c
 80070ec:	0800b785 	.word	0x0800b785
 80070f0:	0800b7c4 	.word	0x0800b7c4
 80070f4:	0800bb55 	.word	0x0800bb55
 80070f8:	0800b940 	.word	0x0800b940
 80070fc:	0800b918 	.word	0x0800b918
 8007100:	7ff00000 	.word	0x7ff00000
 8007104:	7ca00000 	.word	0x7ca00000
 8007108:	7fefffff 	.word	0x7fefffff
 800710c:	f014 0310 	ands.w	r3, r4, #16
 8007110:	bf18      	it	ne
 8007112:	236a      	movne	r3, #106	@ 0x6a
 8007114:	4ea9      	ldr	r6, [pc, #676]	@ (80073bc <_strtod_l+0x854>)
 8007116:	9308      	str	r3, [sp, #32]
 8007118:	4650      	mov	r0, sl
 800711a:	4659      	mov	r1, fp
 800711c:	2300      	movs	r3, #0
 800711e:	07e2      	lsls	r2, r4, #31
 8007120:	d504      	bpl.n	800712c <_strtod_l+0x5c4>
 8007122:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007126:	f7f9 fa67 	bl	80005f8 <__aeabi_dmul>
 800712a:	2301      	movs	r3, #1
 800712c:	1064      	asrs	r4, r4, #1
 800712e:	f106 0608 	add.w	r6, r6, #8
 8007132:	d1f4      	bne.n	800711e <_strtod_l+0x5b6>
 8007134:	b10b      	cbz	r3, 800713a <_strtod_l+0x5d2>
 8007136:	4682      	mov	sl, r0
 8007138:	468b      	mov	fp, r1
 800713a:	9b08      	ldr	r3, [sp, #32]
 800713c:	b1b3      	cbz	r3, 800716c <_strtod_l+0x604>
 800713e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007142:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007146:	2b00      	cmp	r3, #0
 8007148:	4659      	mov	r1, fp
 800714a:	dd0f      	ble.n	800716c <_strtod_l+0x604>
 800714c:	2b1f      	cmp	r3, #31
 800714e:	dd55      	ble.n	80071fc <_strtod_l+0x694>
 8007150:	2b34      	cmp	r3, #52	@ 0x34
 8007152:	bfde      	ittt	le
 8007154:	f04f 33ff 	movle.w	r3, #4294967295
 8007158:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800715c:	4093      	lslle	r3, r2
 800715e:	f04f 0a00 	mov.w	sl, #0
 8007162:	bfcc      	ite	gt
 8007164:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007168:	ea03 0b01 	andle.w	fp, r3, r1
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	4650      	mov	r0, sl
 8007172:	4659      	mov	r1, fp
 8007174:	f7f9 fca8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007178:	2800      	cmp	r0, #0
 800717a:	d1a6      	bne.n	80070ca <_strtod_l+0x562>
 800717c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007182:	9805      	ldr	r0, [sp, #20]
 8007184:	462b      	mov	r3, r5
 8007186:	463a      	mov	r2, r7
 8007188:	f002 fed2 	bl	8009f30 <__s2b>
 800718c:	900a      	str	r0, [sp, #40]	@ 0x28
 800718e:	2800      	cmp	r0, #0
 8007190:	f43f af05 	beq.w	8006f9e <_strtod_l+0x436>
 8007194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007196:	2a00      	cmp	r2, #0
 8007198:	eba9 0308 	sub.w	r3, r9, r8
 800719c:	bfa8      	it	ge
 800719e:	2300      	movge	r3, #0
 80071a0:	9312      	str	r3, [sp, #72]	@ 0x48
 80071a2:	2400      	movs	r4, #0
 80071a4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80071a8:	9316      	str	r3, [sp, #88]	@ 0x58
 80071aa:	46a0      	mov	r8, r4
 80071ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071ae:	9805      	ldr	r0, [sp, #20]
 80071b0:	6859      	ldr	r1, [r3, #4]
 80071b2:	f002 fe15 	bl	8009de0 <_Balloc>
 80071b6:	4681      	mov	r9, r0
 80071b8:	2800      	cmp	r0, #0
 80071ba:	f43f aef4 	beq.w	8006fa6 <_strtod_l+0x43e>
 80071be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	3202      	adds	r2, #2
 80071c4:	f103 010c 	add.w	r1, r3, #12
 80071c8:	0092      	lsls	r2, r2, #2
 80071ca:	300c      	adds	r0, #12
 80071cc:	f001 fb4f 	bl	800886e <memcpy>
 80071d0:	ec4b ab10 	vmov	d0, sl, fp
 80071d4:	9805      	ldr	r0, [sp, #20]
 80071d6:	aa1c      	add	r2, sp, #112	@ 0x70
 80071d8:	a91b      	add	r1, sp, #108	@ 0x6c
 80071da:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80071de:	f003 f9e3 	bl	800a5a8 <__d2b>
 80071e2:	901a      	str	r0, [sp, #104]	@ 0x68
 80071e4:	2800      	cmp	r0, #0
 80071e6:	f43f aede 	beq.w	8006fa6 <_strtod_l+0x43e>
 80071ea:	9805      	ldr	r0, [sp, #20]
 80071ec:	2101      	movs	r1, #1
 80071ee:	f002 ff35 	bl	800a05c <__i2b>
 80071f2:	4680      	mov	r8, r0
 80071f4:	b948      	cbnz	r0, 800720a <_strtod_l+0x6a2>
 80071f6:	f04f 0800 	mov.w	r8, #0
 80071fa:	e6d4      	b.n	8006fa6 <_strtod_l+0x43e>
 80071fc:	f04f 32ff 	mov.w	r2, #4294967295
 8007200:	fa02 f303 	lsl.w	r3, r2, r3
 8007204:	ea03 0a0a 	and.w	sl, r3, sl
 8007208:	e7b0      	b.n	800716c <_strtod_l+0x604>
 800720a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800720c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800720e:	2d00      	cmp	r5, #0
 8007210:	bfab      	itete	ge
 8007212:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007214:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007216:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007218:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800721a:	bfac      	ite	ge
 800721c:	18ef      	addge	r7, r5, r3
 800721e:	1b5e      	sublt	r6, r3, r5
 8007220:	9b08      	ldr	r3, [sp, #32]
 8007222:	1aed      	subs	r5, r5, r3
 8007224:	4415      	add	r5, r2
 8007226:	4b66      	ldr	r3, [pc, #408]	@ (80073c0 <_strtod_l+0x858>)
 8007228:	3d01      	subs	r5, #1
 800722a:	429d      	cmp	r5, r3
 800722c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007230:	da50      	bge.n	80072d4 <_strtod_l+0x76c>
 8007232:	1b5b      	subs	r3, r3, r5
 8007234:	2b1f      	cmp	r3, #31
 8007236:	eba2 0203 	sub.w	r2, r2, r3
 800723a:	f04f 0101 	mov.w	r1, #1
 800723e:	dc3d      	bgt.n	80072bc <_strtod_l+0x754>
 8007240:	fa01 f303 	lsl.w	r3, r1, r3
 8007244:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007246:	2300      	movs	r3, #0
 8007248:	9310      	str	r3, [sp, #64]	@ 0x40
 800724a:	18bd      	adds	r5, r7, r2
 800724c:	9b08      	ldr	r3, [sp, #32]
 800724e:	42af      	cmp	r7, r5
 8007250:	4416      	add	r6, r2
 8007252:	441e      	add	r6, r3
 8007254:	463b      	mov	r3, r7
 8007256:	bfa8      	it	ge
 8007258:	462b      	movge	r3, r5
 800725a:	42b3      	cmp	r3, r6
 800725c:	bfa8      	it	ge
 800725e:	4633      	movge	r3, r6
 8007260:	2b00      	cmp	r3, #0
 8007262:	bfc2      	ittt	gt
 8007264:	1aed      	subgt	r5, r5, r3
 8007266:	1af6      	subgt	r6, r6, r3
 8007268:	1aff      	subgt	r7, r7, r3
 800726a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800726c:	2b00      	cmp	r3, #0
 800726e:	dd16      	ble.n	800729e <_strtod_l+0x736>
 8007270:	4641      	mov	r1, r8
 8007272:	9805      	ldr	r0, [sp, #20]
 8007274:	461a      	mov	r2, r3
 8007276:	f002 ffb1 	bl	800a1dc <__pow5mult>
 800727a:	4680      	mov	r8, r0
 800727c:	2800      	cmp	r0, #0
 800727e:	d0ba      	beq.n	80071f6 <_strtod_l+0x68e>
 8007280:	4601      	mov	r1, r0
 8007282:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007284:	9805      	ldr	r0, [sp, #20]
 8007286:	f002 feff 	bl	800a088 <__multiply>
 800728a:	900e      	str	r0, [sp, #56]	@ 0x38
 800728c:	2800      	cmp	r0, #0
 800728e:	f43f ae8a 	beq.w	8006fa6 <_strtod_l+0x43e>
 8007292:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007294:	9805      	ldr	r0, [sp, #20]
 8007296:	f002 fde3 	bl	8009e60 <_Bfree>
 800729a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800729c:	931a      	str	r3, [sp, #104]	@ 0x68
 800729e:	2d00      	cmp	r5, #0
 80072a0:	dc1d      	bgt.n	80072de <_strtod_l+0x776>
 80072a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	dd23      	ble.n	80072f0 <_strtod_l+0x788>
 80072a8:	4649      	mov	r1, r9
 80072aa:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80072ac:	9805      	ldr	r0, [sp, #20]
 80072ae:	f002 ff95 	bl	800a1dc <__pow5mult>
 80072b2:	4681      	mov	r9, r0
 80072b4:	b9e0      	cbnz	r0, 80072f0 <_strtod_l+0x788>
 80072b6:	f04f 0900 	mov.w	r9, #0
 80072ba:	e674      	b.n	8006fa6 <_strtod_l+0x43e>
 80072bc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80072c0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80072c4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80072c8:	35e2      	adds	r5, #226	@ 0xe2
 80072ca:	fa01 f305 	lsl.w	r3, r1, r5
 80072ce:	9310      	str	r3, [sp, #64]	@ 0x40
 80072d0:	9113      	str	r1, [sp, #76]	@ 0x4c
 80072d2:	e7ba      	b.n	800724a <_strtod_l+0x6e2>
 80072d4:	2300      	movs	r3, #0
 80072d6:	9310      	str	r3, [sp, #64]	@ 0x40
 80072d8:	2301      	movs	r3, #1
 80072da:	9313      	str	r3, [sp, #76]	@ 0x4c
 80072dc:	e7b5      	b.n	800724a <_strtod_l+0x6e2>
 80072de:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80072e0:	9805      	ldr	r0, [sp, #20]
 80072e2:	462a      	mov	r2, r5
 80072e4:	f002 ffd4 	bl	800a290 <__lshift>
 80072e8:	901a      	str	r0, [sp, #104]	@ 0x68
 80072ea:	2800      	cmp	r0, #0
 80072ec:	d1d9      	bne.n	80072a2 <_strtod_l+0x73a>
 80072ee:	e65a      	b.n	8006fa6 <_strtod_l+0x43e>
 80072f0:	2e00      	cmp	r6, #0
 80072f2:	dd07      	ble.n	8007304 <_strtod_l+0x79c>
 80072f4:	4649      	mov	r1, r9
 80072f6:	9805      	ldr	r0, [sp, #20]
 80072f8:	4632      	mov	r2, r6
 80072fa:	f002 ffc9 	bl	800a290 <__lshift>
 80072fe:	4681      	mov	r9, r0
 8007300:	2800      	cmp	r0, #0
 8007302:	d0d8      	beq.n	80072b6 <_strtod_l+0x74e>
 8007304:	2f00      	cmp	r7, #0
 8007306:	dd08      	ble.n	800731a <_strtod_l+0x7b2>
 8007308:	4641      	mov	r1, r8
 800730a:	9805      	ldr	r0, [sp, #20]
 800730c:	463a      	mov	r2, r7
 800730e:	f002 ffbf 	bl	800a290 <__lshift>
 8007312:	4680      	mov	r8, r0
 8007314:	2800      	cmp	r0, #0
 8007316:	f43f ae46 	beq.w	8006fa6 <_strtod_l+0x43e>
 800731a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800731c:	9805      	ldr	r0, [sp, #20]
 800731e:	464a      	mov	r2, r9
 8007320:	f003 f83e 	bl	800a3a0 <__mdiff>
 8007324:	4604      	mov	r4, r0
 8007326:	2800      	cmp	r0, #0
 8007328:	f43f ae3d 	beq.w	8006fa6 <_strtod_l+0x43e>
 800732c:	68c3      	ldr	r3, [r0, #12]
 800732e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007330:	2300      	movs	r3, #0
 8007332:	60c3      	str	r3, [r0, #12]
 8007334:	4641      	mov	r1, r8
 8007336:	f003 f817 	bl	800a368 <__mcmp>
 800733a:	2800      	cmp	r0, #0
 800733c:	da46      	bge.n	80073cc <_strtod_l+0x864>
 800733e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007340:	ea53 030a 	orrs.w	r3, r3, sl
 8007344:	d16c      	bne.n	8007420 <_strtod_l+0x8b8>
 8007346:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800734a:	2b00      	cmp	r3, #0
 800734c:	d168      	bne.n	8007420 <_strtod_l+0x8b8>
 800734e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007352:	0d1b      	lsrs	r3, r3, #20
 8007354:	051b      	lsls	r3, r3, #20
 8007356:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800735a:	d961      	bls.n	8007420 <_strtod_l+0x8b8>
 800735c:	6963      	ldr	r3, [r4, #20]
 800735e:	b913      	cbnz	r3, 8007366 <_strtod_l+0x7fe>
 8007360:	6923      	ldr	r3, [r4, #16]
 8007362:	2b01      	cmp	r3, #1
 8007364:	dd5c      	ble.n	8007420 <_strtod_l+0x8b8>
 8007366:	4621      	mov	r1, r4
 8007368:	2201      	movs	r2, #1
 800736a:	9805      	ldr	r0, [sp, #20]
 800736c:	f002 ff90 	bl	800a290 <__lshift>
 8007370:	4641      	mov	r1, r8
 8007372:	4604      	mov	r4, r0
 8007374:	f002 fff8 	bl	800a368 <__mcmp>
 8007378:	2800      	cmp	r0, #0
 800737a:	dd51      	ble.n	8007420 <_strtod_l+0x8b8>
 800737c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007380:	9a08      	ldr	r2, [sp, #32]
 8007382:	0d1b      	lsrs	r3, r3, #20
 8007384:	051b      	lsls	r3, r3, #20
 8007386:	2a00      	cmp	r2, #0
 8007388:	d06b      	beq.n	8007462 <_strtod_l+0x8fa>
 800738a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800738e:	d868      	bhi.n	8007462 <_strtod_l+0x8fa>
 8007390:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007394:	f67f ae9d 	bls.w	80070d2 <_strtod_l+0x56a>
 8007398:	4b0a      	ldr	r3, [pc, #40]	@ (80073c4 <_strtod_l+0x85c>)
 800739a:	4650      	mov	r0, sl
 800739c:	4659      	mov	r1, fp
 800739e:	2200      	movs	r2, #0
 80073a0:	f7f9 f92a 	bl	80005f8 <__aeabi_dmul>
 80073a4:	4b08      	ldr	r3, [pc, #32]	@ (80073c8 <_strtod_l+0x860>)
 80073a6:	400b      	ands	r3, r1
 80073a8:	4682      	mov	sl, r0
 80073aa:	468b      	mov	fp, r1
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	f47f ae05 	bne.w	8006fbc <_strtod_l+0x454>
 80073b2:	9a05      	ldr	r2, [sp, #20]
 80073b4:	2322      	movs	r3, #34	@ 0x22
 80073b6:	6013      	str	r3, [r2, #0]
 80073b8:	e600      	b.n	8006fbc <_strtod_l+0x454>
 80073ba:	bf00      	nop
 80073bc:	0800b758 	.word	0x0800b758
 80073c0:	fffffc02 	.word	0xfffffc02
 80073c4:	39500000 	.word	0x39500000
 80073c8:	7ff00000 	.word	0x7ff00000
 80073cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80073d0:	d165      	bne.n	800749e <_strtod_l+0x936>
 80073d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80073d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80073d8:	b35a      	cbz	r2, 8007432 <_strtod_l+0x8ca>
 80073da:	4a9f      	ldr	r2, [pc, #636]	@ (8007658 <_strtod_l+0xaf0>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d12b      	bne.n	8007438 <_strtod_l+0x8d0>
 80073e0:	9b08      	ldr	r3, [sp, #32]
 80073e2:	4651      	mov	r1, sl
 80073e4:	b303      	cbz	r3, 8007428 <_strtod_l+0x8c0>
 80073e6:	4b9d      	ldr	r3, [pc, #628]	@ (800765c <_strtod_l+0xaf4>)
 80073e8:	465a      	mov	r2, fp
 80073ea:	4013      	ands	r3, r2
 80073ec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80073f0:	f04f 32ff 	mov.w	r2, #4294967295
 80073f4:	d81b      	bhi.n	800742e <_strtod_l+0x8c6>
 80073f6:	0d1b      	lsrs	r3, r3, #20
 80073f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80073fc:	fa02 f303 	lsl.w	r3, r2, r3
 8007400:	4299      	cmp	r1, r3
 8007402:	d119      	bne.n	8007438 <_strtod_l+0x8d0>
 8007404:	4b96      	ldr	r3, [pc, #600]	@ (8007660 <_strtod_l+0xaf8>)
 8007406:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007408:	429a      	cmp	r2, r3
 800740a:	d102      	bne.n	8007412 <_strtod_l+0x8aa>
 800740c:	3101      	adds	r1, #1
 800740e:	f43f adca 	beq.w	8006fa6 <_strtod_l+0x43e>
 8007412:	4b92      	ldr	r3, [pc, #584]	@ (800765c <_strtod_l+0xaf4>)
 8007414:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007416:	401a      	ands	r2, r3
 8007418:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800741c:	f04f 0a00 	mov.w	sl, #0
 8007420:	9b08      	ldr	r3, [sp, #32]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1b8      	bne.n	8007398 <_strtod_l+0x830>
 8007426:	e5c9      	b.n	8006fbc <_strtod_l+0x454>
 8007428:	f04f 33ff 	mov.w	r3, #4294967295
 800742c:	e7e8      	b.n	8007400 <_strtod_l+0x898>
 800742e:	4613      	mov	r3, r2
 8007430:	e7e6      	b.n	8007400 <_strtod_l+0x898>
 8007432:	ea53 030a 	orrs.w	r3, r3, sl
 8007436:	d0a1      	beq.n	800737c <_strtod_l+0x814>
 8007438:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800743a:	b1db      	cbz	r3, 8007474 <_strtod_l+0x90c>
 800743c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800743e:	4213      	tst	r3, r2
 8007440:	d0ee      	beq.n	8007420 <_strtod_l+0x8b8>
 8007442:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007444:	9a08      	ldr	r2, [sp, #32]
 8007446:	4650      	mov	r0, sl
 8007448:	4659      	mov	r1, fp
 800744a:	b1bb      	cbz	r3, 800747c <_strtod_l+0x914>
 800744c:	f7ff fb6c 	bl	8006b28 <sulp>
 8007450:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007454:	ec53 2b10 	vmov	r2, r3, d0
 8007458:	f7f8 ff18 	bl	800028c <__adddf3>
 800745c:	4682      	mov	sl, r0
 800745e:	468b      	mov	fp, r1
 8007460:	e7de      	b.n	8007420 <_strtod_l+0x8b8>
 8007462:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007466:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800746a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800746e:	f04f 3aff 	mov.w	sl, #4294967295
 8007472:	e7d5      	b.n	8007420 <_strtod_l+0x8b8>
 8007474:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007476:	ea13 0f0a 	tst.w	r3, sl
 800747a:	e7e1      	b.n	8007440 <_strtod_l+0x8d8>
 800747c:	f7ff fb54 	bl	8006b28 <sulp>
 8007480:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007484:	ec53 2b10 	vmov	r2, r3, d0
 8007488:	f7f8 fefe 	bl	8000288 <__aeabi_dsub>
 800748c:	2200      	movs	r2, #0
 800748e:	2300      	movs	r3, #0
 8007490:	4682      	mov	sl, r0
 8007492:	468b      	mov	fp, r1
 8007494:	f7f9 fb18 	bl	8000ac8 <__aeabi_dcmpeq>
 8007498:	2800      	cmp	r0, #0
 800749a:	d0c1      	beq.n	8007420 <_strtod_l+0x8b8>
 800749c:	e619      	b.n	80070d2 <_strtod_l+0x56a>
 800749e:	4641      	mov	r1, r8
 80074a0:	4620      	mov	r0, r4
 80074a2:	f003 f8d9 	bl	800a658 <__ratio>
 80074a6:	ec57 6b10 	vmov	r6, r7, d0
 80074aa:	2200      	movs	r2, #0
 80074ac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80074b0:	4630      	mov	r0, r6
 80074b2:	4639      	mov	r1, r7
 80074b4:	f7f9 fb1c 	bl	8000af0 <__aeabi_dcmple>
 80074b8:	2800      	cmp	r0, #0
 80074ba:	d06f      	beq.n	800759c <_strtod_l+0xa34>
 80074bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d17a      	bne.n	80075b8 <_strtod_l+0xa50>
 80074c2:	f1ba 0f00 	cmp.w	sl, #0
 80074c6:	d158      	bne.n	800757a <_strtod_l+0xa12>
 80074c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80074ca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d15a      	bne.n	8007588 <_strtod_l+0xa20>
 80074d2:	4b64      	ldr	r3, [pc, #400]	@ (8007664 <_strtod_l+0xafc>)
 80074d4:	2200      	movs	r2, #0
 80074d6:	4630      	mov	r0, r6
 80074d8:	4639      	mov	r1, r7
 80074da:	f7f9 faff 	bl	8000adc <__aeabi_dcmplt>
 80074de:	2800      	cmp	r0, #0
 80074e0:	d159      	bne.n	8007596 <_strtod_l+0xa2e>
 80074e2:	4630      	mov	r0, r6
 80074e4:	4639      	mov	r1, r7
 80074e6:	4b60      	ldr	r3, [pc, #384]	@ (8007668 <_strtod_l+0xb00>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	f7f9 f885 	bl	80005f8 <__aeabi_dmul>
 80074ee:	4606      	mov	r6, r0
 80074f0:	460f      	mov	r7, r1
 80074f2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80074f6:	9606      	str	r6, [sp, #24]
 80074f8:	9307      	str	r3, [sp, #28]
 80074fa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80074fe:	4d57      	ldr	r5, [pc, #348]	@ (800765c <_strtod_l+0xaf4>)
 8007500:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007504:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007506:	401d      	ands	r5, r3
 8007508:	4b58      	ldr	r3, [pc, #352]	@ (800766c <_strtod_l+0xb04>)
 800750a:	429d      	cmp	r5, r3
 800750c:	f040 80b2 	bne.w	8007674 <_strtod_l+0xb0c>
 8007510:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007512:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007516:	ec4b ab10 	vmov	d0, sl, fp
 800751a:	f002 ffd5 	bl	800a4c8 <__ulp>
 800751e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007522:	ec51 0b10 	vmov	r0, r1, d0
 8007526:	f7f9 f867 	bl	80005f8 <__aeabi_dmul>
 800752a:	4652      	mov	r2, sl
 800752c:	465b      	mov	r3, fp
 800752e:	f7f8 fead 	bl	800028c <__adddf3>
 8007532:	460b      	mov	r3, r1
 8007534:	4949      	ldr	r1, [pc, #292]	@ (800765c <_strtod_l+0xaf4>)
 8007536:	4a4e      	ldr	r2, [pc, #312]	@ (8007670 <_strtod_l+0xb08>)
 8007538:	4019      	ands	r1, r3
 800753a:	4291      	cmp	r1, r2
 800753c:	4682      	mov	sl, r0
 800753e:	d942      	bls.n	80075c6 <_strtod_l+0xa5e>
 8007540:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007542:	4b47      	ldr	r3, [pc, #284]	@ (8007660 <_strtod_l+0xaf8>)
 8007544:	429a      	cmp	r2, r3
 8007546:	d103      	bne.n	8007550 <_strtod_l+0x9e8>
 8007548:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800754a:	3301      	adds	r3, #1
 800754c:	f43f ad2b 	beq.w	8006fa6 <_strtod_l+0x43e>
 8007550:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007660 <_strtod_l+0xaf8>
 8007554:	f04f 3aff 	mov.w	sl, #4294967295
 8007558:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800755a:	9805      	ldr	r0, [sp, #20]
 800755c:	f002 fc80 	bl	8009e60 <_Bfree>
 8007560:	9805      	ldr	r0, [sp, #20]
 8007562:	4649      	mov	r1, r9
 8007564:	f002 fc7c 	bl	8009e60 <_Bfree>
 8007568:	9805      	ldr	r0, [sp, #20]
 800756a:	4641      	mov	r1, r8
 800756c:	f002 fc78 	bl	8009e60 <_Bfree>
 8007570:	9805      	ldr	r0, [sp, #20]
 8007572:	4621      	mov	r1, r4
 8007574:	f002 fc74 	bl	8009e60 <_Bfree>
 8007578:	e618      	b.n	80071ac <_strtod_l+0x644>
 800757a:	f1ba 0f01 	cmp.w	sl, #1
 800757e:	d103      	bne.n	8007588 <_strtod_l+0xa20>
 8007580:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007582:	2b00      	cmp	r3, #0
 8007584:	f43f ada5 	beq.w	80070d2 <_strtod_l+0x56a>
 8007588:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007638 <_strtod_l+0xad0>
 800758c:	4f35      	ldr	r7, [pc, #212]	@ (8007664 <_strtod_l+0xafc>)
 800758e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007592:	2600      	movs	r6, #0
 8007594:	e7b1      	b.n	80074fa <_strtod_l+0x992>
 8007596:	4f34      	ldr	r7, [pc, #208]	@ (8007668 <_strtod_l+0xb00>)
 8007598:	2600      	movs	r6, #0
 800759a:	e7aa      	b.n	80074f2 <_strtod_l+0x98a>
 800759c:	4b32      	ldr	r3, [pc, #200]	@ (8007668 <_strtod_l+0xb00>)
 800759e:	4630      	mov	r0, r6
 80075a0:	4639      	mov	r1, r7
 80075a2:	2200      	movs	r2, #0
 80075a4:	f7f9 f828 	bl	80005f8 <__aeabi_dmul>
 80075a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80075aa:	4606      	mov	r6, r0
 80075ac:	460f      	mov	r7, r1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d09f      	beq.n	80074f2 <_strtod_l+0x98a>
 80075b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80075b6:	e7a0      	b.n	80074fa <_strtod_l+0x992>
 80075b8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007640 <_strtod_l+0xad8>
 80075bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 80075c0:	ec57 6b17 	vmov	r6, r7, d7
 80075c4:	e799      	b.n	80074fa <_strtod_l+0x992>
 80075c6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80075ca:	9b08      	ldr	r3, [sp, #32]
 80075cc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d1c1      	bne.n	8007558 <_strtod_l+0x9f0>
 80075d4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80075d8:	0d1b      	lsrs	r3, r3, #20
 80075da:	051b      	lsls	r3, r3, #20
 80075dc:	429d      	cmp	r5, r3
 80075de:	d1bb      	bne.n	8007558 <_strtod_l+0x9f0>
 80075e0:	4630      	mov	r0, r6
 80075e2:	4639      	mov	r1, r7
 80075e4:	f7f9 fb68 	bl	8000cb8 <__aeabi_d2lz>
 80075e8:	f7f8 ffd8 	bl	800059c <__aeabi_l2d>
 80075ec:	4602      	mov	r2, r0
 80075ee:	460b      	mov	r3, r1
 80075f0:	4630      	mov	r0, r6
 80075f2:	4639      	mov	r1, r7
 80075f4:	f7f8 fe48 	bl	8000288 <__aeabi_dsub>
 80075f8:	460b      	mov	r3, r1
 80075fa:	4602      	mov	r2, r0
 80075fc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007600:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007606:	ea46 060a 	orr.w	r6, r6, sl
 800760a:	431e      	orrs	r6, r3
 800760c:	d06f      	beq.n	80076ee <_strtod_l+0xb86>
 800760e:	a30e      	add	r3, pc, #56	@ (adr r3, 8007648 <_strtod_l+0xae0>)
 8007610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007614:	f7f9 fa62 	bl	8000adc <__aeabi_dcmplt>
 8007618:	2800      	cmp	r0, #0
 800761a:	f47f accf 	bne.w	8006fbc <_strtod_l+0x454>
 800761e:	a30c      	add	r3, pc, #48	@ (adr r3, 8007650 <_strtod_l+0xae8>)
 8007620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007624:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007628:	f7f9 fa76 	bl	8000b18 <__aeabi_dcmpgt>
 800762c:	2800      	cmp	r0, #0
 800762e:	d093      	beq.n	8007558 <_strtod_l+0x9f0>
 8007630:	e4c4      	b.n	8006fbc <_strtod_l+0x454>
 8007632:	bf00      	nop
 8007634:	f3af 8000 	nop.w
 8007638:	00000000 	.word	0x00000000
 800763c:	bff00000 	.word	0xbff00000
 8007640:	00000000 	.word	0x00000000
 8007644:	3ff00000 	.word	0x3ff00000
 8007648:	94a03595 	.word	0x94a03595
 800764c:	3fdfffff 	.word	0x3fdfffff
 8007650:	35afe535 	.word	0x35afe535
 8007654:	3fe00000 	.word	0x3fe00000
 8007658:	000fffff 	.word	0x000fffff
 800765c:	7ff00000 	.word	0x7ff00000
 8007660:	7fefffff 	.word	0x7fefffff
 8007664:	3ff00000 	.word	0x3ff00000
 8007668:	3fe00000 	.word	0x3fe00000
 800766c:	7fe00000 	.word	0x7fe00000
 8007670:	7c9fffff 	.word	0x7c9fffff
 8007674:	9b08      	ldr	r3, [sp, #32]
 8007676:	b323      	cbz	r3, 80076c2 <_strtod_l+0xb5a>
 8007678:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800767c:	d821      	bhi.n	80076c2 <_strtod_l+0xb5a>
 800767e:	a328      	add	r3, pc, #160	@ (adr r3, 8007720 <_strtod_l+0xbb8>)
 8007680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007684:	4630      	mov	r0, r6
 8007686:	4639      	mov	r1, r7
 8007688:	f7f9 fa32 	bl	8000af0 <__aeabi_dcmple>
 800768c:	b1a0      	cbz	r0, 80076b8 <_strtod_l+0xb50>
 800768e:	4639      	mov	r1, r7
 8007690:	4630      	mov	r0, r6
 8007692:	f7f9 fa89 	bl	8000ba8 <__aeabi_d2uiz>
 8007696:	2801      	cmp	r0, #1
 8007698:	bf38      	it	cc
 800769a:	2001      	movcc	r0, #1
 800769c:	f7f8 ff32 	bl	8000504 <__aeabi_ui2d>
 80076a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076a2:	4606      	mov	r6, r0
 80076a4:	460f      	mov	r7, r1
 80076a6:	b9fb      	cbnz	r3, 80076e8 <_strtod_l+0xb80>
 80076a8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80076ac:	9014      	str	r0, [sp, #80]	@ 0x50
 80076ae:	9315      	str	r3, [sp, #84]	@ 0x54
 80076b0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 80076b4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80076b8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80076ba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 80076be:	1b5b      	subs	r3, r3, r5
 80076c0:	9311      	str	r3, [sp, #68]	@ 0x44
 80076c2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80076c6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 80076ca:	f002 fefd 	bl	800a4c8 <__ulp>
 80076ce:	4650      	mov	r0, sl
 80076d0:	ec53 2b10 	vmov	r2, r3, d0
 80076d4:	4659      	mov	r1, fp
 80076d6:	f7f8 ff8f 	bl	80005f8 <__aeabi_dmul>
 80076da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80076de:	f7f8 fdd5 	bl	800028c <__adddf3>
 80076e2:	4682      	mov	sl, r0
 80076e4:	468b      	mov	fp, r1
 80076e6:	e770      	b.n	80075ca <_strtod_l+0xa62>
 80076e8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80076ec:	e7e0      	b.n	80076b0 <_strtod_l+0xb48>
 80076ee:	a30e      	add	r3, pc, #56	@ (adr r3, 8007728 <_strtod_l+0xbc0>)
 80076f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076f4:	f7f9 f9f2 	bl	8000adc <__aeabi_dcmplt>
 80076f8:	e798      	b.n	800762c <_strtod_l+0xac4>
 80076fa:	2300      	movs	r3, #0
 80076fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076fe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007700:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007702:	6013      	str	r3, [r2, #0]
 8007704:	f7ff ba6d 	b.w	8006be2 <_strtod_l+0x7a>
 8007708:	2a65      	cmp	r2, #101	@ 0x65
 800770a:	f43f ab66 	beq.w	8006dda <_strtod_l+0x272>
 800770e:	2a45      	cmp	r2, #69	@ 0x45
 8007710:	f43f ab63 	beq.w	8006dda <_strtod_l+0x272>
 8007714:	2301      	movs	r3, #1
 8007716:	f7ff bb9e 	b.w	8006e56 <_strtod_l+0x2ee>
 800771a:	bf00      	nop
 800771c:	f3af 8000 	nop.w
 8007720:	ffc00000 	.word	0xffc00000
 8007724:	41dfffff 	.word	0x41dfffff
 8007728:	94a03595 	.word	0x94a03595
 800772c:	3fcfffff 	.word	0x3fcfffff

08007730 <_strtod_r>:
 8007730:	4b01      	ldr	r3, [pc, #4]	@ (8007738 <_strtod_r+0x8>)
 8007732:	f7ff ba19 	b.w	8006b68 <_strtod_l>
 8007736:	bf00      	nop
 8007738:	2000003c 	.word	0x2000003c

0800773c <strtof>:
 800773c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007740:	f8df 80bc 	ldr.w	r8, [pc, #188]	@ 8007800 <strtof+0xc4>
 8007744:	4b29      	ldr	r3, [pc, #164]	@ (80077ec <strtof+0xb0>)
 8007746:	460a      	mov	r2, r1
 8007748:	ed2d 8b02 	vpush	{d8}
 800774c:	4601      	mov	r1, r0
 800774e:	f8d8 0000 	ldr.w	r0, [r8]
 8007752:	f7ff fa09 	bl	8006b68 <_strtod_l>
 8007756:	ec55 4b10 	vmov	r4, r5, d0
 800775a:	4622      	mov	r2, r4
 800775c:	462b      	mov	r3, r5
 800775e:	4620      	mov	r0, r4
 8007760:	4629      	mov	r1, r5
 8007762:	f7f9 f9e3 	bl	8000b2c <__aeabi_dcmpun>
 8007766:	b190      	cbz	r0, 800778e <strtof+0x52>
 8007768:	2d00      	cmp	r5, #0
 800776a:	4821      	ldr	r0, [pc, #132]	@ (80077f0 <strtof+0xb4>)
 800776c:	da09      	bge.n	8007782 <strtof+0x46>
 800776e:	f001 f897 	bl	80088a0 <nanf>
 8007772:	eeb1 8a40 	vneg.f32	s16, s0
 8007776:	eeb0 0a48 	vmov.f32	s0, s16
 800777a:	ecbd 8b02 	vpop	{d8}
 800777e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007782:	ecbd 8b02 	vpop	{d8}
 8007786:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800778a:	f001 b889 	b.w	80088a0 <nanf>
 800778e:	4620      	mov	r0, r4
 8007790:	4629      	mov	r1, r5
 8007792:	f7f9 fa29 	bl	8000be8 <__aeabi_d2f>
 8007796:	ee08 0a10 	vmov	s16, r0
 800779a:	eddf 7a16 	vldr	s15, [pc, #88]	@ 80077f4 <strtof+0xb8>
 800779e:	eeb0 7ac8 	vabs.f32	s14, s16
 80077a2:	eeb4 7a67 	vcmp.f32	s14, s15
 80077a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077aa:	dd11      	ble.n	80077d0 <strtof+0x94>
 80077ac:	f025 4700 	bic.w	r7, r5, #2147483648	@ 0x80000000
 80077b0:	4b11      	ldr	r3, [pc, #68]	@ (80077f8 <strtof+0xbc>)
 80077b2:	f04f 32ff 	mov.w	r2, #4294967295
 80077b6:	4620      	mov	r0, r4
 80077b8:	4639      	mov	r1, r7
 80077ba:	f7f9 f9b7 	bl	8000b2c <__aeabi_dcmpun>
 80077be:	b980      	cbnz	r0, 80077e2 <strtof+0xa6>
 80077c0:	4b0d      	ldr	r3, [pc, #52]	@ (80077f8 <strtof+0xbc>)
 80077c2:	f04f 32ff 	mov.w	r2, #4294967295
 80077c6:	4620      	mov	r0, r4
 80077c8:	4639      	mov	r1, r7
 80077ca:	f7f9 f991 	bl	8000af0 <__aeabi_dcmple>
 80077ce:	b940      	cbnz	r0, 80077e2 <strtof+0xa6>
 80077d0:	ee18 3a10 	vmov	r3, s16
 80077d4:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80077d8:	d1cd      	bne.n	8007776 <strtof+0x3a>
 80077da:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <strtof+0xc0>)
 80077dc:	402b      	ands	r3, r5
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d0c9      	beq.n	8007776 <strtof+0x3a>
 80077e2:	f8d8 3000 	ldr.w	r3, [r8]
 80077e6:	2222      	movs	r2, #34	@ 0x22
 80077e8:	601a      	str	r2, [r3, #0]
 80077ea:	e7c4      	b.n	8007776 <strtof+0x3a>
 80077ec:	2000003c 	.word	0x2000003c
 80077f0:	0800bb55 	.word	0x0800bb55
 80077f4:	7f7fffff 	.word	0x7f7fffff
 80077f8:	7fefffff 	.word	0x7fefffff
 80077fc:	7ff00000 	.word	0x7ff00000
 8007800:	200001a8 	.word	0x200001a8

08007804 <__cvt>:
 8007804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007808:	ec57 6b10 	vmov	r6, r7, d0
 800780c:	2f00      	cmp	r7, #0
 800780e:	460c      	mov	r4, r1
 8007810:	4619      	mov	r1, r3
 8007812:	463b      	mov	r3, r7
 8007814:	bfbb      	ittet	lt
 8007816:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800781a:	461f      	movlt	r7, r3
 800781c:	2300      	movge	r3, #0
 800781e:	232d      	movlt	r3, #45	@ 0x2d
 8007820:	700b      	strb	r3, [r1, #0]
 8007822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007824:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8007828:	4691      	mov	r9, r2
 800782a:	f023 0820 	bic.w	r8, r3, #32
 800782e:	bfbc      	itt	lt
 8007830:	4632      	movlt	r2, r6
 8007832:	4616      	movlt	r6, r2
 8007834:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007838:	d005      	beq.n	8007846 <__cvt+0x42>
 800783a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800783e:	d100      	bne.n	8007842 <__cvt+0x3e>
 8007840:	3401      	adds	r4, #1
 8007842:	2102      	movs	r1, #2
 8007844:	e000      	b.n	8007848 <__cvt+0x44>
 8007846:	2103      	movs	r1, #3
 8007848:	ab03      	add	r3, sp, #12
 800784a:	9301      	str	r3, [sp, #4]
 800784c:	ab02      	add	r3, sp, #8
 800784e:	9300      	str	r3, [sp, #0]
 8007850:	ec47 6b10 	vmov	d0, r6, r7
 8007854:	4653      	mov	r3, sl
 8007856:	4622      	mov	r2, r4
 8007858:	f001 f8b2 	bl	80089c0 <_dtoa_r>
 800785c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007860:	4605      	mov	r5, r0
 8007862:	d119      	bne.n	8007898 <__cvt+0x94>
 8007864:	f019 0f01 	tst.w	r9, #1
 8007868:	d00e      	beq.n	8007888 <__cvt+0x84>
 800786a:	eb00 0904 	add.w	r9, r0, r4
 800786e:	2200      	movs	r2, #0
 8007870:	2300      	movs	r3, #0
 8007872:	4630      	mov	r0, r6
 8007874:	4639      	mov	r1, r7
 8007876:	f7f9 f927 	bl	8000ac8 <__aeabi_dcmpeq>
 800787a:	b108      	cbz	r0, 8007880 <__cvt+0x7c>
 800787c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007880:	2230      	movs	r2, #48	@ 0x30
 8007882:	9b03      	ldr	r3, [sp, #12]
 8007884:	454b      	cmp	r3, r9
 8007886:	d31e      	bcc.n	80078c6 <__cvt+0xc2>
 8007888:	9b03      	ldr	r3, [sp, #12]
 800788a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800788c:	1b5b      	subs	r3, r3, r5
 800788e:	4628      	mov	r0, r5
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	b004      	add	sp, #16
 8007894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007898:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800789c:	eb00 0904 	add.w	r9, r0, r4
 80078a0:	d1e5      	bne.n	800786e <__cvt+0x6a>
 80078a2:	7803      	ldrb	r3, [r0, #0]
 80078a4:	2b30      	cmp	r3, #48	@ 0x30
 80078a6:	d10a      	bne.n	80078be <__cvt+0xba>
 80078a8:	2200      	movs	r2, #0
 80078aa:	2300      	movs	r3, #0
 80078ac:	4630      	mov	r0, r6
 80078ae:	4639      	mov	r1, r7
 80078b0:	f7f9 f90a 	bl	8000ac8 <__aeabi_dcmpeq>
 80078b4:	b918      	cbnz	r0, 80078be <__cvt+0xba>
 80078b6:	f1c4 0401 	rsb	r4, r4, #1
 80078ba:	f8ca 4000 	str.w	r4, [sl]
 80078be:	f8da 3000 	ldr.w	r3, [sl]
 80078c2:	4499      	add	r9, r3
 80078c4:	e7d3      	b.n	800786e <__cvt+0x6a>
 80078c6:	1c59      	adds	r1, r3, #1
 80078c8:	9103      	str	r1, [sp, #12]
 80078ca:	701a      	strb	r2, [r3, #0]
 80078cc:	e7d9      	b.n	8007882 <__cvt+0x7e>

080078ce <__exponent>:
 80078ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80078d0:	2900      	cmp	r1, #0
 80078d2:	bfba      	itte	lt
 80078d4:	4249      	neglt	r1, r1
 80078d6:	232d      	movlt	r3, #45	@ 0x2d
 80078d8:	232b      	movge	r3, #43	@ 0x2b
 80078da:	2909      	cmp	r1, #9
 80078dc:	7002      	strb	r2, [r0, #0]
 80078de:	7043      	strb	r3, [r0, #1]
 80078e0:	dd29      	ble.n	8007936 <__exponent+0x68>
 80078e2:	f10d 0307 	add.w	r3, sp, #7
 80078e6:	461d      	mov	r5, r3
 80078e8:	270a      	movs	r7, #10
 80078ea:	461a      	mov	r2, r3
 80078ec:	fbb1 f6f7 	udiv	r6, r1, r7
 80078f0:	fb07 1416 	mls	r4, r7, r6, r1
 80078f4:	3430      	adds	r4, #48	@ 0x30
 80078f6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80078fa:	460c      	mov	r4, r1
 80078fc:	2c63      	cmp	r4, #99	@ 0x63
 80078fe:	f103 33ff 	add.w	r3, r3, #4294967295
 8007902:	4631      	mov	r1, r6
 8007904:	dcf1      	bgt.n	80078ea <__exponent+0x1c>
 8007906:	3130      	adds	r1, #48	@ 0x30
 8007908:	1e94      	subs	r4, r2, #2
 800790a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800790e:	1c41      	adds	r1, r0, #1
 8007910:	4623      	mov	r3, r4
 8007912:	42ab      	cmp	r3, r5
 8007914:	d30a      	bcc.n	800792c <__exponent+0x5e>
 8007916:	f10d 0309 	add.w	r3, sp, #9
 800791a:	1a9b      	subs	r3, r3, r2
 800791c:	42ac      	cmp	r4, r5
 800791e:	bf88      	it	hi
 8007920:	2300      	movhi	r3, #0
 8007922:	3302      	adds	r3, #2
 8007924:	4403      	add	r3, r0
 8007926:	1a18      	subs	r0, r3, r0
 8007928:	b003      	add	sp, #12
 800792a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800792c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007930:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007934:	e7ed      	b.n	8007912 <__exponent+0x44>
 8007936:	2330      	movs	r3, #48	@ 0x30
 8007938:	3130      	adds	r1, #48	@ 0x30
 800793a:	7083      	strb	r3, [r0, #2]
 800793c:	70c1      	strb	r1, [r0, #3]
 800793e:	1d03      	adds	r3, r0, #4
 8007940:	e7f1      	b.n	8007926 <__exponent+0x58>
	...

08007944 <_printf_float>:
 8007944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007948:	b08d      	sub	sp, #52	@ 0x34
 800794a:	460c      	mov	r4, r1
 800794c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007950:	4616      	mov	r6, r2
 8007952:	461f      	mov	r7, r3
 8007954:	4605      	mov	r5, r0
 8007956:	f000 ff13 	bl	8008780 <_localeconv_r>
 800795a:	6803      	ldr	r3, [r0, #0]
 800795c:	9304      	str	r3, [sp, #16]
 800795e:	4618      	mov	r0, r3
 8007960:	f7f8 fc86 	bl	8000270 <strlen>
 8007964:	2300      	movs	r3, #0
 8007966:	930a      	str	r3, [sp, #40]	@ 0x28
 8007968:	f8d8 3000 	ldr.w	r3, [r8]
 800796c:	9005      	str	r0, [sp, #20]
 800796e:	3307      	adds	r3, #7
 8007970:	f023 0307 	bic.w	r3, r3, #7
 8007974:	f103 0208 	add.w	r2, r3, #8
 8007978:	f894 a018 	ldrb.w	sl, [r4, #24]
 800797c:	f8d4 b000 	ldr.w	fp, [r4]
 8007980:	f8c8 2000 	str.w	r2, [r8]
 8007984:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007988:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800798c:	9307      	str	r3, [sp, #28]
 800798e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007992:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007996:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800799a:	4b9c      	ldr	r3, [pc, #624]	@ (8007c0c <_printf_float+0x2c8>)
 800799c:	f04f 32ff 	mov.w	r2, #4294967295
 80079a0:	f7f9 f8c4 	bl	8000b2c <__aeabi_dcmpun>
 80079a4:	bb70      	cbnz	r0, 8007a04 <_printf_float+0xc0>
 80079a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80079aa:	4b98      	ldr	r3, [pc, #608]	@ (8007c0c <_printf_float+0x2c8>)
 80079ac:	f04f 32ff 	mov.w	r2, #4294967295
 80079b0:	f7f9 f89e 	bl	8000af0 <__aeabi_dcmple>
 80079b4:	bb30      	cbnz	r0, 8007a04 <_printf_float+0xc0>
 80079b6:	2200      	movs	r2, #0
 80079b8:	2300      	movs	r3, #0
 80079ba:	4640      	mov	r0, r8
 80079bc:	4649      	mov	r1, r9
 80079be:	f7f9 f88d 	bl	8000adc <__aeabi_dcmplt>
 80079c2:	b110      	cbz	r0, 80079ca <_printf_float+0x86>
 80079c4:	232d      	movs	r3, #45	@ 0x2d
 80079c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079ca:	4a91      	ldr	r2, [pc, #580]	@ (8007c10 <_printf_float+0x2cc>)
 80079cc:	4b91      	ldr	r3, [pc, #580]	@ (8007c14 <_printf_float+0x2d0>)
 80079ce:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80079d2:	bf94      	ite	ls
 80079d4:	4690      	movls	r8, r2
 80079d6:	4698      	movhi	r8, r3
 80079d8:	2303      	movs	r3, #3
 80079da:	6123      	str	r3, [r4, #16]
 80079dc:	f02b 0304 	bic.w	r3, fp, #4
 80079e0:	6023      	str	r3, [r4, #0]
 80079e2:	f04f 0900 	mov.w	r9, #0
 80079e6:	9700      	str	r7, [sp, #0]
 80079e8:	4633      	mov	r3, r6
 80079ea:	aa0b      	add	r2, sp, #44	@ 0x2c
 80079ec:	4621      	mov	r1, r4
 80079ee:	4628      	mov	r0, r5
 80079f0:	f000 f9d2 	bl	8007d98 <_printf_common>
 80079f4:	3001      	adds	r0, #1
 80079f6:	f040 808d 	bne.w	8007b14 <_printf_float+0x1d0>
 80079fa:	f04f 30ff 	mov.w	r0, #4294967295
 80079fe:	b00d      	add	sp, #52	@ 0x34
 8007a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a04:	4642      	mov	r2, r8
 8007a06:	464b      	mov	r3, r9
 8007a08:	4640      	mov	r0, r8
 8007a0a:	4649      	mov	r1, r9
 8007a0c:	f7f9 f88e 	bl	8000b2c <__aeabi_dcmpun>
 8007a10:	b140      	cbz	r0, 8007a24 <_printf_float+0xe0>
 8007a12:	464b      	mov	r3, r9
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	bfbc      	itt	lt
 8007a18:	232d      	movlt	r3, #45	@ 0x2d
 8007a1a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007a1e:	4a7e      	ldr	r2, [pc, #504]	@ (8007c18 <_printf_float+0x2d4>)
 8007a20:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <_printf_float+0x2d8>)
 8007a22:	e7d4      	b.n	80079ce <_printf_float+0x8a>
 8007a24:	6863      	ldr	r3, [r4, #4]
 8007a26:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8007a2a:	9206      	str	r2, [sp, #24]
 8007a2c:	1c5a      	adds	r2, r3, #1
 8007a2e:	d13b      	bne.n	8007aa8 <_printf_float+0x164>
 8007a30:	2306      	movs	r3, #6
 8007a32:	6063      	str	r3, [r4, #4]
 8007a34:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007a38:	2300      	movs	r3, #0
 8007a3a:	6022      	str	r2, [r4, #0]
 8007a3c:	9303      	str	r3, [sp, #12]
 8007a3e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007a40:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007a44:	ab09      	add	r3, sp, #36	@ 0x24
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	6861      	ldr	r1, [r4, #4]
 8007a4a:	ec49 8b10 	vmov	d0, r8, r9
 8007a4e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007a52:	4628      	mov	r0, r5
 8007a54:	f7ff fed6 	bl	8007804 <__cvt>
 8007a58:	9b06      	ldr	r3, [sp, #24]
 8007a5a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007a5c:	2b47      	cmp	r3, #71	@ 0x47
 8007a5e:	4680      	mov	r8, r0
 8007a60:	d129      	bne.n	8007ab6 <_printf_float+0x172>
 8007a62:	1cc8      	adds	r0, r1, #3
 8007a64:	db02      	blt.n	8007a6c <_printf_float+0x128>
 8007a66:	6863      	ldr	r3, [r4, #4]
 8007a68:	4299      	cmp	r1, r3
 8007a6a:	dd41      	ble.n	8007af0 <_printf_float+0x1ac>
 8007a6c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007a70:	fa5f fa8a 	uxtb.w	sl, sl
 8007a74:	3901      	subs	r1, #1
 8007a76:	4652      	mov	r2, sl
 8007a78:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007a7c:	9109      	str	r1, [sp, #36]	@ 0x24
 8007a7e:	f7ff ff26 	bl	80078ce <__exponent>
 8007a82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007a84:	1813      	adds	r3, r2, r0
 8007a86:	2a01      	cmp	r2, #1
 8007a88:	4681      	mov	r9, r0
 8007a8a:	6123      	str	r3, [r4, #16]
 8007a8c:	dc02      	bgt.n	8007a94 <_printf_float+0x150>
 8007a8e:	6822      	ldr	r2, [r4, #0]
 8007a90:	07d2      	lsls	r2, r2, #31
 8007a92:	d501      	bpl.n	8007a98 <_printf_float+0x154>
 8007a94:	3301      	adds	r3, #1
 8007a96:	6123      	str	r3, [r4, #16]
 8007a98:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d0a2      	beq.n	80079e6 <_printf_float+0xa2>
 8007aa0:	232d      	movs	r3, #45	@ 0x2d
 8007aa2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007aa6:	e79e      	b.n	80079e6 <_printf_float+0xa2>
 8007aa8:	9a06      	ldr	r2, [sp, #24]
 8007aaa:	2a47      	cmp	r2, #71	@ 0x47
 8007aac:	d1c2      	bne.n	8007a34 <_printf_float+0xf0>
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d1c0      	bne.n	8007a34 <_printf_float+0xf0>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e7bd      	b.n	8007a32 <_printf_float+0xee>
 8007ab6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007aba:	d9db      	bls.n	8007a74 <_printf_float+0x130>
 8007abc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ac0:	d118      	bne.n	8007af4 <_printf_float+0x1b0>
 8007ac2:	2900      	cmp	r1, #0
 8007ac4:	6863      	ldr	r3, [r4, #4]
 8007ac6:	dd0b      	ble.n	8007ae0 <_printf_float+0x19c>
 8007ac8:	6121      	str	r1, [r4, #16]
 8007aca:	b913      	cbnz	r3, 8007ad2 <_printf_float+0x18e>
 8007acc:	6822      	ldr	r2, [r4, #0]
 8007ace:	07d0      	lsls	r0, r2, #31
 8007ad0:	d502      	bpl.n	8007ad8 <_printf_float+0x194>
 8007ad2:	3301      	adds	r3, #1
 8007ad4:	440b      	add	r3, r1
 8007ad6:	6123      	str	r3, [r4, #16]
 8007ad8:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007ada:	f04f 0900 	mov.w	r9, #0
 8007ade:	e7db      	b.n	8007a98 <_printf_float+0x154>
 8007ae0:	b913      	cbnz	r3, 8007ae8 <_printf_float+0x1a4>
 8007ae2:	6822      	ldr	r2, [r4, #0]
 8007ae4:	07d2      	lsls	r2, r2, #31
 8007ae6:	d501      	bpl.n	8007aec <_printf_float+0x1a8>
 8007ae8:	3302      	adds	r3, #2
 8007aea:	e7f4      	b.n	8007ad6 <_printf_float+0x192>
 8007aec:	2301      	movs	r3, #1
 8007aee:	e7f2      	b.n	8007ad6 <_printf_float+0x192>
 8007af0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007af4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007af6:	4299      	cmp	r1, r3
 8007af8:	db05      	blt.n	8007b06 <_printf_float+0x1c2>
 8007afa:	6823      	ldr	r3, [r4, #0]
 8007afc:	6121      	str	r1, [r4, #16]
 8007afe:	07d8      	lsls	r0, r3, #31
 8007b00:	d5ea      	bpl.n	8007ad8 <_printf_float+0x194>
 8007b02:	1c4b      	adds	r3, r1, #1
 8007b04:	e7e7      	b.n	8007ad6 <_printf_float+0x192>
 8007b06:	2900      	cmp	r1, #0
 8007b08:	bfd4      	ite	le
 8007b0a:	f1c1 0202 	rsble	r2, r1, #2
 8007b0e:	2201      	movgt	r2, #1
 8007b10:	4413      	add	r3, r2
 8007b12:	e7e0      	b.n	8007ad6 <_printf_float+0x192>
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	055a      	lsls	r2, r3, #21
 8007b18:	d407      	bmi.n	8007b2a <_printf_float+0x1e6>
 8007b1a:	6923      	ldr	r3, [r4, #16]
 8007b1c:	4642      	mov	r2, r8
 8007b1e:	4631      	mov	r1, r6
 8007b20:	4628      	mov	r0, r5
 8007b22:	47b8      	blx	r7
 8007b24:	3001      	adds	r0, #1
 8007b26:	d12b      	bne.n	8007b80 <_printf_float+0x23c>
 8007b28:	e767      	b.n	80079fa <_printf_float+0xb6>
 8007b2a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007b2e:	f240 80dd 	bls.w	8007cec <_printf_float+0x3a8>
 8007b32:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007b36:	2200      	movs	r2, #0
 8007b38:	2300      	movs	r3, #0
 8007b3a:	f7f8 ffc5 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b3e:	2800      	cmp	r0, #0
 8007b40:	d033      	beq.n	8007baa <_printf_float+0x266>
 8007b42:	4a37      	ldr	r2, [pc, #220]	@ (8007c20 <_printf_float+0x2dc>)
 8007b44:	2301      	movs	r3, #1
 8007b46:	4631      	mov	r1, r6
 8007b48:	4628      	mov	r0, r5
 8007b4a:	47b8      	blx	r7
 8007b4c:	3001      	adds	r0, #1
 8007b4e:	f43f af54 	beq.w	80079fa <_printf_float+0xb6>
 8007b52:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007b56:	4543      	cmp	r3, r8
 8007b58:	db02      	blt.n	8007b60 <_printf_float+0x21c>
 8007b5a:	6823      	ldr	r3, [r4, #0]
 8007b5c:	07d8      	lsls	r0, r3, #31
 8007b5e:	d50f      	bpl.n	8007b80 <_printf_float+0x23c>
 8007b60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007b64:	4631      	mov	r1, r6
 8007b66:	4628      	mov	r0, r5
 8007b68:	47b8      	blx	r7
 8007b6a:	3001      	adds	r0, #1
 8007b6c:	f43f af45 	beq.w	80079fa <_printf_float+0xb6>
 8007b70:	f04f 0900 	mov.w	r9, #0
 8007b74:	f108 38ff 	add.w	r8, r8, #4294967295
 8007b78:	f104 0a1a 	add.w	sl, r4, #26
 8007b7c:	45c8      	cmp	r8, r9
 8007b7e:	dc09      	bgt.n	8007b94 <_printf_float+0x250>
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	079b      	lsls	r3, r3, #30
 8007b84:	f100 8103 	bmi.w	8007d8e <_printf_float+0x44a>
 8007b88:	68e0      	ldr	r0, [r4, #12]
 8007b8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b8c:	4298      	cmp	r0, r3
 8007b8e:	bfb8      	it	lt
 8007b90:	4618      	movlt	r0, r3
 8007b92:	e734      	b.n	80079fe <_printf_float+0xba>
 8007b94:	2301      	movs	r3, #1
 8007b96:	4652      	mov	r2, sl
 8007b98:	4631      	mov	r1, r6
 8007b9a:	4628      	mov	r0, r5
 8007b9c:	47b8      	blx	r7
 8007b9e:	3001      	adds	r0, #1
 8007ba0:	f43f af2b 	beq.w	80079fa <_printf_float+0xb6>
 8007ba4:	f109 0901 	add.w	r9, r9, #1
 8007ba8:	e7e8      	b.n	8007b7c <_printf_float+0x238>
 8007baa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	dc39      	bgt.n	8007c24 <_printf_float+0x2e0>
 8007bb0:	4a1b      	ldr	r2, [pc, #108]	@ (8007c20 <_printf_float+0x2dc>)
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	4631      	mov	r1, r6
 8007bb6:	4628      	mov	r0, r5
 8007bb8:	47b8      	blx	r7
 8007bba:	3001      	adds	r0, #1
 8007bbc:	f43f af1d 	beq.w	80079fa <_printf_float+0xb6>
 8007bc0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007bc4:	ea59 0303 	orrs.w	r3, r9, r3
 8007bc8:	d102      	bne.n	8007bd0 <_printf_float+0x28c>
 8007bca:	6823      	ldr	r3, [r4, #0]
 8007bcc:	07d9      	lsls	r1, r3, #31
 8007bce:	d5d7      	bpl.n	8007b80 <_printf_float+0x23c>
 8007bd0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007bd4:	4631      	mov	r1, r6
 8007bd6:	4628      	mov	r0, r5
 8007bd8:	47b8      	blx	r7
 8007bda:	3001      	adds	r0, #1
 8007bdc:	f43f af0d 	beq.w	80079fa <_printf_float+0xb6>
 8007be0:	f04f 0a00 	mov.w	sl, #0
 8007be4:	f104 0b1a 	add.w	fp, r4, #26
 8007be8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bea:	425b      	negs	r3, r3
 8007bec:	4553      	cmp	r3, sl
 8007bee:	dc01      	bgt.n	8007bf4 <_printf_float+0x2b0>
 8007bf0:	464b      	mov	r3, r9
 8007bf2:	e793      	b.n	8007b1c <_printf_float+0x1d8>
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	465a      	mov	r2, fp
 8007bf8:	4631      	mov	r1, r6
 8007bfa:	4628      	mov	r0, r5
 8007bfc:	47b8      	blx	r7
 8007bfe:	3001      	adds	r0, #1
 8007c00:	f43f aefb 	beq.w	80079fa <_printf_float+0xb6>
 8007c04:	f10a 0a01 	add.w	sl, sl, #1
 8007c08:	e7ee      	b.n	8007be8 <_printf_float+0x2a4>
 8007c0a:	bf00      	nop
 8007c0c:	7fefffff 	.word	0x7fefffff
 8007c10:	0800b780 	.word	0x0800b780
 8007c14:	0800b784 	.word	0x0800b784
 8007c18:	0800b788 	.word	0x0800b788
 8007c1c:	0800b78c 	.word	0x0800b78c
 8007c20:	0800b790 	.word	0x0800b790
 8007c24:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c26:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007c2a:	4553      	cmp	r3, sl
 8007c2c:	bfa8      	it	ge
 8007c2e:	4653      	movge	r3, sl
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	4699      	mov	r9, r3
 8007c34:	dc36      	bgt.n	8007ca4 <_printf_float+0x360>
 8007c36:	f04f 0b00 	mov.w	fp, #0
 8007c3a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c3e:	f104 021a 	add.w	r2, r4, #26
 8007c42:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007c44:	9306      	str	r3, [sp, #24]
 8007c46:	eba3 0309 	sub.w	r3, r3, r9
 8007c4a:	455b      	cmp	r3, fp
 8007c4c:	dc31      	bgt.n	8007cb2 <_printf_float+0x36e>
 8007c4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c50:	459a      	cmp	sl, r3
 8007c52:	dc3a      	bgt.n	8007cca <_printf_float+0x386>
 8007c54:	6823      	ldr	r3, [r4, #0]
 8007c56:	07da      	lsls	r2, r3, #31
 8007c58:	d437      	bmi.n	8007cca <_printf_float+0x386>
 8007c5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c5c:	ebaa 0903 	sub.w	r9, sl, r3
 8007c60:	9b06      	ldr	r3, [sp, #24]
 8007c62:	ebaa 0303 	sub.w	r3, sl, r3
 8007c66:	4599      	cmp	r9, r3
 8007c68:	bfa8      	it	ge
 8007c6a:	4699      	movge	r9, r3
 8007c6c:	f1b9 0f00 	cmp.w	r9, #0
 8007c70:	dc33      	bgt.n	8007cda <_printf_float+0x396>
 8007c72:	f04f 0800 	mov.w	r8, #0
 8007c76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007c7a:	f104 0b1a 	add.w	fp, r4, #26
 8007c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c80:	ebaa 0303 	sub.w	r3, sl, r3
 8007c84:	eba3 0309 	sub.w	r3, r3, r9
 8007c88:	4543      	cmp	r3, r8
 8007c8a:	f77f af79 	ble.w	8007b80 <_printf_float+0x23c>
 8007c8e:	2301      	movs	r3, #1
 8007c90:	465a      	mov	r2, fp
 8007c92:	4631      	mov	r1, r6
 8007c94:	4628      	mov	r0, r5
 8007c96:	47b8      	blx	r7
 8007c98:	3001      	adds	r0, #1
 8007c9a:	f43f aeae 	beq.w	80079fa <_printf_float+0xb6>
 8007c9e:	f108 0801 	add.w	r8, r8, #1
 8007ca2:	e7ec      	b.n	8007c7e <_printf_float+0x33a>
 8007ca4:	4642      	mov	r2, r8
 8007ca6:	4631      	mov	r1, r6
 8007ca8:	4628      	mov	r0, r5
 8007caa:	47b8      	blx	r7
 8007cac:	3001      	adds	r0, #1
 8007cae:	d1c2      	bne.n	8007c36 <_printf_float+0x2f2>
 8007cb0:	e6a3      	b.n	80079fa <_printf_float+0xb6>
 8007cb2:	2301      	movs	r3, #1
 8007cb4:	4631      	mov	r1, r6
 8007cb6:	4628      	mov	r0, r5
 8007cb8:	9206      	str	r2, [sp, #24]
 8007cba:	47b8      	blx	r7
 8007cbc:	3001      	adds	r0, #1
 8007cbe:	f43f ae9c 	beq.w	80079fa <_printf_float+0xb6>
 8007cc2:	9a06      	ldr	r2, [sp, #24]
 8007cc4:	f10b 0b01 	add.w	fp, fp, #1
 8007cc8:	e7bb      	b.n	8007c42 <_printf_float+0x2fe>
 8007cca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007cce:	4631      	mov	r1, r6
 8007cd0:	4628      	mov	r0, r5
 8007cd2:	47b8      	blx	r7
 8007cd4:	3001      	adds	r0, #1
 8007cd6:	d1c0      	bne.n	8007c5a <_printf_float+0x316>
 8007cd8:	e68f      	b.n	80079fa <_printf_float+0xb6>
 8007cda:	9a06      	ldr	r2, [sp, #24]
 8007cdc:	464b      	mov	r3, r9
 8007cde:	4442      	add	r2, r8
 8007ce0:	4631      	mov	r1, r6
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	47b8      	blx	r7
 8007ce6:	3001      	adds	r0, #1
 8007ce8:	d1c3      	bne.n	8007c72 <_printf_float+0x32e>
 8007cea:	e686      	b.n	80079fa <_printf_float+0xb6>
 8007cec:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007cf0:	f1ba 0f01 	cmp.w	sl, #1
 8007cf4:	dc01      	bgt.n	8007cfa <_printf_float+0x3b6>
 8007cf6:	07db      	lsls	r3, r3, #31
 8007cf8:	d536      	bpl.n	8007d68 <_printf_float+0x424>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	4642      	mov	r2, r8
 8007cfe:	4631      	mov	r1, r6
 8007d00:	4628      	mov	r0, r5
 8007d02:	47b8      	blx	r7
 8007d04:	3001      	adds	r0, #1
 8007d06:	f43f ae78 	beq.w	80079fa <_printf_float+0xb6>
 8007d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d0e:	4631      	mov	r1, r6
 8007d10:	4628      	mov	r0, r5
 8007d12:	47b8      	blx	r7
 8007d14:	3001      	adds	r0, #1
 8007d16:	f43f ae70 	beq.w	80079fa <_printf_float+0xb6>
 8007d1a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2300      	movs	r3, #0
 8007d22:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007d26:	f7f8 fecf 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d2a:	b9c0      	cbnz	r0, 8007d5e <_printf_float+0x41a>
 8007d2c:	4653      	mov	r3, sl
 8007d2e:	f108 0201 	add.w	r2, r8, #1
 8007d32:	4631      	mov	r1, r6
 8007d34:	4628      	mov	r0, r5
 8007d36:	47b8      	blx	r7
 8007d38:	3001      	adds	r0, #1
 8007d3a:	d10c      	bne.n	8007d56 <_printf_float+0x412>
 8007d3c:	e65d      	b.n	80079fa <_printf_float+0xb6>
 8007d3e:	2301      	movs	r3, #1
 8007d40:	465a      	mov	r2, fp
 8007d42:	4631      	mov	r1, r6
 8007d44:	4628      	mov	r0, r5
 8007d46:	47b8      	blx	r7
 8007d48:	3001      	adds	r0, #1
 8007d4a:	f43f ae56 	beq.w	80079fa <_printf_float+0xb6>
 8007d4e:	f108 0801 	add.w	r8, r8, #1
 8007d52:	45d0      	cmp	r8, sl
 8007d54:	dbf3      	blt.n	8007d3e <_printf_float+0x3fa>
 8007d56:	464b      	mov	r3, r9
 8007d58:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007d5c:	e6df      	b.n	8007b1e <_printf_float+0x1da>
 8007d5e:	f04f 0800 	mov.w	r8, #0
 8007d62:	f104 0b1a 	add.w	fp, r4, #26
 8007d66:	e7f4      	b.n	8007d52 <_printf_float+0x40e>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4642      	mov	r2, r8
 8007d6c:	e7e1      	b.n	8007d32 <_printf_float+0x3ee>
 8007d6e:	2301      	movs	r3, #1
 8007d70:	464a      	mov	r2, r9
 8007d72:	4631      	mov	r1, r6
 8007d74:	4628      	mov	r0, r5
 8007d76:	47b8      	blx	r7
 8007d78:	3001      	adds	r0, #1
 8007d7a:	f43f ae3e 	beq.w	80079fa <_printf_float+0xb6>
 8007d7e:	f108 0801 	add.w	r8, r8, #1
 8007d82:	68e3      	ldr	r3, [r4, #12]
 8007d84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007d86:	1a5b      	subs	r3, r3, r1
 8007d88:	4543      	cmp	r3, r8
 8007d8a:	dcf0      	bgt.n	8007d6e <_printf_float+0x42a>
 8007d8c:	e6fc      	b.n	8007b88 <_printf_float+0x244>
 8007d8e:	f04f 0800 	mov.w	r8, #0
 8007d92:	f104 0919 	add.w	r9, r4, #25
 8007d96:	e7f4      	b.n	8007d82 <_printf_float+0x43e>

08007d98 <_printf_common>:
 8007d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d9c:	4616      	mov	r6, r2
 8007d9e:	4698      	mov	r8, r3
 8007da0:	688a      	ldr	r2, [r1, #8]
 8007da2:	690b      	ldr	r3, [r1, #16]
 8007da4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007da8:	4293      	cmp	r3, r2
 8007daa:	bfb8      	it	lt
 8007dac:	4613      	movlt	r3, r2
 8007dae:	6033      	str	r3, [r6, #0]
 8007db0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007db4:	4607      	mov	r7, r0
 8007db6:	460c      	mov	r4, r1
 8007db8:	b10a      	cbz	r2, 8007dbe <_printf_common+0x26>
 8007dba:	3301      	adds	r3, #1
 8007dbc:	6033      	str	r3, [r6, #0]
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	0699      	lsls	r1, r3, #26
 8007dc2:	bf42      	ittt	mi
 8007dc4:	6833      	ldrmi	r3, [r6, #0]
 8007dc6:	3302      	addmi	r3, #2
 8007dc8:	6033      	strmi	r3, [r6, #0]
 8007dca:	6825      	ldr	r5, [r4, #0]
 8007dcc:	f015 0506 	ands.w	r5, r5, #6
 8007dd0:	d106      	bne.n	8007de0 <_printf_common+0x48>
 8007dd2:	f104 0a19 	add.w	sl, r4, #25
 8007dd6:	68e3      	ldr	r3, [r4, #12]
 8007dd8:	6832      	ldr	r2, [r6, #0]
 8007dda:	1a9b      	subs	r3, r3, r2
 8007ddc:	42ab      	cmp	r3, r5
 8007dde:	dc26      	bgt.n	8007e2e <_printf_common+0x96>
 8007de0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007de4:	6822      	ldr	r2, [r4, #0]
 8007de6:	3b00      	subs	r3, #0
 8007de8:	bf18      	it	ne
 8007dea:	2301      	movne	r3, #1
 8007dec:	0692      	lsls	r2, r2, #26
 8007dee:	d42b      	bmi.n	8007e48 <_printf_common+0xb0>
 8007df0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007df4:	4641      	mov	r1, r8
 8007df6:	4638      	mov	r0, r7
 8007df8:	47c8      	blx	r9
 8007dfa:	3001      	adds	r0, #1
 8007dfc:	d01e      	beq.n	8007e3c <_printf_common+0xa4>
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	6922      	ldr	r2, [r4, #16]
 8007e02:	f003 0306 	and.w	r3, r3, #6
 8007e06:	2b04      	cmp	r3, #4
 8007e08:	bf02      	ittt	eq
 8007e0a:	68e5      	ldreq	r5, [r4, #12]
 8007e0c:	6833      	ldreq	r3, [r6, #0]
 8007e0e:	1aed      	subeq	r5, r5, r3
 8007e10:	68a3      	ldr	r3, [r4, #8]
 8007e12:	bf0c      	ite	eq
 8007e14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007e18:	2500      	movne	r5, #0
 8007e1a:	4293      	cmp	r3, r2
 8007e1c:	bfc4      	itt	gt
 8007e1e:	1a9b      	subgt	r3, r3, r2
 8007e20:	18ed      	addgt	r5, r5, r3
 8007e22:	2600      	movs	r6, #0
 8007e24:	341a      	adds	r4, #26
 8007e26:	42b5      	cmp	r5, r6
 8007e28:	d11a      	bne.n	8007e60 <_printf_common+0xc8>
 8007e2a:	2000      	movs	r0, #0
 8007e2c:	e008      	b.n	8007e40 <_printf_common+0xa8>
 8007e2e:	2301      	movs	r3, #1
 8007e30:	4652      	mov	r2, sl
 8007e32:	4641      	mov	r1, r8
 8007e34:	4638      	mov	r0, r7
 8007e36:	47c8      	blx	r9
 8007e38:	3001      	adds	r0, #1
 8007e3a:	d103      	bne.n	8007e44 <_printf_common+0xac>
 8007e3c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e44:	3501      	adds	r5, #1
 8007e46:	e7c6      	b.n	8007dd6 <_printf_common+0x3e>
 8007e48:	18e1      	adds	r1, r4, r3
 8007e4a:	1c5a      	adds	r2, r3, #1
 8007e4c:	2030      	movs	r0, #48	@ 0x30
 8007e4e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007e52:	4422      	add	r2, r4
 8007e54:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007e58:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	e7c7      	b.n	8007df0 <_printf_common+0x58>
 8007e60:	2301      	movs	r3, #1
 8007e62:	4622      	mov	r2, r4
 8007e64:	4641      	mov	r1, r8
 8007e66:	4638      	mov	r0, r7
 8007e68:	47c8      	blx	r9
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d0e6      	beq.n	8007e3c <_printf_common+0xa4>
 8007e6e:	3601      	adds	r6, #1
 8007e70:	e7d9      	b.n	8007e26 <_printf_common+0x8e>
	...

08007e74 <_printf_i>:
 8007e74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e78:	7e0f      	ldrb	r7, [r1, #24]
 8007e7a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007e7c:	2f78      	cmp	r7, #120	@ 0x78
 8007e7e:	4691      	mov	r9, r2
 8007e80:	4680      	mov	r8, r0
 8007e82:	460c      	mov	r4, r1
 8007e84:	469a      	mov	sl, r3
 8007e86:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007e8a:	d807      	bhi.n	8007e9c <_printf_i+0x28>
 8007e8c:	2f62      	cmp	r7, #98	@ 0x62
 8007e8e:	d80a      	bhi.n	8007ea6 <_printf_i+0x32>
 8007e90:	2f00      	cmp	r7, #0
 8007e92:	f000 80d2 	beq.w	800803a <_printf_i+0x1c6>
 8007e96:	2f58      	cmp	r7, #88	@ 0x58
 8007e98:	f000 80b9 	beq.w	800800e <_printf_i+0x19a>
 8007e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007ea0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007ea4:	e03a      	b.n	8007f1c <_printf_i+0xa8>
 8007ea6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007eaa:	2b15      	cmp	r3, #21
 8007eac:	d8f6      	bhi.n	8007e9c <_printf_i+0x28>
 8007eae:	a101      	add	r1, pc, #4	@ (adr r1, 8007eb4 <_printf_i+0x40>)
 8007eb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007eb4:	08007f0d 	.word	0x08007f0d
 8007eb8:	08007f21 	.word	0x08007f21
 8007ebc:	08007e9d 	.word	0x08007e9d
 8007ec0:	08007e9d 	.word	0x08007e9d
 8007ec4:	08007e9d 	.word	0x08007e9d
 8007ec8:	08007e9d 	.word	0x08007e9d
 8007ecc:	08007f21 	.word	0x08007f21
 8007ed0:	08007e9d 	.word	0x08007e9d
 8007ed4:	08007e9d 	.word	0x08007e9d
 8007ed8:	08007e9d 	.word	0x08007e9d
 8007edc:	08007e9d 	.word	0x08007e9d
 8007ee0:	08008021 	.word	0x08008021
 8007ee4:	08007f4b 	.word	0x08007f4b
 8007ee8:	08007fdb 	.word	0x08007fdb
 8007eec:	08007e9d 	.word	0x08007e9d
 8007ef0:	08007e9d 	.word	0x08007e9d
 8007ef4:	08008043 	.word	0x08008043
 8007ef8:	08007e9d 	.word	0x08007e9d
 8007efc:	08007f4b 	.word	0x08007f4b
 8007f00:	08007e9d 	.word	0x08007e9d
 8007f04:	08007e9d 	.word	0x08007e9d
 8007f08:	08007fe3 	.word	0x08007fe3
 8007f0c:	6833      	ldr	r3, [r6, #0]
 8007f0e:	1d1a      	adds	r2, r3, #4
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	6032      	str	r2, [r6, #0]
 8007f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f18:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	e09d      	b.n	800805c <_printf_i+0x1e8>
 8007f20:	6833      	ldr	r3, [r6, #0]
 8007f22:	6820      	ldr	r0, [r4, #0]
 8007f24:	1d19      	adds	r1, r3, #4
 8007f26:	6031      	str	r1, [r6, #0]
 8007f28:	0606      	lsls	r6, r0, #24
 8007f2a:	d501      	bpl.n	8007f30 <_printf_i+0xbc>
 8007f2c:	681d      	ldr	r5, [r3, #0]
 8007f2e:	e003      	b.n	8007f38 <_printf_i+0xc4>
 8007f30:	0645      	lsls	r5, r0, #25
 8007f32:	d5fb      	bpl.n	8007f2c <_printf_i+0xb8>
 8007f34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007f38:	2d00      	cmp	r5, #0
 8007f3a:	da03      	bge.n	8007f44 <_printf_i+0xd0>
 8007f3c:	232d      	movs	r3, #45	@ 0x2d
 8007f3e:	426d      	negs	r5, r5
 8007f40:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f44:	4859      	ldr	r0, [pc, #356]	@ (80080ac <_printf_i+0x238>)
 8007f46:	230a      	movs	r3, #10
 8007f48:	e011      	b.n	8007f6e <_printf_i+0xfa>
 8007f4a:	6821      	ldr	r1, [r4, #0]
 8007f4c:	6833      	ldr	r3, [r6, #0]
 8007f4e:	0608      	lsls	r0, r1, #24
 8007f50:	f853 5b04 	ldr.w	r5, [r3], #4
 8007f54:	d402      	bmi.n	8007f5c <_printf_i+0xe8>
 8007f56:	0649      	lsls	r1, r1, #25
 8007f58:	bf48      	it	mi
 8007f5a:	b2ad      	uxthmi	r5, r5
 8007f5c:	2f6f      	cmp	r7, #111	@ 0x6f
 8007f5e:	4853      	ldr	r0, [pc, #332]	@ (80080ac <_printf_i+0x238>)
 8007f60:	6033      	str	r3, [r6, #0]
 8007f62:	bf14      	ite	ne
 8007f64:	230a      	movne	r3, #10
 8007f66:	2308      	moveq	r3, #8
 8007f68:	2100      	movs	r1, #0
 8007f6a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007f6e:	6866      	ldr	r6, [r4, #4]
 8007f70:	60a6      	str	r6, [r4, #8]
 8007f72:	2e00      	cmp	r6, #0
 8007f74:	bfa2      	ittt	ge
 8007f76:	6821      	ldrge	r1, [r4, #0]
 8007f78:	f021 0104 	bicge.w	r1, r1, #4
 8007f7c:	6021      	strge	r1, [r4, #0]
 8007f7e:	b90d      	cbnz	r5, 8007f84 <_printf_i+0x110>
 8007f80:	2e00      	cmp	r6, #0
 8007f82:	d04b      	beq.n	800801c <_printf_i+0x1a8>
 8007f84:	4616      	mov	r6, r2
 8007f86:	fbb5 f1f3 	udiv	r1, r5, r3
 8007f8a:	fb03 5711 	mls	r7, r3, r1, r5
 8007f8e:	5dc7      	ldrb	r7, [r0, r7]
 8007f90:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007f94:	462f      	mov	r7, r5
 8007f96:	42bb      	cmp	r3, r7
 8007f98:	460d      	mov	r5, r1
 8007f9a:	d9f4      	bls.n	8007f86 <_printf_i+0x112>
 8007f9c:	2b08      	cmp	r3, #8
 8007f9e:	d10b      	bne.n	8007fb8 <_printf_i+0x144>
 8007fa0:	6823      	ldr	r3, [r4, #0]
 8007fa2:	07df      	lsls	r7, r3, #31
 8007fa4:	d508      	bpl.n	8007fb8 <_printf_i+0x144>
 8007fa6:	6923      	ldr	r3, [r4, #16]
 8007fa8:	6861      	ldr	r1, [r4, #4]
 8007faa:	4299      	cmp	r1, r3
 8007fac:	bfde      	ittt	le
 8007fae:	2330      	movle	r3, #48	@ 0x30
 8007fb0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007fb4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007fb8:	1b92      	subs	r2, r2, r6
 8007fba:	6122      	str	r2, [r4, #16]
 8007fbc:	f8cd a000 	str.w	sl, [sp]
 8007fc0:	464b      	mov	r3, r9
 8007fc2:	aa03      	add	r2, sp, #12
 8007fc4:	4621      	mov	r1, r4
 8007fc6:	4640      	mov	r0, r8
 8007fc8:	f7ff fee6 	bl	8007d98 <_printf_common>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	d14a      	bne.n	8008066 <_printf_i+0x1f2>
 8007fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fd4:	b004      	add	sp, #16
 8007fd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fda:	6823      	ldr	r3, [r4, #0]
 8007fdc:	f043 0320 	orr.w	r3, r3, #32
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	4833      	ldr	r0, [pc, #204]	@ (80080b0 <_printf_i+0x23c>)
 8007fe4:	2778      	movs	r7, #120	@ 0x78
 8007fe6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007fea:	6823      	ldr	r3, [r4, #0]
 8007fec:	6831      	ldr	r1, [r6, #0]
 8007fee:	061f      	lsls	r7, r3, #24
 8007ff0:	f851 5b04 	ldr.w	r5, [r1], #4
 8007ff4:	d402      	bmi.n	8007ffc <_printf_i+0x188>
 8007ff6:	065f      	lsls	r7, r3, #25
 8007ff8:	bf48      	it	mi
 8007ffa:	b2ad      	uxthmi	r5, r5
 8007ffc:	6031      	str	r1, [r6, #0]
 8007ffe:	07d9      	lsls	r1, r3, #31
 8008000:	bf44      	itt	mi
 8008002:	f043 0320 	orrmi.w	r3, r3, #32
 8008006:	6023      	strmi	r3, [r4, #0]
 8008008:	b11d      	cbz	r5, 8008012 <_printf_i+0x19e>
 800800a:	2310      	movs	r3, #16
 800800c:	e7ac      	b.n	8007f68 <_printf_i+0xf4>
 800800e:	4827      	ldr	r0, [pc, #156]	@ (80080ac <_printf_i+0x238>)
 8008010:	e7e9      	b.n	8007fe6 <_printf_i+0x172>
 8008012:	6823      	ldr	r3, [r4, #0]
 8008014:	f023 0320 	bic.w	r3, r3, #32
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	e7f6      	b.n	800800a <_printf_i+0x196>
 800801c:	4616      	mov	r6, r2
 800801e:	e7bd      	b.n	8007f9c <_printf_i+0x128>
 8008020:	6833      	ldr	r3, [r6, #0]
 8008022:	6825      	ldr	r5, [r4, #0]
 8008024:	6961      	ldr	r1, [r4, #20]
 8008026:	1d18      	adds	r0, r3, #4
 8008028:	6030      	str	r0, [r6, #0]
 800802a:	062e      	lsls	r6, r5, #24
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	d501      	bpl.n	8008034 <_printf_i+0x1c0>
 8008030:	6019      	str	r1, [r3, #0]
 8008032:	e002      	b.n	800803a <_printf_i+0x1c6>
 8008034:	0668      	lsls	r0, r5, #25
 8008036:	d5fb      	bpl.n	8008030 <_printf_i+0x1bc>
 8008038:	8019      	strh	r1, [r3, #0]
 800803a:	2300      	movs	r3, #0
 800803c:	6123      	str	r3, [r4, #16]
 800803e:	4616      	mov	r6, r2
 8008040:	e7bc      	b.n	8007fbc <_printf_i+0x148>
 8008042:	6833      	ldr	r3, [r6, #0]
 8008044:	1d1a      	adds	r2, r3, #4
 8008046:	6032      	str	r2, [r6, #0]
 8008048:	681e      	ldr	r6, [r3, #0]
 800804a:	6862      	ldr	r2, [r4, #4]
 800804c:	2100      	movs	r1, #0
 800804e:	4630      	mov	r0, r6
 8008050:	f7f8 f8be 	bl	80001d0 <memchr>
 8008054:	b108      	cbz	r0, 800805a <_printf_i+0x1e6>
 8008056:	1b80      	subs	r0, r0, r6
 8008058:	6060      	str	r0, [r4, #4]
 800805a:	6863      	ldr	r3, [r4, #4]
 800805c:	6123      	str	r3, [r4, #16]
 800805e:	2300      	movs	r3, #0
 8008060:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008064:	e7aa      	b.n	8007fbc <_printf_i+0x148>
 8008066:	6923      	ldr	r3, [r4, #16]
 8008068:	4632      	mov	r2, r6
 800806a:	4649      	mov	r1, r9
 800806c:	4640      	mov	r0, r8
 800806e:	47d0      	blx	sl
 8008070:	3001      	adds	r0, #1
 8008072:	d0ad      	beq.n	8007fd0 <_printf_i+0x15c>
 8008074:	6823      	ldr	r3, [r4, #0]
 8008076:	079b      	lsls	r3, r3, #30
 8008078:	d413      	bmi.n	80080a2 <_printf_i+0x22e>
 800807a:	68e0      	ldr	r0, [r4, #12]
 800807c:	9b03      	ldr	r3, [sp, #12]
 800807e:	4298      	cmp	r0, r3
 8008080:	bfb8      	it	lt
 8008082:	4618      	movlt	r0, r3
 8008084:	e7a6      	b.n	8007fd4 <_printf_i+0x160>
 8008086:	2301      	movs	r3, #1
 8008088:	4632      	mov	r2, r6
 800808a:	4649      	mov	r1, r9
 800808c:	4640      	mov	r0, r8
 800808e:	47d0      	blx	sl
 8008090:	3001      	adds	r0, #1
 8008092:	d09d      	beq.n	8007fd0 <_printf_i+0x15c>
 8008094:	3501      	adds	r5, #1
 8008096:	68e3      	ldr	r3, [r4, #12]
 8008098:	9903      	ldr	r1, [sp, #12]
 800809a:	1a5b      	subs	r3, r3, r1
 800809c:	42ab      	cmp	r3, r5
 800809e:	dcf2      	bgt.n	8008086 <_printf_i+0x212>
 80080a0:	e7eb      	b.n	800807a <_printf_i+0x206>
 80080a2:	2500      	movs	r5, #0
 80080a4:	f104 0619 	add.w	r6, r4, #25
 80080a8:	e7f5      	b.n	8008096 <_printf_i+0x222>
 80080aa:	bf00      	nop
 80080ac:	0800b792 	.word	0x0800b792
 80080b0:	0800b7a3 	.word	0x0800b7a3

080080b4 <_scanf_float>:
 80080b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080b8:	b087      	sub	sp, #28
 80080ba:	4617      	mov	r7, r2
 80080bc:	9303      	str	r3, [sp, #12]
 80080be:	688b      	ldr	r3, [r1, #8]
 80080c0:	1e5a      	subs	r2, r3, #1
 80080c2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80080c6:	bf81      	itttt	hi
 80080c8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80080cc:	eb03 0b05 	addhi.w	fp, r3, r5
 80080d0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80080d4:	608b      	strhi	r3, [r1, #8]
 80080d6:	680b      	ldr	r3, [r1, #0]
 80080d8:	460a      	mov	r2, r1
 80080da:	f04f 0500 	mov.w	r5, #0
 80080de:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80080e2:	f842 3b1c 	str.w	r3, [r2], #28
 80080e6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80080ea:	4680      	mov	r8, r0
 80080ec:	460c      	mov	r4, r1
 80080ee:	bf98      	it	ls
 80080f0:	f04f 0b00 	movls.w	fp, #0
 80080f4:	9201      	str	r2, [sp, #4]
 80080f6:	4616      	mov	r6, r2
 80080f8:	46aa      	mov	sl, r5
 80080fa:	46a9      	mov	r9, r5
 80080fc:	9502      	str	r5, [sp, #8]
 80080fe:	68a2      	ldr	r2, [r4, #8]
 8008100:	b152      	cbz	r2, 8008118 <_scanf_float+0x64>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	781b      	ldrb	r3, [r3, #0]
 8008106:	2b4e      	cmp	r3, #78	@ 0x4e
 8008108:	d864      	bhi.n	80081d4 <_scanf_float+0x120>
 800810a:	2b40      	cmp	r3, #64	@ 0x40
 800810c:	d83c      	bhi.n	8008188 <_scanf_float+0xd4>
 800810e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008112:	b2c8      	uxtb	r0, r1
 8008114:	280e      	cmp	r0, #14
 8008116:	d93a      	bls.n	800818e <_scanf_float+0xda>
 8008118:	f1b9 0f00 	cmp.w	r9, #0
 800811c:	d003      	beq.n	8008126 <_scanf_float+0x72>
 800811e:	6823      	ldr	r3, [r4, #0]
 8008120:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008124:	6023      	str	r3, [r4, #0]
 8008126:	f10a 3aff 	add.w	sl, sl, #4294967295
 800812a:	f1ba 0f01 	cmp.w	sl, #1
 800812e:	f200 8117 	bhi.w	8008360 <_scanf_float+0x2ac>
 8008132:	9b01      	ldr	r3, [sp, #4]
 8008134:	429e      	cmp	r6, r3
 8008136:	f200 8108 	bhi.w	800834a <_scanf_float+0x296>
 800813a:	2001      	movs	r0, #1
 800813c:	b007      	add	sp, #28
 800813e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008142:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008146:	2a0d      	cmp	r2, #13
 8008148:	d8e6      	bhi.n	8008118 <_scanf_float+0x64>
 800814a:	a101      	add	r1, pc, #4	@ (adr r1, 8008150 <_scanf_float+0x9c>)
 800814c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008150:	08008297 	.word	0x08008297
 8008154:	08008119 	.word	0x08008119
 8008158:	08008119 	.word	0x08008119
 800815c:	08008119 	.word	0x08008119
 8008160:	080082f7 	.word	0x080082f7
 8008164:	080082cf 	.word	0x080082cf
 8008168:	08008119 	.word	0x08008119
 800816c:	08008119 	.word	0x08008119
 8008170:	080082a5 	.word	0x080082a5
 8008174:	08008119 	.word	0x08008119
 8008178:	08008119 	.word	0x08008119
 800817c:	08008119 	.word	0x08008119
 8008180:	08008119 	.word	0x08008119
 8008184:	0800825d 	.word	0x0800825d
 8008188:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800818c:	e7db      	b.n	8008146 <_scanf_float+0x92>
 800818e:	290e      	cmp	r1, #14
 8008190:	d8c2      	bhi.n	8008118 <_scanf_float+0x64>
 8008192:	a001      	add	r0, pc, #4	@ (adr r0, 8008198 <_scanf_float+0xe4>)
 8008194:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008198:	0800824d 	.word	0x0800824d
 800819c:	08008119 	.word	0x08008119
 80081a0:	0800824d 	.word	0x0800824d
 80081a4:	080082e3 	.word	0x080082e3
 80081a8:	08008119 	.word	0x08008119
 80081ac:	080081f5 	.word	0x080081f5
 80081b0:	08008233 	.word	0x08008233
 80081b4:	08008233 	.word	0x08008233
 80081b8:	08008233 	.word	0x08008233
 80081bc:	08008233 	.word	0x08008233
 80081c0:	08008233 	.word	0x08008233
 80081c4:	08008233 	.word	0x08008233
 80081c8:	08008233 	.word	0x08008233
 80081cc:	08008233 	.word	0x08008233
 80081d0:	08008233 	.word	0x08008233
 80081d4:	2b6e      	cmp	r3, #110	@ 0x6e
 80081d6:	d809      	bhi.n	80081ec <_scanf_float+0x138>
 80081d8:	2b60      	cmp	r3, #96	@ 0x60
 80081da:	d8b2      	bhi.n	8008142 <_scanf_float+0x8e>
 80081dc:	2b54      	cmp	r3, #84	@ 0x54
 80081de:	d07b      	beq.n	80082d8 <_scanf_float+0x224>
 80081e0:	2b59      	cmp	r3, #89	@ 0x59
 80081e2:	d199      	bne.n	8008118 <_scanf_float+0x64>
 80081e4:	2d07      	cmp	r5, #7
 80081e6:	d197      	bne.n	8008118 <_scanf_float+0x64>
 80081e8:	2508      	movs	r5, #8
 80081ea:	e02c      	b.n	8008246 <_scanf_float+0x192>
 80081ec:	2b74      	cmp	r3, #116	@ 0x74
 80081ee:	d073      	beq.n	80082d8 <_scanf_float+0x224>
 80081f0:	2b79      	cmp	r3, #121	@ 0x79
 80081f2:	e7f6      	b.n	80081e2 <_scanf_float+0x12e>
 80081f4:	6821      	ldr	r1, [r4, #0]
 80081f6:	05c8      	lsls	r0, r1, #23
 80081f8:	d51b      	bpl.n	8008232 <_scanf_float+0x17e>
 80081fa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80081fe:	6021      	str	r1, [r4, #0]
 8008200:	f109 0901 	add.w	r9, r9, #1
 8008204:	f1bb 0f00 	cmp.w	fp, #0
 8008208:	d003      	beq.n	8008212 <_scanf_float+0x15e>
 800820a:	3201      	adds	r2, #1
 800820c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008210:	60a2      	str	r2, [r4, #8]
 8008212:	68a3      	ldr	r3, [r4, #8]
 8008214:	3b01      	subs	r3, #1
 8008216:	60a3      	str	r3, [r4, #8]
 8008218:	6923      	ldr	r3, [r4, #16]
 800821a:	3301      	adds	r3, #1
 800821c:	6123      	str	r3, [r4, #16]
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	3b01      	subs	r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	607b      	str	r3, [r7, #4]
 8008226:	f340 8087 	ble.w	8008338 <_scanf_float+0x284>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	3301      	adds	r3, #1
 800822e:	603b      	str	r3, [r7, #0]
 8008230:	e765      	b.n	80080fe <_scanf_float+0x4a>
 8008232:	eb1a 0105 	adds.w	r1, sl, r5
 8008236:	f47f af6f 	bne.w	8008118 <_scanf_float+0x64>
 800823a:	6822      	ldr	r2, [r4, #0]
 800823c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008240:	6022      	str	r2, [r4, #0]
 8008242:	460d      	mov	r5, r1
 8008244:	468a      	mov	sl, r1
 8008246:	f806 3b01 	strb.w	r3, [r6], #1
 800824a:	e7e2      	b.n	8008212 <_scanf_float+0x15e>
 800824c:	6822      	ldr	r2, [r4, #0]
 800824e:	0610      	lsls	r0, r2, #24
 8008250:	f57f af62 	bpl.w	8008118 <_scanf_float+0x64>
 8008254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008258:	6022      	str	r2, [r4, #0]
 800825a:	e7f4      	b.n	8008246 <_scanf_float+0x192>
 800825c:	f1ba 0f00 	cmp.w	sl, #0
 8008260:	d10e      	bne.n	8008280 <_scanf_float+0x1cc>
 8008262:	f1b9 0f00 	cmp.w	r9, #0
 8008266:	d10e      	bne.n	8008286 <_scanf_float+0x1d2>
 8008268:	6822      	ldr	r2, [r4, #0]
 800826a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800826e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008272:	d108      	bne.n	8008286 <_scanf_float+0x1d2>
 8008274:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008278:	6022      	str	r2, [r4, #0]
 800827a:	f04f 0a01 	mov.w	sl, #1
 800827e:	e7e2      	b.n	8008246 <_scanf_float+0x192>
 8008280:	f1ba 0f02 	cmp.w	sl, #2
 8008284:	d055      	beq.n	8008332 <_scanf_float+0x27e>
 8008286:	2d01      	cmp	r5, #1
 8008288:	d002      	beq.n	8008290 <_scanf_float+0x1dc>
 800828a:	2d04      	cmp	r5, #4
 800828c:	f47f af44 	bne.w	8008118 <_scanf_float+0x64>
 8008290:	3501      	adds	r5, #1
 8008292:	b2ed      	uxtb	r5, r5
 8008294:	e7d7      	b.n	8008246 <_scanf_float+0x192>
 8008296:	f1ba 0f01 	cmp.w	sl, #1
 800829a:	f47f af3d 	bne.w	8008118 <_scanf_float+0x64>
 800829e:	f04f 0a02 	mov.w	sl, #2
 80082a2:	e7d0      	b.n	8008246 <_scanf_float+0x192>
 80082a4:	b97d      	cbnz	r5, 80082c6 <_scanf_float+0x212>
 80082a6:	f1b9 0f00 	cmp.w	r9, #0
 80082aa:	f47f af38 	bne.w	800811e <_scanf_float+0x6a>
 80082ae:	6822      	ldr	r2, [r4, #0]
 80082b0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80082b4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80082b8:	f040 8108 	bne.w	80084cc <_scanf_float+0x418>
 80082bc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80082c0:	6022      	str	r2, [r4, #0]
 80082c2:	2501      	movs	r5, #1
 80082c4:	e7bf      	b.n	8008246 <_scanf_float+0x192>
 80082c6:	2d03      	cmp	r5, #3
 80082c8:	d0e2      	beq.n	8008290 <_scanf_float+0x1dc>
 80082ca:	2d05      	cmp	r5, #5
 80082cc:	e7de      	b.n	800828c <_scanf_float+0x1d8>
 80082ce:	2d02      	cmp	r5, #2
 80082d0:	f47f af22 	bne.w	8008118 <_scanf_float+0x64>
 80082d4:	2503      	movs	r5, #3
 80082d6:	e7b6      	b.n	8008246 <_scanf_float+0x192>
 80082d8:	2d06      	cmp	r5, #6
 80082da:	f47f af1d 	bne.w	8008118 <_scanf_float+0x64>
 80082de:	2507      	movs	r5, #7
 80082e0:	e7b1      	b.n	8008246 <_scanf_float+0x192>
 80082e2:	6822      	ldr	r2, [r4, #0]
 80082e4:	0591      	lsls	r1, r2, #22
 80082e6:	f57f af17 	bpl.w	8008118 <_scanf_float+0x64>
 80082ea:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80082ee:	6022      	str	r2, [r4, #0]
 80082f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80082f4:	e7a7      	b.n	8008246 <_scanf_float+0x192>
 80082f6:	6822      	ldr	r2, [r4, #0]
 80082f8:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80082fc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008300:	d006      	beq.n	8008310 <_scanf_float+0x25c>
 8008302:	0550      	lsls	r0, r2, #21
 8008304:	f57f af08 	bpl.w	8008118 <_scanf_float+0x64>
 8008308:	f1b9 0f00 	cmp.w	r9, #0
 800830c:	f000 80de 	beq.w	80084cc <_scanf_float+0x418>
 8008310:	0591      	lsls	r1, r2, #22
 8008312:	bf58      	it	pl
 8008314:	9902      	ldrpl	r1, [sp, #8]
 8008316:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800831a:	bf58      	it	pl
 800831c:	eba9 0101 	subpl.w	r1, r9, r1
 8008320:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8008324:	bf58      	it	pl
 8008326:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800832a:	6022      	str	r2, [r4, #0]
 800832c:	f04f 0900 	mov.w	r9, #0
 8008330:	e789      	b.n	8008246 <_scanf_float+0x192>
 8008332:	f04f 0a03 	mov.w	sl, #3
 8008336:	e786      	b.n	8008246 <_scanf_float+0x192>
 8008338:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800833c:	4639      	mov	r1, r7
 800833e:	4640      	mov	r0, r8
 8008340:	4798      	blx	r3
 8008342:	2800      	cmp	r0, #0
 8008344:	f43f aedb 	beq.w	80080fe <_scanf_float+0x4a>
 8008348:	e6e6      	b.n	8008118 <_scanf_float+0x64>
 800834a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800834e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008352:	463a      	mov	r2, r7
 8008354:	4640      	mov	r0, r8
 8008356:	4798      	blx	r3
 8008358:	6923      	ldr	r3, [r4, #16]
 800835a:	3b01      	subs	r3, #1
 800835c:	6123      	str	r3, [r4, #16]
 800835e:	e6e8      	b.n	8008132 <_scanf_float+0x7e>
 8008360:	1e6b      	subs	r3, r5, #1
 8008362:	2b06      	cmp	r3, #6
 8008364:	d824      	bhi.n	80083b0 <_scanf_float+0x2fc>
 8008366:	2d02      	cmp	r5, #2
 8008368:	d836      	bhi.n	80083d8 <_scanf_float+0x324>
 800836a:	9b01      	ldr	r3, [sp, #4]
 800836c:	429e      	cmp	r6, r3
 800836e:	f67f aee4 	bls.w	800813a <_scanf_float+0x86>
 8008372:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008376:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800837a:	463a      	mov	r2, r7
 800837c:	4640      	mov	r0, r8
 800837e:	4798      	blx	r3
 8008380:	6923      	ldr	r3, [r4, #16]
 8008382:	3b01      	subs	r3, #1
 8008384:	6123      	str	r3, [r4, #16]
 8008386:	e7f0      	b.n	800836a <_scanf_float+0x2b6>
 8008388:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800838c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8008390:	463a      	mov	r2, r7
 8008392:	4640      	mov	r0, r8
 8008394:	4798      	blx	r3
 8008396:	6923      	ldr	r3, [r4, #16]
 8008398:	3b01      	subs	r3, #1
 800839a:	6123      	str	r3, [r4, #16]
 800839c:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083a0:	fa5f fa8a 	uxtb.w	sl, sl
 80083a4:	f1ba 0f02 	cmp.w	sl, #2
 80083a8:	d1ee      	bne.n	8008388 <_scanf_float+0x2d4>
 80083aa:	3d03      	subs	r5, #3
 80083ac:	b2ed      	uxtb	r5, r5
 80083ae:	1b76      	subs	r6, r6, r5
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	05da      	lsls	r2, r3, #23
 80083b4:	d530      	bpl.n	8008418 <_scanf_float+0x364>
 80083b6:	055b      	lsls	r3, r3, #21
 80083b8:	d511      	bpl.n	80083de <_scanf_float+0x32a>
 80083ba:	9b01      	ldr	r3, [sp, #4]
 80083bc:	429e      	cmp	r6, r3
 80083be:	f67f aebc 	bls.w	800813a <_scanf_float+0x86>
 80083c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083ca:	463a      	mov	r2, r7
 80083cc:	4640      	mov	r0, r8
 80083ce:	4798      	blx	r3
 80083d0:	6923      	ldr	r3, [r4, #16]
 80083d2:	3b01      	subs	r3, #1
 80083d4:	6123      	str	r3, [r4, #16]
 80083d6:	e7f0      	b.n	80083ba <_scanf_float+0x306>
 80083d8:	46aa      	mov	sl, r5
 80083da:	46b3      	mov	fp, r6
 80083dc:	e7de      	b.n	800839c <_scanf_float+0x2e8>
 80083de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	2965      	cmp	r1, #101	@ 0x65
 80083e6:	f103 33ff 	add.w	r3, r3, #4294967295
 80083ea:	f106 35ff 	add.w	r5, r6, #4294967295
 80083ee:	6123      	str	r3, [r4, #16]
 80083f0:	d00c      	beq.n	800840c <_scanf_float+0x358>
 80083f2:	2945      	cmp	r1, #69	@ 0x45
 80083f4:	d00a      	beq.n	800840c <_scanf_float+0x358>
 80083f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80083fa:	463a      	mov	r2, r7
 80083fc:	4640      	mov	r0, r8
 80083fe:	4798      	blx	r3
 8008400:	6923      	ldr	r3, [r4, #16]
 8008402:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008406:	3b01      	subs	r3, #1
 8008408:	1eb5      	subs	r5, r6, #2
 800840a:	6123      	str	r3, [r4, #16]
 800840c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8008410:	463a      	mov	r2, r7
 8008412:	4640      	mov	r0, r8
 8008414:	4798      	blx	r3
 8008416:	462e      	mov	r6, r5
 8008418:	6822      	ldr	r2, [r4, #0]
 800841a:	f012 0210 	ands.w	r2, r2, #16
 800841e:	d001      	beq.n	8008424 <_scanf_float+0x370>
 8008420:	2000      	movs	r0, #0
 8008422:	e68b      	b.n	800813c <_scanf_float+0x88>
 8008424:	7032      	strb	r2, [r6, #0]
 8008426:	6823      	ldr	r3, [r4, #0]
 8008428:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800842c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008430:	d11c      	bne.n	800846c <_scanf_float+0x3b8>
 8008432:	9b02      	ldr	r3, [sp, #8]
 8008434:	454b      	cmp	r3, r9
 8008436:	eba3 0209 	sub.w	r2, r3, r9
 800843a:	d123      	bne.n	8008484 <_scanf_float+0x3d0>
 800843c:	9901      	ldr	r1, [sp, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	4640      	mov	r0, r8
 8008442:	f7ff f975 	bl	8007730 <_strtod_r>
 8008446:	9b03      	ldr	r3, [sp, #12]
 8008448:	6821      	ldr	r1, [r4, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f011 0f02 	tst.w	r1, #2
 8008450:	ec57 6b10 	vmov	r6, r7, d0
 8008454:	f103 0204 	add.w	r2, r3, #4
 8008458:	d01f      	beq.n	800849a <_scanf_float+0x3e6>
 800845a:	9903      	ldr	r1, [sp, #12]
 800845c:	600a      	str	r2, [r1, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	e9c3 6700 	strd	r6, r7, [r3]
 8008464:	68e3      	ldr	r3, [r4, #12]
 8008466:	3301      	adds	r3, #1
 8008468:	60e3      	str	r3, [r4, #12]
 800846a:	e7d9      	b.n	8008420 <_scanf_float+0x36c>
 800846c:	9b04      	ldr	r3, [sp, #16]
 800846e:	2b00      	cmp	r3, #0
 8008470:	d0e4      	beq.n	800843c <_scanf_float+0x388>
 8008472:	9905      	ldr	r1, [sp, #20]
 8008474:	230a      	movs	r3, #10
 8008476:	3101      	adds	r1, #1
 8008478:	4640      	mov	r0, r8
 800847a:	f002 f9dd 	bl	800a838 <_strtol_r>
 800847e:	9b04      	ldr	r3, [sp, #16]
 8008480:	9e05      	ldr	r6, [sp, #20]
 8008482:	1ac2      	subs	r2, r0, r3
 8008484:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8008488:	429e      	cmp	r6, r3
 800848a:	bf28      	it	cs
 800848c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8008490:	4910      	ldr	r1, [pc, #64]	@ (80084d4 <_scanf_float+0x420>)
 8008492:	4630      	mov	r0, r6
 8008494:	f000 f8f6 	bl	8008684 <siprintf>
 8008498:	e7d0      	b.n	800843c <_scanf_float+0x388>
 800849a:	f011 0f04 	tst.w	r1, #4
 800849e:	9903      	ldr	r1, [sp, #12]
 80084a0:	600a      	str	r2, [r1, #0]
 80084a2:	d1dc      	bne.n	800845e <_scanf_float+0x3aa>
 80084a4:	681d      	ldr	r5, [r3, #0]
 80084a6:	4632      	mov	r2, r6
 80084a8:	463b      	mov	r3, r7
 80084aa:	4630      	mov	r0, r6
 80084ac:	4639      	mov	r1, r7
 80084ae:	f7f8 fb3d 	bl	8000b2c <__aeabi_dcmpun>
 80084b2:	b128      	cbz	r0, 80084c0 <_scanf_float+0x40c>
 80084b4:	4808      	ldr	r0, [pc, #32]	@ (80084d8 <_scanf_float+0x424>)
 80084b6:	f000 f9f3 	bl	80088a0 <nanf>
 80084ba:	ed85 0a00 	vstr	s0, [r5]
 80084be:	e7d1      	b.n	8008464 <_scanf_float+0x3b0>
 80084c0:	4630      	mov	r0, r6
 80084c2:	4639      	mov	r1, r7
 80084c4:	f7f8 fb90 	bl	8000be8 <__aeabi_d2f>
 80084c8:	6028      	str	r0, [r5, #0]
 80084ca:	e7cb      	b.n	8008464 <_scanf_float+0x3b0>
 80084cc:	f04f 0900 	mov.w	r9, #0
 80084d0:	e629      	b.n	8008126 <_scanf_float+0x72>
 80084d2:	bf00      	nop
 80084d4:	0800b7b4 	.word	0x0800b7b4
 80084d8:	0800bb55 	.word	0x0800bb55

080084dc <std>:
 80084dc:	2300      	movs	r3, #0
 80084de:	b510      	push	{r4, lr}
 80084e0:	4604      	mov	r4, r0
 80084e2:	e9c0 3300 	strd	r3, r3, [r0]
 80084e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ea:	6083      	str	r3, [r0, #8]
 80084ec:	8181      	strh	r1, [r0, #12]
 80084ee:	6643      	str	r3, [r0, #100]	@ 0x64
 80084f0:	81c2      	strh	r2, [r0, #14]
 80084f2:	6183      	str	r3, [r0, #24]
 80084f4:	4619      	mov	r1, r3
 80084f6:	2208      	movs	r2, #8
 80084f8:	305c      	adds	r0, #92	@ 0x5c
 80084fa:	f000 f926 	bl	800874a <memset>
 80084fe:	4b0d      	ldr	r3, [pc, #52]	@ (8008534 <std+0x58>)
 8008500:	6263      	str	r3, [r4, #36]	@ 0x24
 8008502:	4b0d      	ldr	r3, [pc, #52]	@ (8008538 <std+0x5c>)
 8008504:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008506:	4b0d      	ldr	r3, [pc, #52]	@ (800853c <std+0x60>)
 8008508:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800850a:	4b0d      	ldr	r3, [pc, #52]	@ (8008540 <std+0x64>)
 800850c:	6323      	str	r3, [r4, #48]	@ 0x30
 800850e:	4b0d      	ldr	r3, [pc, #52]	@ (8008544 <std+0x68>)
 8008510:	6224      	str	r4, [r4, #32]
 8008512:	429c      	cmp	r4, r3
 8008514:	d006      	beq.n	8008524 <std+0x48>
 8008516:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800851a:	4294      	cmp	r4, r2
 800851c:	d002      	beq.n	8008524 <std+0x48>
 800851e:	33d0      	adds	r3, #208	@ 0xd0
 8008520:	429c      	cmp	r4, r3
 8008522:	d105      	bne.n	8008530 <std+0x54>
 8008524:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008528:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800852c:	f000 b99c 	b.w	8008868 <__retarget_lock_init_recursive>
 8008530:	bd10      	pop	{r4, pc}
 8008532:	bf00      	nop
 8008534:	080086c5 	.word	0x080086c5
 8008538:	080086e7 	.word	0x080086e7
 800853c:	0800871f 	.word	0x0800871f
 8008540:	08008743 	.word	0x08008743
 8008544:	20000628 	.word	0x20000628

08008548 <stdio_exit_handler>:
 8008548:	4a02      	ldr	r2, [pc, #8]	@ (8008554 <stdio_exit_handler+0xc>)
 800854a:	4903      	ldr	r1, [pc, #12]	@ (8008558 <stdio_exit_handler+0x10>)
 800854c:	4803      	ldr	r0, [pc, #12]	@ (800855c <stdio_exit_handler+0x14>)
 800854e:	f000 b869 	b.w	8008624 <_fwalk_sglue>
 8008552:	bf00      	nop
 8008554:	20000030 	.word	0x20000030
 8008558:	0800ae91 	.word	0x0800ae91
 800855c:	200001ac 	.word	0x200001ac

08008560 <cleanup_stdio>:
 8008560:	6841      	ldr	r1, [r0, #4]
 8008562:	4b0c      	ldr	r3, [pc, #48]	@ (8008594 <cleanup_stdio+0x34>)
 8008564:	4299      	cmp	r1, r3
 8008566:	b510      	push	{r4, lr}
 8008568:	4604      	mov	r4, r0
 800856a:	d001      	beq.n	8008570 <cleanup_stdio+0x10>
 800856c:	f002 fc90 	bl	800ae90 <_fflush_r>
 8008570:	68a1      	ldr	r1, [r4, #8]
 8008572:	4b09      	ldr	r3, [pc, #36]	@ (8008598 <cleanup_stdio+0x38>)
 8008574:	4299      	cmp	r1, r3
 8008576:	d002      	beq.n	800857e <cleanup_stdio+0x1e>
 8008578:	4620      	mov	r0, r4
 800857a:	f002 fc89 	bl	800ae90 <_fflush_r>
 800857e:	68e1      	ldr	r1, [r4, #12]
 8008580:	4b06      	ldr	r3, [pc, #24]	@ (800859c <cleanup_stdio+0x3c>)
 8008582:	4299      	cmp	r1, r3
 8008584:	d004      	beq.n	8008590 <cleanup_stdio+0x30>
 8008586:	4620      	mov	r0, r4
 8008588:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800858c:	f002 bc80 	b.w	800ae90 <_fflush_r>
 8008590:	bd10      	pop	{r4, pc}
 8008592:	bf00      	nop
 8008594:	20000628 	.word	0x20000628
 8008598:	20000690 	.word	0x20000690
 800859c:	200006f8 	.word	0x200006f8

080085a0 <global_stdio_init.part.0>:
 80085a0:	b510      	push	{r4, lr}
 80085a2:	4b0b      	ldr	r3, [pc, #44]	@ (80085d0 <global_stdio_init.part.0+0x30>)
 80085a4:	4c0b      	ldr	r4, [pc, #44]	@ (80085d4 <global_stdio_init.part.0+0x34>)
 80085a6:	4a0c      	ldr	r2, [pc, #48]	@ (80085d8 <global_stdio_init.part.0+0x38>)
 80085a8:	601a      	str	r2, [r3, #0]
 80085aa:	4620      	mov	r0, r4
 80085ac:	2200      	movs	r2, #0
 80085ae:	2104      	movs	r1, #4
 80085b0:	f7ff ff94 	bl	80084dc <std>
 80085b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80085b8:	2201      	movs	r2, #1
 80085ba:	2109      	movs	r1, #9
 80085bc:	f7ff ff8e 	bl	80084dc <std>
 80085c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80085c4:	2202      	movs	r2, #2
 80085c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085ca:	2112      	movs	r1, #18
 80085cc:	f7ff bf86 	b.w	80084dc <std>
 80085d0:	20000760 	.word	0x20000760
 80085d4:	20000628 	.word	0x20000628
 80085d8:	08008549 	.word	0x08008549

080085dc <__sfp_lock_acquire>:
 80085dc:	4801      	ldr	r0, [pc, #4]	@ (80085e4 <__sfp_lock_acquire+0x8>)
 80085de:	f000 b944 	b.w	800886a <__retarget_lock_acquire_recursive>
 80085e2:	bf00      	nop
 80085e4:	20000769 	.word	0x20000769

080085e8 <__sfp_lock_release>:
 80085e8:	4801      	ldr	r0, [pc, #4]	@ (80085f0 <__sfp_lock_release+0x8>)
 80085ea:	f000 b93f 	b.w	800886c <__retarget_lock_release_recursive>
 80085ee:	bf00      	nop
 80085f0:	20000769 	.word	0x20000769

080085f4 <__sinit>:
 80085f4:	b510      	push	{r4, lr}
 80085f6:	4604      	mov	r4, r0
 80085f8:	f7ff fff0 	bl	80085dc <__sfp_lock_acquire>
 80085fc:	6a23      	ldr	r3, [r4, #32]
 80085fe:	b11b      	cbz	r3, 8008608 <__sinit+0x14>
 8008600:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008604:	f7ff bff0 	b.w	80085e8 <__sfp_lock_release>
 8008608:	4b04      	ldr	r3, [pc, #16]	@ (800861c <__sinit+0x28>)
 800860a:	6223      	str	r3, [r4, #32]
 800860c:	4b04      	ldr	r3, [pc, #16]	@ (8008620 <__sinit+0x2c>)
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d1f5      	bne.n	8008600 <__sinit+0xc>
 8008614:	f7ff ffc4 	bl	80085a0 <global_stdio_init.part.0>
 8008618:	e7f2      	b.n	8008600 <__sinit+0xc>
 800861a:	bf00      	nop
 800861c:	08008561 	.word	0x08008561
 8008620:	20000760 	.word	0x20000760

08008624 <_fwalk_sglue>:
 8008624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008628:	4607      	mov	r7, r0
 800862a:	4688      	mov	r8, r1
 800862c:	4614      	mov	r4, r2
 800862e:	2600      	movs	r6, #0
 8008630:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008634:	f1b9 0901 	subs.w	r9, r9, #1
 8008638:	d505      	bpl.n	8008646 <_fwalk_sglue+0x22>
 800863a:	6824      	ldr	r4, [r4, #0]
 800863c:	2c00      	cmp	r4, #0
 800863e:	d1f7      	bne.n	8008630 <_fwalk_sglue+0xc>
 8008640:	4630      	mov	r0, r6
 8008642:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008646:	89ab      	ldrh	r3, [r5, #12]
 8008648:	2b01      	cmp	r3, #1
 800864a:	d907      	bls.n	800865c <_fwalk_sglue+0x38>
 800864c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008650:	3301      	adds	r3, #1
 8008652:	d003      	beq.n	800865c <_fwalk_sglue+0x38>
 8008654:	4629      	mov	r1, r5
 8008656:	4638      	mov	r0, r7
 8008658:	47c0      	blx	r8
 800865a:	4306      	orrs	r6, r0
 800865c:	3568      	adds	r5, #104	@ 0x68
 800865e:	e7e9      	b.n	8008634 <_fwalk_sglue+0x10>

08008660 <iprintf>:
 8008660:	b40f      	push	{r0, r1, r2, r3}
 8008662:	b507      	push	{r0, r1, r2, lr}
 8008664:	4906      	ldr	r1, [pc, #24]	@ (8008680 <iprintf+0x20>)
 8008666:	ab04      	add	r3, sp, #16
 8008668:	6808      	ldr	r0, [r1, #0]
 800866a:	f853 2b04 	ldr.w	r2, [r3], #4
 800866e:	6881      	ldr	r1, [r0, #8]
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	f002 fa71 	bl	800ab58 <_vfiprintf_r>
 8008676:	b003      	add	sp, #12
 8008678:	f85d eb04 	ldr.w	lr, [sp], #4
 800867c:	b004      	add	sp, #16
 800867e:	4770      	bx	lr
 8008680:	200001a8 	.word	0x200001a8

08008684 <siprintf>:
 8008684:	b40e      	push	{r1, r2, r3}
 8008686:	b500      	push	{lr}
 8008688:	b09c      	sub	sp, #112	@ 0x70
 800868a:	ab1d      	add	r3, sp, #116	@ 0x74
 800868c:	9002      	str	r0, [sp, #8]
 800868e:	9006      	str	r0, [sp, #24]
 8008690:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008694:	4809      	ldr	r0, [pc, #36]	@ (80086bc <siprintf+0x38>)
 8008696:	9107      	str	r1, [sp, #28]
 8008698:	9104      	str	r1, [sp, #16]
 800869a:	4909      	ldr	r1, [pc, #36]	@ (80086c0 <siprintf+0x3c>)
 800869c:	f853 2b04 	ldr.w	r2, [r3], #4
 80086a0:	9105      	str	r1, [sp, #20]
 80086a2:	6800      	ldr	r0, [r0, #0]
 80086a4:	9301      	str	r3, [sp, #4]
 80086a6:	a902      	add	r1, sp, #8
 80086a8:	f002 f930 	bl	800a90c <_svfiprintf_r>
 80086ac:	9b02      	ldr	r3, [sp, #8]
 80086ae:	2200      	movs	r2, #0
 80086b0:	701a      	strb	r2, [r3, #0]
 80086b2:	b01c      	add	sp, #112	@ 0x70
 80086b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086b8:	b003      	add	sp, #12
 80086ba:	4770      	bx	lr
 80086bc:	200001a8 	.word	0x200001a8
 80086c0:	ffff0208 	.word	0xffff0208

080086c4 <__sread>:
 80086c4:	b510      	push	{r4, lr}
 80086c6:	460c      	mov	r4, r1
 80086c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086cc:	f000 f87e 	bl	80087cc <_read_r>
 80086d0:	2800      	cmp	r0, #0
 80086d2:	bfab      	itete	ge
 80086d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80086d6:	89a3      	ldrhlt	r3, [r4, #12]
 80086d8:	181b      	addge	r3, r3, r0
 80086da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80086de:	bfac      	ite	ge
 80086e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80086e2:	81a3      	strhlt	r3, [r4, #12]
 80086e4:	bd10      	pop	{r4, pc}

080086e6 <__swrite>:
 80086e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ea:	461f      	mov	r7, r3
 80086ec:	898b      	ldrh	r3, [r1, #12]
 80086ee:	05db      	lsls	r3, r3, #23
 80086f0:	4605      	mov	r5, r0
 80086f2:	460c      	mov	r4, r1
 80086f4:	4616      	mov	r6, r2
 80086f6:	d505      	bpl.n	8008704 <__swrite+0x1e>
 80086f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086fc:	2302      	movs	r3, #2
 80086fe:	2200      	movs	r2, #0
 8008700:	f000 f852 	bl	80087a8 <_lseek_r>
 8008704:	89a3      	ldrh	r3, [r4, #12]
 8008706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800870a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800870e:	81a3      	strh	r3, [r4, #12]
 8008710:	4632      	mov	r2, r6
 8008712:	463b      	mov	r3, r7
 8008714:	4628      	mov	r0, r5
 8008716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800871a:	f000 b869 	b.w	80087f0 <_write_r>

0800871e <__sseek>:
 800871e:	b510      	push	{r4, lr}
 8008720:	460c      	mov	r4, r1
 8008722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008726:	f000 f83f 	bl	80087a8 <_lseek_r>
 800872a:	1c43      	adds	r3, r0, #1
 800872c:	89a3      	ldrh	r3, [r4, #12]
 800872e:	bf15      	itete	ne
 8008730:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800873a:	81a3      	strheq	r3, [r4, #12]
 800873c:	bf18      	it	ne
 800873e:	81a3      	strhne	r3, [r4, #12]
 8008740:	bd10      	pop	{r4, pc}

08008742 <__sclose>:
 8008742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008746:	f000 b81f 	b.w	8008788 <_close_r>

0800874a <memset>:
 800874a:	4402      	add	r2, r0
 800874c:	4603      	mov	r3, r0
 800874e:	4293      	cmp	r3, r2
 8008750:	d100      	bne.n	8008754 <memset+0xa>
 8008752:	4770      	bx	lr
 8008754:	f803 1b01 	strb.w	r1, [r3], #1
 8008758:	e7f9      	b.n	800874e <memset+0x4>

0800875a <strncmp>:
 800875a:	b510      	push	{r4, lr}
 800875c:	b16a      	cbz	r2, 800877a <strncmp+0x20>
 800875e:	3901      	subs	r1, #1
 8008760:	1884      	adds	r4, r0, r2
 8008762:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008766:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800876a:	429a      	cmp	r2, r3
 800876c:	d103      	bne.n	8008776 <strncmp+0x1c>
 800876e:	42a0      	cmp	r0, r4
 8008770:	d001      	beq.n	8008776 <strncmp+0x1c>
 8008772:	2a00      	cmp	r2, #0
 8008774:	d1f5      	bne.n	8008762 <strncmp+0x8>
 8008776:	1ad0      	subs	r0, r2, r3
 8008778:	bd10      	pop	{r4, pc}
 800877a:	4610      	mov	r0, r2
 800877c:	e7fc      	b.n	8008778 <strncmp+0x1e>
	...

08008780 <_localeconv_r>:
 8008780:	4800      	ldr	r0, [pc, #0]	@ (8008784 <_localeconv_r+0x4>)
 8008782:	4770      	bx	lr
 8008784:	2000012c 	.word	0x2000012c

08008788 <_close_r>:
 8008788:	b538      	push	{r3, r4, r5, lr}
 800878a:	4d06      	ldr	r5, [pc, #24]	@ (80087a4 <_close_r+0x1c>)
 800878c:	2300      	movs	r3, #0
 800878e:	4604      	mov	r4, r0
 8008790:	4608      	mov	r0, r1
 8008792:	602b      	str	r3, [r5, #0]
 8008794:	f7f9 fd6a 	bl	800226c <_close>
 8008798:	1c43      	adds	r3, r0, #1
 800879a:	d102      	bne.n	80087a2 <_close_r+0x1a>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	b103      	cbz	r3, 80087a2 <_close_r+0x1a>
 80087a0:	6023      	str	r3, [r4, #0]
 80087a2:	bd38      	pop	{r3, r4, r5, pc}
 80087a4:	20000764 	.word	0x20000764

080087a8 <_lseek_r>:
 80087a8:	b538      	push	{r3, r4, r5, lr}
 80087aa:	4d07      	ldr	r5, [pc, #28]	@ (80087c8 <_lseek_r+0x20>)
 80087ac:	4604      	mov	r4, r0
 80087ae:	4608      	mov	r0, r1
 80087b0:	4611      	mov	r1, r2
 80087b2:	2200      	movs	r2, #0
 80087b4:	602a      	str	r2, [r5, #0]
 80087b6:	461a      	mov	r2, r3
 80087b8:	f7f9 fd7f 	bl	80022ba <_lseek>
 80087bc:	1c43      	adds	r3, r0, #1
 80087be:	d102      	bne.n	80087c6 <_lseek_r+0x1e>
 80087c0:	682b      	ldr	r3, [r5, #0]
 80087c2:	b103      	cbz	r3, 80087c6 <_lseek_r+0x1e>
 80087c4:	6023      	str	r3, [r4, #0]
 80087c6:	bd38      	pop	{r3, r4, r5, pc}
 80087c8:	20000764 	.word	0x20000764

080087cc <_read_r>:
 80087cc:	b538      	push	{r3, r4, r5, lr}
 80087ce:	4d07      	ldr	r5, [pc, #28]	@ (80087ec <_read_r+0x20>)
 80087d0:	4604      	mov	r4, r0
 80087d2:	4608      	mov	r0, r1
 80087d4:	4611      	mov	r1, r2
 80087d6:	2200      	movs	r2, #0
 80087d8:	602a      	str	r2, [r5, #0]
 80087da:	461a      	mov	r2, r3
 80087dc:	f7f9 fd29 	bl	8002232 <_read>
 80087e0:	1c43      	adds	r3, r0, #1
 80087e2:	d102      	bne.n	80087ea <_read_r+0x1e>
 80087e4:	682b      	ldr	r3, [r5, #0]
 80087e6:	b103      	cbz	r3, 80087ea <_read_r+0x1e>
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	bd38      	pop	{r3, r4, r5, pc}
 80087ec:	20000764 	.word	0x20000764

080087f0 <_write_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d07      	ldr	r5, [pc, #28]	@ (8008810 <_write_r+0x20>)
 80087f4:	4604      	mov	r4, r0
 80087f6:	4608      	mov	r0, r1
 80087f8:	4611      	mov	r1, r2
 80087fa:	2200      	movs	r2, #0
 80087fc:	602a      	str	r2, [r5, #0]
 80087fe:	461a      	mov	r2, r3
 8008800:	f7f9 fba0 	bl	8001f44 <_write>
 8008804:	1c43      	adds	r3, r0, #1
 8008806:	d102      	bne.n	800880e <_write_r+0x1e>
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	b103      	cbz	r3, 800880e <_write_r+0x1e>
 800880c:	6023      	str	r3, [r4, #0]
 800880e:	bd38      	pop	{r3, r4, r5, pc}
 8008810:	20000764 	.word	0x20000764

08008814 <__errno>:
 8008814:	4b01      	ldr	r3, [pc, #4]	@ (800881c <__errno+0x8>)
 8008816:	6818      	ldr	r0, [r3, #0]
 8008818:	4770      	bx	lr
 800881a:	bf00      	nop
 800881c:	200001a8 	.word	0x200001a8

08008820 <__libc_init_array>:
 8008820:	b570      	push	{r4, r5, r6, lr}
 8008822:	4d0d      	ldr	r5, [pc, #52]	@ (8008858 <__libc_init_array+0x38>)
 8008824:	4c0d      	ldr	r4, [pc, #52]	@ (800885c <__libc_init_array+0x3c>)
 8008826:	1b64      	subs	r4, r4, r5
 8008828:	10a4      	asrs	r4, r4, #2
 800882a:	2600      	movs	r6, #0
 800882c:	42a6      	cmp	r6, r4
 800882e:	d109      	bne.n	8008844 <__libc_init_array+0x24>
 8008830:	4d0b      	ldr	r5, [pc, #44]	@ (8008860 <__libc_init_array+0x40>)
 8008832:	4c0c      	ldr	r4, [pc, #48]	@ (8008864 <__libc_init_array+0x44>)
 8008834:	f002 fd5c 	bl	800b2f0 <_init>
 8008838:	1b64      	subs	r4, r4, r5
 800883a:	10a4      	asrs	r4, r4, #2
 800883c:	2600      	movs	r6, #0
 800883e:	42a6      	cmp	r6, r4
 8008840:	d105      	bne.n	800884e <__libc_init_array+0x2e>
 8008842:	bd70      	pop	{r4, r5, r6, pc}
 8008844:	f855 3b04 	ldr.w	r3, [r5], #4
 8008848:	4798      	blx	r3
 800884a:	3601      	adds	r6, #1
 800884c:	e7ee      	b.n	800882c <__libc_init_array+0xc>
 800884e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008852:	4798      	blx	r3
 8008854:	3601      	adds	r6, #1
 8008856:	e7f2      	b.n	800883e <__libc_init_array+0x1e>
 8008858:	0800bb60 	.word	0x0800bb60
 800885c:	0800bb60 	.word	0x0800bb60
 8008860:	0800bb60 	.word	0x0800bb60
 8008864:	0800bb68 	.word	0x0800bb68

08008868 <__retarget_lock_init_recursive>:
 8008868:	4770      	bx	lr

0800886a <__retarget_lock_acquire_recursive>:
 800886a:	4770      	bx	lr

0800886c <__retarget_lock_release_recursive>:
 800886c:	4770      	bx	lr

0800886e <memcpy>:
 800886e:	440a      	add	r2, r1
 8008870:	4291      	cmp	r1, r2
 8008872:	f100 33ff 	add.w	r3, r0, #4294967295
 8008876:	d100      	bne.n	800887a <memcpy+0xc>
 8008878:	4770      	bx	lr
 800887a:	b510      	push	{r4, lr}
 800887c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008880:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008884:	4291      	cmp	r1, r2
 8008886:	d1f9      	bne.n	800887c <memcpy+0xe>
 8008888:	bd10      	pop	{r4, pc}
 800888a:	0000      	movs	r0, r0
 800888c:	0000      	movs	r0, r0
	...

08008890 <nan>:
 8008890:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008898 <nan+0x8>
 8008894:	4770      	bx	lr
 8008896:	bf00      	nop
 8008898:	00000000 	.word	0x00000000
 800889c:	7ff80000 	.word	0x7ff80000

080088a0 <nanf>:
 80088a0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80088a8 <nanf+0x8>
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	7fc00000 	.word	0x7fc00000

080088ac <quorem>:
 80088ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088b0:	6903      	ldr	r3, [r0, #16]
 80088b2:	690c      	ldr	r4, [r1, #16]
 80088b4:	42a3      	cmp	r3, r4
 80088b6:	4607      	mov	r7, r0
 80088b8:	db7e      	blt.n	80089b8 <quorem+0x10c>
 80088ba:	3c01      	subs	r4, #1
 80088bc:	f101 0814 	add.w	r8, r1, #20
 80088c0:	00a3      	lsls	r3, r4, #2
 80088c2:	f100 0514 	add.w	r5, r0, #20
 80088c6:	9300      	str	r3, [sp, #0]
 80088c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80088cc:	9301      	str	r3, [sp, #4]
 80088ce:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80088d2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80088d6:	3301      	adds	r3, #1
 80088d8:	429a      	cmp	r2, r3
 80088da:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80088de:	fbb2 f6f3 	udiv	r6, r2, r3
 80088e2:	d32e      	bcc.n	8008942 <quorem+0x96>
 80088e4:	f04f 0a00 	mov.w	sl, #0
 80088e8:	46c4      	mov	ip, r8
 80088ea:	46ae      	mov	lr, r5
 80088ec:	46d3      	mov	fp, sl
 80088ee:	f85c 3b04 	ldr.w	r3, [ip], #4
 80088f2:	b298      	uxth	r0, r3
 80088f4:	fb06 a000 	mla	r0, r6, r0, sl
 80088f8:	0c02      	lsrs	r2, r0, #16
 80088fa:	0c1b      	lsrs	r3, r3, #16
 80088fc:	fb06 2303 	mla	r3, r6, r3, r2
 8008900:	f8de 2000 	ldr.w	r2, [lr]
 8008904:	b280      	uxth	r0, r0
 8008906:	b292      	uxth	r2, r2
 8008908:	1a12      	subs	r2, r2, r0
 800890a:	445a      	add	r2, fp
 800890c:	f8de 0000 	ldr.w	r0, [lr]
 8008910:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008914:	b29b      	uxth	r3, r3
 8008916:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800891a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800891e:	b292      	uxth	r2, r2
 8008920:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008924:	45e1      	cmp	r9, ip
 8008926:	f84e 2b04 	str.w	r2, [lr], #4
 800892a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800892e:	d2de      	bcs.n	80088ee <quorem+0x42>
 8008930:	9b00      	ldr	r3, [sp, #0]
 8008932:	58eb      	ldr	r3, [r5, r3]
 8008934:	b92b      	cbnz	r3, 8008942 <quorem+0x96>
 8008936:	9b01      	ldr	r3, [sp, #4]
 8008938:	3b04      	subs	r3, #4
 800893a:	429d      	cmp	r5, r3
 800893c:	461a      	mov	r2, r3
 800893e:	d32f      	bcc.n	80089a0 <quorem+0xf4>
 8008940:	613c      	str	r4, [r7, #16]
 8008942:	4638      	mov	r0, r7
 8008944:	f001 fd10 	bl	800a368 <__mcmp>
 8008948:	2800      	cmp	r0, #0
 800894a:	db25      	blt.n	8008998 <quorem+0xec>
 800894c:	4629      	mov	r1, r5
 800894e:	2000      	movs	r0, #0
 8008950:	f858 2b04 	ldr.w	r2, [r8], #4
 8008954:	f8d1 c000 	ldr.w	ip, [r1]
 8008958:	fa1f fe82 	uxth.w	lr, r2
 800895c:	fa1f f38c 	uxth.w	r3, ip
 8008960:	eba3 030e 	sub.w	r3, r3, lr
 8008964:	4403      	add	r3, r0
 8008966:	0c12      	lsrs	r2, r2, #16
 8008968:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800896c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008970:	b29b      	uxth	r3, r3
 8008972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008976:	45c1      	cmp	r9, r8
 8008978:	f841 3b04 	str.w	r3, [r1], #4
 800897c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008980:	d2e6      	bcs.n	8008950 <quorem+0xa4>
 8008982:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008986:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800898a:	b922      	cbnz	r2, 8008996 <quorem+0xea>
 800898c:	3b04      	subs	r3, #4
 800898e:	429d      	cmp	r5, r3
 8008990:	461a      	mov	r2, r3
 8008992:	d30b      	bcc.n	80089ac <quorem+0x100>
 8008994:	613c      	str	r4, [r7, #16]
 8008996:	3601      	adds	r6, #1
 8008998:	4630      	mov	r0, r6
 800899a:	b003      	add	sp, #12
 800899c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80089a0:	6812      	ldr	r2, [r2, #0]
 80089a2:	3b04      	subs	r3, #4
 80089a4:	2a00      	cmp	r2, #0
 80089a6:	d1cb      	bne.n	8008940 <quorem+0x94>
 80089a8:	3c01      	subs	r4, #1
 80089aa:	e7c6      	b.n	800893a <quorem+0x8e>
 80089ac:	6812      	ldr	r2, [r2, #0]
 80089ae:	3b04      	subs	r3, #4
 80089b0:	2a00      	cmp	r2, #0
 80089b2:	d1ef      	bne.n	8008994 <quorem+0xe8>
 80089b4:	3c01      	subs	r4, #1
 80089b6:	e7ea      	b.n	800898e <quorem+0xe2>
 80089b8:	2000      	movs	r0, #0
 80089ba:	e7ee      	b.n	800899a <quorem+0xee>
 80089bc:	0000      	movs	r0, r0
	...

080089c0 <_dtoa_r>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	69c7      	ldr	r7, [r0, #28]
 80089c6:	b099      	sub	sp, #100	@ 0x64
 80089c8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80089cc:	ec55 4b10 	vmov	r4, r5, d0
 80089d0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80089d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80089d4:	4683      	mov	fp, r0
 80089d6:	920e      	str	r2, [sp, #56]	@ 0x38
 80089d8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80089da:	b97f      	cbnz	r7, 80089fc <_dtoa_r+0x3c>
 80089dc:	2010      	movs	r0, #16
 80089de:	f001 f937 	bl	8009c50 <malloc>
 80089e2:	4602      	mov	r2, r0
 80089e4:	f8cb 001c 	str.w	r0, [fp, #28]
 80089e8:	b920      	cbnz	r0, 80089f4 <_dtoa_r+0x34>
 80089ea:	4ba7      	ldr	r3, [pc, #668]	@ (8008c88 <_dtoa_r+0x2c8>)
 80089ec:	21ef      	movs	r1, #239	@ 0xef
 80089ee:	48a7      	ldr	r0, [pc, #668]	@ (8008c8c <_dtoa_r+0x2cc>)
 80089f0:	f002 fb34 	bl	800b05c <__assert_func>
 80089f4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80089f8:	6007      	str	r7, [r0, #0]
 80089fa:	60c7      	str	r7, [r0, #12]
 80089fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a00:	6819      	ldr	r1, [r3, #0]
 8008a02:	b159      	cbz	r1, 8008a1c <_dtoa_r+0x5c>
 8008a04:	685a      	ldr	r2, [r3, #4]
 8008a06:	604a      	str	r2, [r1, #4]
 8008a08:	2301      	movs	r3, #1
 8008a0a:	4093      	lsls	r3, r2
 8008a0c:	608b      	str	r3, [r1, #8]
 8008a0e:	4658      	mov	r0, fp
 8008a10:	f001 fa26 	bl	8009e60 <_Bfree>
 8008a14:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008a18:	2200      	movs	r2, #0
 8008a1a:	601a      	str	r2, [r3, #0]
 8008a1c:	1e2b      	subs	r3, r5, #0
 8008a1e:	bfb9      	ittee	lt
 8008a20:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8008a24:	9303      	strlt	r3, [sp, #12]
 8008a26:	2300      	movge	r3, #0
 8008a28:	6033      	strge	r3, [r6, #0]
 8008a2a:	9f03      	ldr	r7, [sp, #12]
 8008a2c:	4b98      	ldr	r3, [pc, #608]	@ (8008c90 <_dtoa_r+0x2d0>)
 8008a2e:	bfbc      	itt	lt
 8008a30:	2201      	movlt	r2, #1
 8008a32:	6032      	strlt	r2, [r6, #0]
 8008a34:	43bb      	bics	r3, r7
 8008a36:	d112      	bne.n	8008a5e <_dtoa_r+0x9e>
 8008a38:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a3a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008a3e:	6013      	str	r3, [r2, #0]
 8008a40:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8008a44:	4323      	orrs	r3, r4
 8008a46:	f000 854d 	beq.w	80094e4 <_dtoa_r+0xb24>
 8008a4a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a4c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8008ca4 <_dtoa_r+0x2e4>
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	f000 854f 	beq.w	80094f4 <_dtoa_r+0xb34>
 8008a56:	f10a 0303 	add.w	r3, sl, #3
 8008a5a:	f000 bd49 	b.w	80094f0 <_dtoa_r+0xb30>
 8008a5e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008a62:	2200      	movs	r2, #0
 8008a64:	ec51 0b17 	vmov	r0, r1, d7
 8008a68:	2300      	movs	r3, #0
 8008a6a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8008a6e:	f7f8 f82b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a72:	4680      	mov	r8, r0
 8008a74:	b158      	cbz	r0, 8008a8e <_dtoa_r+0xce>
 8008a76:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008a78:	2301      	movs	r3, #1
 8008a7a:	6013      	str	r3, [r2, #0]
 8008a7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008a7e:	b113      	cbz	r3, 8008a86 <_dtoa_r+0xc6>
 8008a80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8008a82:	4b84      	ldr	r3, [pc, #528]	@ (8008c94 <_dtoa_r+0x2d4>)
 8008a84:	6013      	str	r3, [r2, #0]
 8008a86:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8008ca8 <_dtoa_r+0x2e8>
 8008a8a:	f000 bd33 	b.w	80094f4 <_dtoa_r+0xb34>
 8008a8e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008a92:	aa16      	add	r2, sp, #88	@ 0x58
 8008a94:	a917      	add	r1, sp, #92	@ 0x5c
 8008a96:	4658      	mov	r0, fp
 8008a98:	f001 fd86 	bl	800a5a8 <__d2b>
 8008a9c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008aa0:	4681      	mov	r9, r0
 8008aa2:	2e00      	cmp	r6, #0
 8008aa4:	d077      	beq.n	8008b96 <_dtoa_r+0x1d6>
 8008aa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aa8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8008aac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008ab0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ab4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008ab8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008abc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008ac0:	4619      	mov	r1, r3
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	4b74      	ldr	r3, [pc, #464]	@ (8008c98 <_dtoa_r+0x2d8>)
 8008ac6:	f7f7 fbdf 	bl	8000288 <__aeabi_dsub>
 8008aca:	a369      	add	r3, pc, #420	@ (adr r3, 8008c70 <_dtoa_r+0x2b0>)
 8008acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ad0:	f7f7 fd92 	bl	80005f8 <__aeabi_dmul>
 8008ad4:	a368      	add	r3, pc, #416	@ (adr r3, 8008c78 <_dtoa_r+0x2b8>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	f7f7 fbd7 	bl	800028c <__adddf3>
 8008ade:	4604      	mov	r4, r0
 8008ae0:	4630      	mov	r0, r6
 8008ae2:	460d      	mov	r5, r1
 8008ae4:	f7f7 fd1e 	bl	8000524 <__aeabi_i2d>
 8008ae8:	a365      	add	r3, pc, #404	@ (adr r3, 8008c80 <_dtoa_r+0x2c0>)
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f7f7 fd83 	bl	80005f8 <__aeabi_dmul>
 8008af2:	4602      	mov	r2, r0
 8008af4:	460b      	mov	r3, r1
 8008af6:	4620      	mov	r0, r4
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7f7 fbc7 	bl	800028c <__adddf3>
 8008afe:	4604      	mov	r4, r0
 8008b00:	460d      	mov	r5, r1
 8008b02:	f7f8 f829 	bl	8000b58 <__aeabi_d2iz>
 8008b06:	2200      	movs	r2, #0
 8008b08:	4607      	mov	r7, r0
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	4629      	mov	r1, r5
 8008b10:	f7f7 ffe4 	bl	8000adc <__aeabi_dcmplt>
 8008b14:	b140      	cbz	r0, 8008b28 <_dtoa_r+0x168>
 8008b16:	4638      	mov	r0, r7
 8008b18:	f7f7 fd04 	bl	8000524 <__aeabi_i2d>
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	462b      	mov	r3, r5
 8008b20:	f7f7 ffd2 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b24:	b900      	cbnz	r0, 8008b28 <_dtoa_r+0x168>
 8008b26:	3f01      	subs	r7, #1
 8008b28:	2f16      	cmp	r7, #22
 8008b2a:	d851      	bhi.n	8008bd0 <_dtoa_r+0x210>
 8008b2c:	4b5b      	ldr	r3, [pc, #364]	@ (8008c9c <_dtoa_r+0x2dc>)
 8008b2e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008b32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b36:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b3a:	f7f7 ffcf 	bl	8000adc <__aeabi_dcmplt>
 8008b3e:	2800      	cmp	r0, #0
 8008b40:	d048      	beq.n	8008bd4 <_dtoa_r+0x214>
 8008b42:	3f01      	subs	r7, #1
 8008b44:	2300      	movs	r3, #0
 8008b46:	9312      	str	r3, [sp, #72]	@ 0x48
 8008b48:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8008b4a:	1b9b      	subs	r3, r3, r6
 8008b4c:	1e5a      	subs	r2, r3, #1
 8008b4e:	bf44      	itt	mi
 8008b50:	f1c3 0801 	rsbmi	r8, r3, #1
 8008b54:	2300      	movmi	r3, #0
 8008b56:	9208      	str	r2, [sp, #32]
 8008b58:	bf54      	ite	pl
 8008b5a:	f04f 0800 	movpl.w	r8, #0
 8008b5e:	9308      	strmi	r3, [sp, #32]
 8008b60:	2f00      	cmp	r7, #0
 8008b62:	db39      	blt.n	8008bd8 <_dtoa_r+0x218>
 8008b64:	9b08      	ldr	r3, [sp, #32]
 8008b66:	970f      	str	r7, [sp, #60]	@ 0x3c
 8008b68:	443b      	add	r3, r7
 8008b6a:	9308      	str	r3, [sp, #32]
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008b70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b72:	2b09      	cmp	r3, #9
 8008b74:	d864      	bhi.n	8008c40 <_dtoa_r+0x280>
 8008b76:	2b05      	cmp	r3, #5
 8008b78:	bfc4      	itt	gt
 8008b7a:	3b04      	subgt	r3, #4
 8008b7c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8008b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b80:	f1a3 0302 	sub.w	r3, r3, #2
 8008b84:	bfcc      	ite	gt
 8008b86:	2400      	movgt	r4, #0
 8008b88:	2401      	movle	r4, #1
 8008b8a:	2b03      	cmp	r3, #3
 8008b8c:	d863      	bhi.n	8008c56 <_dtoa_r+0x296>
 8008b8e:	e8df f003 	tbb	[pc, r3]
 8008b92:	372a      	.short	0x372a
 8008b94:	5535      	.short	0x5535
 8008b96:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8008b9a:	441e      	add	r6, r3
 8008b9c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008ba0:	2b20      	cmp	r3, #32
 8008ba2:	bfc1      	itttt	gt
 8008ba4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008ba8:	409f      	lslgt	r7, r3
 8008baa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008bae:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008bb2:	bfd6      	itet	le
 8008bb4:	f1c3 0320 	rsble	r3, r3, #32
 8008bb8:	ea47 0003 	orrgt.w	r0, r7, r3
 8008bbc:	fa04 f003 	lslle.w	r0, r4, r3
 8008bc0:	f7f7 fca0 	bl	8000504 <__aeabi_ui2d>
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008bca:	3e01      	subs	r6, #1
 8008bcc:	9214      	str	r2, [sp, #80]	@ 0x50
 8008bce:	e777      	b.n	8008ac0 <_dtoa_r+0x100>
 8008bd0:	2301      	movs	r3, #1
 8008bd2:	e7b8      	b.n	8008b46 <_dtoa_r+0x186>
 8008bd4:	9012      	str	r0, [sp, #72]	@ 0x48
 8008bd6:	e7b7      	b.n	8008b48 <_dtoa_r+0x188>
 8008bd8:	427b      	negs	r3, r7
 8008bda:	930a      	str	r3, [sp, #40]	@ 0x28
 8008bdc:	2300      	movs	r3, #0
 8008bde:	eba8 0807 	sub.w	r8, r8, r7
 8008be2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008be4:	e7c4      	b.n	8008b70 <_dtoa_r+0x1b0>
 8008be6:	2300      	movs	r3, #0
 8008be8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008bea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	dc35      	bgt.n	8008c5c <_dtoa_r+0x29c>
 8008bf0:	2301      	movs	r3, #1
 8008bf2:	9300      	str	r3, [sp, #0]
 8008bf4:	9307      	str	r3, [sp, #28]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	920e      	str	r2, [sp, #56]	@ 0x38
 8008bfa:	e00b      	b.n	8008c14 <_dtoa_r+0x254>
 8008bfc:	2301      	movs	r3, #1
 8008bfe:	e7f3      	b.n	8008be8 <_dtoa_r+0x228>
 8008c00:	2300      	movs	r3, #0
 8008c02:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c06:	18fb      	adds	r3, r7, r3
 8008c08:	9300      	str	r3, [sp, #0]
 8008c0a:	3301      	adds	r3, #1
 8008c0c:	2b01      	cmp	r3, #1
 8008c0e:	9307      	str	r3, [sp, #28]
 8008c10:	bfb8      	it	lt
 8008c12:	2301      	movlt	r3, #1
 8008c14:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008c18:	2100      	movs	r1, #0
 8008c1a:	2204      	movs	r2, #4
 8008c1c:	f102 0514 	add.w	r5, r2, #20
 8008c20:	429d      	cmp	r5, r3
 8008c22:	d91f      	bls.n	8008c64 <_dtoa_r+0x2a4>
 8008c24:	6041      	str	r1, [r0, #4]
 8008c26:	4658      	mov	r0, fp
 8008c28:	f001 f8da 	bl	8009de0 <_Balloc>
 8008c2c:	4682      	mov	sl, r0
 8008c2e:	2800      	cmp	r0, #0
 8008c30:	d13c      	bne.n	8008cac <_dtoa_r+0x2ec>
 8008c32:	4b1b      	ldr	r3, [pc, #108]	@ (8008ca0 <_dtoa_r+0x2e0>)
 8008c34:	4602      	mov	r2, r0
 8008c36:	f240 11af 	movw	r1, #431	@ 0x1af
 8008c3a:	e6d8      	b.n	80089ee <_dtoa_r+0x2e>
 8008c3c:	2301      	movs	r3, #1
 8008c3e:	e7e0      	b.n	8008c02 <_dtoa_r+0x242>
 8008c40:	2401      	movs	r4, #1
 8008c42:	2300      	movs	r3, #0
 8008c44:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c46:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008c48:	f04f 33ff 	mov.w	r3, #4294967295
 8008c4c:	9300      	str	r3, [sp, #0]
 8008c4e:	9307      	str	r3, [sp, #28]
 8008c50:	2200      	movs	r2, #0
 8008c52:	2312      	movs	r3, #18
 8008c54:	e7d0      	b.n	8008bf8 <_dtoa_r+0x238>
 8008c56:	2301      	movs	r3, #1
 8008c58:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c5a:	e7f5      	b.n	8008c48 <_dtoa_r+0x288>
 8008c5c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	9307      	str	r3, [sp, #28]
 8008c62:	e7d7      	b.n	8008c14 <_dtoa_r+0x254>
 8008c64:	3101      	adds	r1, #1
 8008c66:	0052      	lsls	r2, r2, #1
 8008c68:	e7d8      	b.n	8008c1c <_dtoa_r+0x25c>
 8008c6a:	bf00      	nop
 8008c6c:	f3af 8000 	nop.w
 8008c70:	636f4361 	.word	0x636f4361
 8008c74:	3fd287a7 	.word	0x3fd287a7
 8008c78:	8b60c8b3 	.word	0x8b60c8b3
 8008c7c:	3fc68a28 	.word	0x3fc68a28
 8008c80:	509f79fb 	.word	0x509f79fb
 8008c84:	3fd34413 	.word	0x3fd34413
 8008c88:	0800b7ce 	.word	0x0800b7ce
 8008c8c:	0800b7e5 	.word	0x0800b7e5
 8008c90:	7ff00000 	.word	0x7ff00000
 8008c94:	0800b791 	.word	0x0800b791
 8008c98:	3ff80000 	.word	0x3ff80000
 8008c9c:	0800b940 	.word	0x0800b940
 8008ca0:	0800b83d 	.word	0x0800b83d
 8008ca4:	0800b7ca 	.word	0x0800b7ca
 8008ca8:	0800b790 	.word	0x0800b790
 8008cac:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008cb0:	6018      	str	r0, [r3, #0]
 8008cb2:	9b07      	ldr	r3, [sp, #28]
 8008cb4:	2b0e      	cmp	r3, #14
 8008cb6:	f200 80a4 	bhi.w	8008e02 <_dtoa_r+0x442>
 8008cba:	2c00      	cmp	r4, #0
 8008cbc:	f000 80a1 	beq.w	8008e02 <_dtoa_r+0x442>
 8008cc0:	2f00      	cmp	r7, #0
 8008cc2:	dd33      	ble.n	8008d2c <_dtoa_r+0x36c>
 8008cc4:	4bad      	ldr	r3, [pc, #692]	@ (8008f7c <_dtoa_r+0x5bc>)
 8008cc6:	f007 020f 	and.w	r2, r7, #15
 8008cca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cce:	ed93 7b00 	vldr	d7, [r3]
 8008cd2:	05f8      	lsls	r0, r7, #23
 8008cd4:	ed8d 7b04 	vstr	d7, [sp, #16]
 8008cd8:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008cdc:	d516      	bpl.n	8008d0c <_dtoa_r+0x34c>
 8008cde:	4ba8      	ldr	r3, [pc, #672]	@ (8008f80 <_dtoa_r+0x5c0>)
 8008ce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008ce4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008ce8:	f7f7 fdb0 	bl	800084c <__aeabi_ddiv>
 8008cec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cf0:	f004 040f 	and.w	r4, r4, #15
 8008cf4:	2603      	movs	r6, #3
 8008cf6:	4da2      	ldr	r5, [pc, #648]	@ (8008f80 <_dtoa_r+0x5c0>)
 8008cf8:	b954      	cbnz	r4, 8008d10 <_dtoa_r+0x350>
 8008cfa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d02:	f7f7 fda3 	bl	800084c <__aeabi_ddiv>
 8008d06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d0a:	e028      	b.n	8008d5e <_dtoa_r+0x39e>
 8008d0c:	2602      	movs	r6, #2
 8008d0e:	e7f2      	b.n	8008cf6 <_dtoa_r+0x336>
 8008d10:	07e1      	lsls	r1, r4, #31
 8008d12:	d508      	bpl.n	8008d26 <_dtoa_r+0x366>
 8008d14:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008d18:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d1c:	f7f7 fc6c 	bl	80005f8 <__aeabi_dmul>
 8008d20:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008d24:	3601      	adds	r6, #1
 8008d26:	1064      	asrs	r4, r4, #1
 8008d28:	3508      	adds	r5, #8
 8008d2a:	e7e5      	b.n	8008cf8 <_dtoa_r+0x338>
 8008d2c:	f000 80d2 	beq.w	8008ed4 <_dtoa_r+0x514>
 8008d30:	427c      	negs	r4, r7
 8008d32:	4b92      	ldr	r3, [pc, #584]	@ (8008f7c <_dtoa_r+0x5bc>)
 8008d34:	4d92      	ldr	r5, [pc, #584]	@ (8008f80 <_dtoa_r+0x5c0>)
 8008d36:	f004 020f 	and.w	r2, r4, #15
 8008d3a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d42:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008d46:	f7f7 fc57 	bl	80005f8 <__aeabi_dmul>
 8008d4a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d4e:	1124      	asrs	r4, r4, #4
 8008d50:	2300      	movs	r3, #0
 8008d52:	2602      	movs	r6, #2
 8008d54:	2c00      	cmp	r4, #0
 8008d56:	f040 80b2 	bne.w	8008ebe <_dtoa_r+0x4fe>
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1d3      	bne.n	8008d06 <_dtoa_r+0x346>
 8008d5e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008d60:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	f000 80b7 	beq.w	8008ed8 <_dtoa_r+0x518>
 8008d6a:	4b86      	ldr	r3, [pc, #536]	@ (8008f84 <_dtoa_r+0x5c4>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	4620      	mov	r0, r4
 8008d70:	4629      	mov	r1, r5
 8008d72:	f7f7 feb3 	bl	8000adc <__aeabi_dcmplt>
 8008d76:	2800      	cmp	r0, #0
 8008d78:	f000 80ae 	beq.w	8008ed8 <_dtoa_r+0x518>
 8008d7c:	9b07      	ldr	r3, [sp, #28]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	f000 80aa 	beq.w	8008ed8 <_dtoa_r+0x518>
 8008d84:	9b00      	ldr	r3, [sp, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	dd37      	ble.n	8008dfa <_dtoa_r+0x43a>
 8008d8a:	1e7b      	subs	r3, r7, #1
 8008d8c:	9304      	str	r3, [sp, #16]
 8008d8e:	4620      	mov	r0, r4
 8008d90:	4b7d      	ldr	r3, [pc, #500]	@ (8008f88 <_dtoa_r+0x5c8>)
 8008d92:	2200      	movs	r2, #0
 8008d94:	4629      	mov	r1, r5
 8008d96:	f7f7 fc2f 	bl	80005f8 <__aeabi_dmul>
 8008d9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008d9e:	9c00      	ldr	r4, [sp, #0]
 8008da0:	3601      	adds	r6, #1
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7f7 fbbe 	bl	8000524 <__aeabi_i2d>
 8008da8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dac:	f7f7 fc24 	bl	80005f8 <__aeabi_dmul>
 8008db0:	4b76      	ldr	r3, [pc, #472]	@ (8008f8c <_dtoa_r+0x5cc>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	f7f7 fa6a 	bl	800028c <__adddf3>
 8008db8:	4605      	mov	r5, r0
 8008dba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008dbe:	2c00      	cmp	r4, #0
 8008dc0:	f040 808d 	bne.w	8008ede <_dtoa_r+0x51e>
 8008dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dc8:	4b71      	ldr	r3, [pc, #452]	@ (8008f90 <_dtoa_r+0x5d0>)
 8008dca:	2200      	movs	r2, #0
 8008dcc:	f7f7 fa5c 	bl	8000288 <__aeabi_dsub>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	460b      	mov	r3, r1
 8008dd4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dd8:	462a      	mov	r2, r5
 8008dda:	4633      	mov	r3, r6
 8008ddc:	f7f7 fe9c 	bl	8000b18 <__aeabi_dcmpgt>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f040 828b 	bne.w	80092fc <_dtoa_r+0x93c>
 8008de6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dea:	462a      	mov	r2, r5
 8008dec:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008df0:	f7f7 fe74 	bl	8000adc <__aeabi_dcmplt>
 8008df4:	2800      	cmp	r0, #0
 8008df6:	f040 8128 	bne.w	800904a <_dtoa_r+0x68a>
 8008dfa:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008dfe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008e02:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	f2c0 815a 	blt.w	80090be <_dtoa_r+0x6fe>
 8008e0a:	2f0e      	cmp	r7, #14
 8008e0c:	f300 8157 	bgt.w	80090be <_dtoa_r+0x6fe>
 8008e10:	4b5a      	ldr	r3, [pc, #360]	@ (8008f7c <_dtoa_r+0x5bc>)
 8008e12:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008e16:	ed93 7b00 	vldr	d7, [r3]
 8008e1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	ed8d 7b00 	vstr	d7, [sp]
 8008e22:	da03      	bge.n	8008e2c <_dtoa_r+0x46c>
 8008e24:	9b07      	ldr	r3, [sp, #28]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f340 8101 	ble.w	800902e <_dtoa_r+0x66e>
 8008e2c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008e30:	4656      	mov	r6, sl
 8008e32:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e36:	4620      	mov	r0, r4
 8008e38:	4629      	mov	r1, r5
 8008e3a:	f7f7 fd07 	bl	800084c <__aeabi_ddiv>
 8008e3e:	f7f7 fe8b 	bl	8000b58 <__aeabi_d2iz>
 8008e42:	4680      	mov	r8, r0
 8008e44:	f7f7 fb6e 	bl	8000524 <__aeabi_i2d>
 8008e48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e4c:	f7f7 fbd4 	bl	80005f8 <__aeabi_dmul>
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	4620      	mov	r0, r4
 8008e56:	4629      	mov	r1, r5
 8008e58:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008e5c:	f7f7 fa14 	bl	8000288 <__aeabi_dsub>
 8008e60:	f806 4b01 	strb.w	r4, [r6], #1
 8008e64:	9d07      	ldr	r5, [sp, #28]
 8008e66:	eba6 040a 	sub.w	r4, r6, sl
 8008e6a:	42a5      	cmp	r5, r4
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	f040 8117 	bne.w	80090a2 <_dtoa_r+0x6e2>
 8008e74:	f7f7 fa0a 	bl	800028c <__adddf3>
 8008e78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e7c:	4604      	mov	r4, r0
 8008e7e:	460d      	mov	r5, r1
 8008e80:	f7f7 fe4a 	bl	8000b18 <__aeabi_dcmpgt>
 8008e84:	2800      	cmp	r0, #0
 8008e86:	f040 80f9 	bne.w	800907c <_dtoa_r+0x6bc>
 8008e8a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008e8e:	4620      	mov	r0, r4
 8008e90:	4629      	mov	r1, r5
 8008e92:	f7f7 fe19 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e96:	b118      	cbz	r0, 8008ea0 <_dtoa_r+0x4e0>
 8008e98:	f018 0f01 	tst.w	r8, #1
 8008e9c:	f040 80ee 	bne.w	800907c <_dtoa_r+0x6bc>
 8008ea0:	4649      	mov	r1, r9
 8008ea2:	4658      	mov	r0, fp
 8008ea4:	f000 ffdc 	bl	8009e60 <_Bfree>
 8008ea8:	2300      	movs	r3, #0
 8008eaa:	7033      	strb	r3, [r6, #0]
 8008eac:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8008eae:	3701      	adds	r7, #1
 8008eb0:	601f      	str	r7, [r3, #0]
 8008eb2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	f000 831d 	beq.w	80094f4 <_dtoa_r+0xb34>
 8008eba:	601e      	str	r6, [r3, #0]
 8008ebc:	e31a      	b.n	80094f4 <_dtoa_r+0xb34>
 8008ebe:	07e2      	lsls	r2, r4, #31
 8008ec0:	d505      	bpl.n	8008ece <_dtoa_r+0x50e>
 8008ec2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008ec6:	f7f7 fb97 	bl	80005f8 <__aeabi_dmul>
 8008eca:	3601      	adds	r6, #1
 8008ecc:	2301      	movs	r3, #1
 8008ece:	1064      	asrs	r4, r4, #1
 8008ed0:	3508      	adds	r5, #8
 8008ed2:	e73f      	b.n	8008d54 <_dtoa_r+0x394>
 8008ed4:	2602      	movs	r6, #2
 8008ed6:	e742      	b.n	8008d5e <_dtoa_r+0x39e>
 8008ed8:	9c07      	ldr	r4, [sp, #28]
 8008eda:	9704      	str	r7, [sp, #16]
 8008edc:	e761      	b.n	8008da2 <_dtoa_r+0x3e2>
 8008ede:	4b27      	ldr	r3, [pc, #156]	@ (8008f7c <_dtoa_r+0x5bc>)
 8008ee0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008ee2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008ee6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008eea:	4454      	add	r4, sl
 8008eec:	2900      	cmp	r1, #0
 8008eee:	d053      	beq.n	8008f98 <_dtoa_r+0x5d8>
 8008ef0:	4928      	ldr	r1, [pc, #160]	@ (8008f94 <_dtoa_r+0x5d4>)
 8008ef2:	2000      	movs	r0, #0
 8008ef4:	f7f7 fcaa 	bl	800084c <__aeabi_ddiv>
 8008ef8:	4633      	mov	r3, r6
 8008efa:	462a      	mov	r2, r5
 8008efc:	f7f7 f9c4 	bl	8000288 <__aeabi_dsub>
 8008f00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f04:	4656      	mov	r6, sl
 8008f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f0a:	f7f7 fe25 	bl	8000b58 <__aeabi_d2iz>
 8008f0e:	4605      	mov	r5, r0
 8008f10:	f7f7 fb08 	bl	8000524 <__aeabi_i2d>
 8008f14:	4602      	mov	r2, r0
 8008f16:	460b      	mov	r3, r1
 8008f18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f1c:	f7f7 f9b4 	bl	8000288 <__aeabi_dsub>
 8008f20:	3530      	adds	r5, #48	@ 0x30
 8008f22:	4602      	mov	r2, r0
 8008f24:	460b      	mov	r3, r1
 8008f26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008f2a:	f806 5b01 	strb.w	r5, [r6], #1
 8008f2e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f32:	f7f7 fdd3 	bl	8000adc <__aeabi_dcmplt>
 8008f36:	2800      	cmp	r0, #0
 8008f38:	d171      	bne.n	800901e <_dtoa_r+0x65e>
 8008f3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008f3e:	4911      	ldr	r1, [pc, #68]	@ (8008f84 <_dtoa_r+0x5c4>)
 8008f40:	2000      	movs	r0, #0
 8008f42:	f7f7 f9a1 	bl	8000288 <__aeabi_dsub>
 8008f46:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008f4a:	f7f7 fdc7 	bl	8000adc <__aeabi_dcmplt>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	f040 8095 	bne.w	800907e <_dtoa_r+0x6be>
 8008f54:	42a6      	cmp	r6, r4
 8008f56:	f43f af50 	beq.w	8008dfa <_dtoa_r+0x43a>
 8008f5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f88 <_dtoa_r+0x5c8>)
 8008f60:	2200      	movs	r2, #0
 8008f62:	f7f7 fb49 	bl	80005f8 <__aeabi_dmul>
 8008f66:	4b08      	ldr	r3, [pc, #32]	@ (8008f88 <_dtoa_r+0x5c8>)
 8008f68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008f6c:	2200      	movs	r2, #0
 8008f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f72:	f7f7 fb41 	bl	80005f8 <__aeabi_dmul>
 8008f76:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008f7a:	e7c4      	b.n	8008f06 <_dtoa_r+0x546>
 8008f7c:	0800b940 	.word	0x0800b940
 8008f80:	0800b918 	.word	0x0800b918
 8008f84:	3ff00000 	.word	0x3ff00000
 8008f88:	40240000 	.word	0x40240000
 8008f8c:	401c0000 	.word	0x401c0000
 8008f90:	40140000 	.word	0x40140000
 8008f94:	3fe00000 	.word	0x3fe00000
 8008f98:	4631      	mov	r1, r6
 8008f9a:	4628      	mov	r0, r5
 8008f9c:	f7f7 fb2c 	bl	80005f8 <__aeabi_dmul>
 8008fa0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008fa4:	9415      	str	r4, [sp, #84]	@ 0x54
 8008fa6:	4656      	mov	r6, sl
 8008fa8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fac:	f7f7 fdd4 	bl	8000b58 <__aeabi_d2iz>
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	f7f7 fab7 	bl	8000524 <__aeabi_i2d>
 8008fb6:	4602      	mov	r2, r0
 8008fb8:	460b      	mov	r3, r1
 8008fba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fbe:	f7f7 f963 	bl	8000288 <__aeabi_dsub>
 8008fc2:	3530      	adds	r5, #48	@ 0x30
 8008fc4:	f806 5b01 	strb.w	r5, [r6], #1
 8008fc8:	4602      	mov	r2, r0
 8008fca:	460b      	mov	r3, r1
 8008fcc:	42a6      	cmp	r6, r4
 8008fce:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008fd2:	f04f 0200 	mov.w	r2, #0
 8008fd6:	d124      	bne.n	8009022 <_dtoa_r+0x662>
 8008fd8:	4bac      	ldr	r3, [pc, #688]	@ (800928c <_dtoa_r+0x8cc>)
 8008fda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008fde:	f7f7 f955 	bl	800028c <__adddf3>
 8008fe2:	4602      	mov	r2, r0
 8008fe4:	460b      	mov	r3, r1
 8008fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fea:	f7f7 fd95 	bl	8000b18 <__aeabi_dcmpgt>
 8008fee:	2800      	cmp	r0, #0
 8008ff0:	d145      	bne.n	800907e <_dtoa_r+0x6be>
 8008ff2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ff6:	49a5      	ldr	r1, [pc, #660]	@ (800928c <_dtoa_r+0x8cc>)
 8008ff8:	2000      	movs	r0, #0
 8008ffa:	f7f7 f945 	bl	8000288 <__aeabi_dsub>
 8008ffe:	4602      	mov	r2, r0
 8009000:	460b      	mov	r3, r1
 8009002:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009006:	f7f7 fd69 	bl	8000adc <__aeabi_dcmplt>
 800900a:	2800      	cmp	r0, #0
 800900c:	f43f aef5 	beq.w	8008dfa <_dtoa_r+0x43a>
 8009010:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009012:	1e73      	subs	r3, r6, #1
 8009014:	9315      	str	r3, [sp, #84]	@ 0x54
 8009016:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800901a:	2b30      	cmp	r3, #48	@ 0x30
 800901c:	d0f8      	beq.n	8009010 <_dtoa_r+0x650>
 800901e:	9f04      	ldr	r7, [sp, #16]
 8009020:	e73e      	b.n	8008ea0 <_dtoa_r+0x4e0>
 8009022:	4b9b      	ldr	r3, [pc, #620]	@ (8009290 <_dtoa_r+0x8d0>)
 8009024:	f7f7 fae8 	bl	80005f8 <__aeabi_dmul>
 8009028:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800902c:	e7bc      	b.n	8008fa8 <_dtoa_r+0x5e8>
 800902e:	d10c      	bne.n	800904a <_dtoa_r+0x68a>
 8009030:	4b98      	ldr	r3, [pc, #608]	@ (8009294 <_dtoa_r+0x8d4>)
 8009032:	2200      	movs	r2, #0
 8009034:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009038:	f7f7 fade 	bl	80005f8 <__aeabi_dmul>
 800903c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009040:	f7f7 fd60 	bl	8000b04 <__aeabi_dcmpge>
 8009044:	2800      	cmp	r0, #0
 8009046:	f000 8157 	beq.w	80092f8 <_dtoa_r+0x938>
 800904a:	2400      	movs	r4, #0
 800904c:	4625      	mov	r5, r4
 800904e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009050:	43db      	mvns	r3, r3
 8009052:	9304      	str	r3, [sp, #16]
 8009054:	4656      	mov	r6, sl
 8009056:	2700      	movs	r7, #0
 8009058:	4621      	mov	r1, r4
 800905a:	4658      	mov	r0, fp
 800905c:	f000 ff00 	bl	8009e60 <_Bfree>
 8009060:	2d00      	cmp	r5, #0
 8009062:	d0dc      	beq.n	800901e <_dtoa_r+0x65e>
 8009064:	b12f      	cbz	r7, 8009072 <_dtoa_r+0x6b2>
 8009066:	42af      	cmp	r7, r5
 8009068:	d003      	beq.n	8009072 <_dtoa_r+0x6b2>
 800906a:	4639      	mov	r1, r7
 800906c:	4658      	mov	r0, fp
 800906e:	f000 fef7 	bl	8009e60 <_Bfree>
 8009072:	4629      	mov	r1, r5
 8009074:	4658      	mov	r0, fp
 8009076:	f000 fef3 	bl	8009e60 <_Bfree>
 800907a:	e7d0      	b.n	800901e <_dtoa_r+0x65e>
 800907c:	9704      	str	r7, [sp, #16]
 800907e:	4633      	mov	r3, r6
 8009080:	461e      	mov	r6, r3
 8009082:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009086:	2a39      	cmp	r2, #57	@ 0x39
 8009088:	d107      	bne.n	800909a <_dtoa_r+0x6da>
 800908a:	459a      	cmp	sl, r3
 800908c:	d1f8      	bne.n	8009080 <_dtoa_r+0x6c0>
 800908e:	9a04      	ldr	r2, [sp, #16]
 8009090:	3201      	adds	r2, #1
 8009092:	9204      	str	r2, [sp, #16]
 8009094:	2230      	movs	r2, #48	@ 0x30
 8009096:	f88a 2000 	strb.w	r2, [sl]
 800909a:	781a      	ldrb	r2, [r3, #0]
 800909c:	3201      	adds	r2, #1
 800909e:	701a      	strb	r2, [r3, #0]
 80090a0:	e7bd      	b.n	800901e <_dtoa_r+0x65e>
 80090a2:	4b7b      	ldr	r3, [pc, #492]	@ (8009290 <_dtoa_r+0x8d0>)
 80090a4:	2200      	movs	r2, #0
 80090a6:	f7f7 faa7 	bl	80005f8 <__aeabi_dmul>
 80090aa:	2200      	movs	r2, #0
 80090ac:	2300      	movs	r3, #0
 80090ae:	4604      	mov	r4, r0
 80090b0:	460d      	mov	r5, r1
 80090b2:	f7f7 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 80090b6:	2800      	cmp	r0, #0
 80090b8:	f43f aebb 	beq.w	8008e32 <_dtoa_r+0x472>
 80090bc:	e6f0      	b.n	8008ea0 <_dtoa_r+0x4e0>
 80090be:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80090c0:	2a00      	cmp	r2, #0
 80090c2:	f000 80db 	beq.w	800927c <_dtoa_r+0x8bc>
 80090c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80090c8:	2a01      	cmp	r2, #1
 80090ca:	f300 80bf 	bgt.w	800924c <_dtoa_r+0x88c>
 80090ce:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80090d0:	2a00      	cmp	r2, #0
 80090d2:	f000 80b7 	beq.w	8009244 <_dtoa_r+0x884>
 80090d6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80090da:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80090dc:	4646      	mov	r6, r8
 80090de:	9a08      	ldr	r2, [sp, #32]
 80090e0:	2101      	movs	r1, #1
 80090e2:	441a      	add	r2, r3
 80090e4:	4658      	mov	r0, fp
 80090e6:	4498      	add	r8, r3
 80090e8:	9208      	str	r2, [sp, #32]
 80090ea:	f000 ffb7 	bl	800a05c <__i2b>
 80090ee:	4605      	mov	r5, r0
 80090f0:	b15e      	cbz	r6, 800910a <_dtoa_r+0x74a>
 80090f2:	9b08      	ldr	r3, [sp, #32]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	dd08      	ble.n	800910a <_dtoa_r+0x74a>
 80090f8:	42b3      	cmp	r3, r6
 80090fa:	9a08      	ldr	r2, [sp, #32]
 80090fc:	bfa8      	it	ge
 80090fe:	4633      	movge	r3, r6
 8009100:	eba8 0803 	sub.w	r8, r8, r3
 8009104:	1af6      	subs	r6, r6, r3
 8009106:	1ad3      	subs	r3, r2, r3
 8009108:	9308      	str	r3, [sp, #32]
 800910a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800910c:	b1f3      	cbz	r3, 800914c <_dtoa_r+0x78c>
 800910e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009110:	2b00      	cmp	r3, #0
 8009112:	f000 80b7 	beq.w	8009284 <_dtoa_r+0x8c4>
 8009116:	b18c      	cbz	r4, 800913c <_dtoa_r+0x77c>
 8009118:	4629      	mov	r1, r5
 800911a:	4622      	mov	r2, r4
 800911c:	4658      	mov	r0, fp
 800911e:	f001 f85d 	bl	800a1dc <__pow5mult>
 8009122:	464a      	mov	r2, r9
 8009124:	4601      	mov	r1, r0
 8009126:	4605      	mov	r5, r0
 8009128:	4658      	mov	r0, fp
 800912a:	f000 ffad 	bl	800a088 <__multiply>
 800912e:	4649      	mov	r1, r9
 8009130:	9004      	str	r0, [sp, #16]
 8009132:	4658      	mov	r0, fp
 8009134:	f000 fe94 	bl	8009e60 <_Bfree>
 8009138:	9b04      	ldr	r3, [sp, #16]
 800913a:	4699      	mov	r9, r3
 800913c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800913e:	1b1a      	subs	r2, r3, r4
 8009140:	d004      	beq.n	800914c <_dtoa_r+0x78c>
 8009142:	4649      	mov	r1, r9
 8009144:	4658      	mov	r0, fp
 8009146:	f001 f849 	bl	800a1dc <__pow5mult>
 800914a:	4681      	mov	r9, r0
 800914c:	2101      	movs	r1, #1
 800914e:	4658      	mov	r0, fp
 8009150:	f000 ff84 	bl	800a05c <__i2b>
 8009154:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009156:	4604      	mov	r4, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	f000 81cf 	beq.w	80094fc <_dtoa_r+0xb3c>
 800915e:	461a      	mov	r2, r3
 8009160:	4601      	mov	r1, r0
 8009162:	4658      	mov	r0, fp
 8009164:	f001 f83a 	bl	800a1dc <__pow5mult>
 8009168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916a:	2b01      	cmp	r3, #1
 800916c:	4604      	mov	r4, r0
 800916e:	f300 8095 	bgt.w	800929c <_dtoa_r+0x8dc>
 8009172:	9b02      	ldr	r3, [sp, #8]
 8009174:	2b00      	cmp	r3, #0
 8009176:	f040 8087 	bne.w	8009288 <_dtoa_r+0x8c8>
 800917a:	9b03      	ldr	r3, [sp, #12]
 800917c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009180:	2b00      	cmp	r3, #0
 8009182:	f040 8089 	bne.w	8009298 <_dtoa_r+0x8d8>
 8009186:	9b03      	ldr	r3, [sp, #12]
 8009188:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800918c:	0d1b      	lsrs	r3, r3, #20
 800918e:	051b      	lsls	r3, r3, #20
 8009190:	b12b      	cbz	r3, 800919e <_dtoa_r+0x7de>
 8009192:	9b08      	ldr	r3, [sp, #32]
 8009194:	3301      	adds	r3, #1
 8009196:	9308      	str	r3, [sp, #32]
 8009198:	f108 0801 	add.w	r8, r8, #1
 800919c:	2301      	movs	r3, #1
 800919e:	930a      	str	r3, [sp, #40]	@ 0x28
 80091a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	f000 81b0 	beq.w	8009508 <_dtoa_r+0xb48>
 80091a8:	6923      	ldr	r3, [r4, #16]
 80091aa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80091ae:	6918      	ldr	r0, [r3, #16]
 80091b0:	f000 ff08 	bl	8009fc4 <__hi0bits>
 80091b4:	f1c0 0020 	rsb	r0, r0, #32
 80091b8:	9b08      	ldr	r3, [sp, #32]
 80091ba:	4418      	add	r0, r3
 80091bc:	f010 001f 	ands.w	r0, r0, #31
 80091c0:	d077      	beq.n	80092b2 <_dtoa_r+0x8f2>
 80091c2:	f1c0 0320 	rsb	r3, r0, #32
 80091c6:	2b04      	cmp	r3, #4
 80091c8:	dd6b      	ble.n	80092a2 <_dtoa_r+0x8e2>
 80091ca:	9b08      	ldr	r3, [sp, #32]
 80091cc:	f1c0 001c 	rsb	r0, r0, #28
 80091d0:	4403      	add	r3, r0
 80091d2:	4480      	add	r8, r0
 80091d4:	4406      	add	r6, r0
 80091d6:	9308      	str	r3, [sp, #32]
 80091d8:	f1b8 0f00 	cmp.w	r8, #0
 80091dc:	dd05      	ble.n	80091ea <_dtoa_r+0x82a>
 80091de:	4649      	mov	r1, r9
 80091e0:	4642      	mov	r2, r8
 80091e2:	4658      	mov	r0, fp
 80091e4:	f001 f854 	bl	800a290 <__lshift>
 80091e8:	4681      	mov	r9, r0
 80091ea:	9b08      	ldr	r3, [sp, #32]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	dd05      	ble.n	80091fc <_dtoa_r+0x83c>
 80091f0:	4621      	mov	r1, r4
 80091f2:	461a      	mov	r2, r3
 80091f4:	4658      	mov	r0, fp
 80091f6:	f001 f84b 	bl	800a290 <__lshift>
 80091fa:	4604      	mov	r4, r0
 80091fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d059      	beq.n	80092b6 <_dtoa_r+0x8f6>
 8009202:	4621      	mov	r1, r4
 8009204:	4648      	mov	r0, r9
 8009206:	f001 f8af 	bl	800a368 <__mcmp>
 800920a:	2800      	cmp	r0, #0
 800920c:	da53      	bge.n	80092b6 <_dtoa_r+0x8f6>
 800920e:	1e7b      	subs	r3, r7, #1
 8009210:	9304      	str	r3, [sp, #16]
 8009212:	4649      	mov	r1, r9
 8009214:	2300      	movs	r3, #0
 8009216:	220a      	movs	r2, #10
 8009218:	4658      	mov	r0, fp
 800921a:	f000 fe43 	bl	8009ea4 <__multadd>
 800921e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009220:	4681      	mov	r9, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	f000 8172 	beq.w	800950c <_dtoa_r+0xb4c>
 8009228:	2300      	movs	r3, #0
 800922a:	4629      	mov	r1, r5
 800922c:	220a      	movs	r2, #10
 800922e:	4658      	mov	r0, fp
 8009230:	f000 fe38 	bl	8009ea4 <__multadd>
 8009234:	9b00      	ldr	r3, [sp, #0]
 8009236:	2b00      	cmp	r3, #0
 8009238:	4605      	mov	r5, r0
 800923a:	dc67      	bgt.n	800930c <_dtoa_r+0x94c>
 800923c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800923e:	2b02      	cmp	r3, #2
 8009240:	dc41      	bgt.n	80092c6 <_dtoa_r+0x906>
 8009242:	e063      	b.n	800930c <_dtoa_r+0x94c>
 8009244:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009246:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800924a:	e746      	b.n	80090da <_dtoa_r+0x71a>
 800924c:	9b07      	ldr	r3, [sp, #28]
 800924e:	1e5c      	subs	r4, r3, #1
 8009250:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009252:	42a3      	cmp	r3, r4
 8009254:	bfbf      	itttt	lt
 8009256:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009258:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800925a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800925c:	1ae3      	sublt	r3, r4, r3
 800925e:	bfb4      	ite	lt
 8009260:	18d2      	addlt	r2, r2, r3
 8009262:	1b1c      	subge	r4, r3, r4
 8009264:	9b07      	ldr	r3, [sp, #28]
 8009266:	bfbc      	itt	lt
 8009268:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800926a:	2400      	movlt	r4, #0
 800926c:	2b00      	cmp	r3, #0
 800926e:	bfb5      	itete	lt
 8009270:	eba8 0603 	sublt.w	r6, r8, r3
 8009274:	9b07      	ldrge	r3, [sp, #28]
 8009276:	2300      	movlt	r3, #0
 8009278:	4646      	movge	r6, r8
 800927a:	e730      	b.n	80090de <_dtoa_r+0x71e>
 800927c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800927e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009280:	4646      	mov	r6, r8
 8009282:	e735      	b.n	80090f0 <_dtoa_r+0x730>
 8009284:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009286:	e75c      	b.n	8009142 <_dtoa_r+0x782>
 8009288:	2300      	movs	r3, #0
 800928a:	e788      	b.n	800919e <_dtoa_r+0x7de>
 800928c:	3fe00000 	.word	0x3fe00000
 8009290:	40240000 	.word	0x40240000
 8009294:	40140000 	.word	0x40140000
 8009298:	9b02      	ldr	r3, [sp, #8]
 800929a:	e780      	b.n	800919e <_dtoa_r+0x7de>
 800929c:	2300      	movs	r3, #0
 800929e:	930a      	str	r3, [sp, #40]	@ 0x28
 80092a0:	e782      	b.n	80091a8 <_dtoa_r+0x7e8>
 80092a2:	d099      	beq.n	80091d8 <_dtoa_r+0x818>
 80092a4:	9a08      	ldr	r2, [sp, #32]
 80092a6:	331c      	adds	r3, #28
 80092a8:	441a      	add	r2, r3
 80092aa:	4498      	add	r8, r3
 80092ac:	441e      	add	r6, r3
 80092ae:	9208      	str	r2, [sp, #32]
 80092b0:	e792      	b.n	80091d8 <_dtoa_r+0x818>
 80092b2:	4603      	mov	r3, r0
 80092b4:	e7f6      	b.n	80092a4 <_dtoa_r+0x8e4>
 80092b6:	9b07      	ldr	r3, [sp, #28]
 80092b8:	9704      	str	r7, [sp, #16]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	dc20      	bgt.n	8009300 <_dtoa_r+0x940>
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092c2:	2b02      	cmp	r3, #2
 80092c4:	dd1e      	ble.n	8009304 <_dtoa_r+0x944>
 80092c6:	9b00      	ldr	r3, [sp, #0]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f47f aec0 	bne.w	800904e <_dtoa_r+0x68e>
 80092ce:	4621      	mov	r1, r4
 80092d0:	2205      	movs	r2, #5
 80092d2:	4658      	mov	r0, fp
 80092d4:	f000 fde6 	bl	8009ea4 <__multadd>
 80092d8:	4601      	mov	r1, r0
 80092da:	4604      	mov	r4, r0
 80092dc:	4648      	mov	r0, r9
 80092de:	f001 f843 	bl	800a368 <__mcmp>
 80092e2:	2800      	cmp	r0, #0
 80092e4:	f77f aeb3 	ble.w	800904e <_dtoa_r+0x68e>
 80092e8:	4656      	mov	r6, sl
 80092ea:	2331      	movs	r3, #49	@ 0x31
 80092ec:	f806 3b01 	strb.w	r3, [r6], #1
 80092f0:	9b04      	ldr	r3, [sp, #16]
 80092f2:	3301      	adds	r3, #1
 80092f4:	9304      	str	r3, [sp, #16]
 80092f6:	e6ae      	b.n	8009056 <_dtoa_r+0x696>
 80092f8:	9c07      	ldr	r4, [sp, #28]
 80092fa:	9704      	str	r7, [sp, #16]
 80092fc:	4625      	mov	r5, r4
 80092fe:	e7f3      	b.n	80092e8 <_dtoa_r+0x928>
 8009300:	9b07      	ldr	r3, [sp, #28]
 8009302:	9300      	str	r3, [sp, #0]
 8009304:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009306:	2b00      	cmp	r3, #0
 8009308:	f000 8104 	beq.w	8009514 <_dtoa_r+0xb54>
 800930c:	2e00      	cmp	r6, #0
 800930e:	dd05      	ble.n	800931c <_dtoa_r+0x95c>
 8009310:	4629      	mov	r1, r5
 8009312:	4632      	mov	r2, r6
 8009314:	4658      	mov	r0, fp
 8009316:	f000 ffbb 	bl	800a290 <__lshift>
 800931a:	4605      	mov	r5, r0
 800931c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800931e:	2b00      	cmp	r3, #0
 8009320:	d05a      	beq.n	80093d8 <_dtoa_r+0xa18>
 8009322:	6869      	ldr	r1, [r5, #4]
 8009324:	4658      	mov	r0, fp
 8009326:	f000 fd5b 	bl	8009de0 <_Balloc>
 800932a:	4606      	mov	r6, r0
 800932c:	b928      	cbnz	r0, 800933a <_dtoa_r+0x97a>
 800932e:	4b84      	ldr	r3, [pc, #528]	@ (8009540 <_dtoa_r+0xb80>)
 8009330:	4602      	mov	r2, r0
 8009332:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009336:	f7ff bb5a 	b.w	80089ee <_dtoa_r+0x2e>
 800933a:	692a      	ldr	r2, [r5, #16]
 800933c:	3202      	adds	r2, #2
 800933e:	0092      	lsls	r2, r2, #2
 8009340:	f105 010c 	add.w	r1, r5, #12
 8009344:	300c      	adds	r0, #12
 8009346:	f7ff fa92 	bl	800886e <memcpy>
 800934a:	2201      	movs	r2, #1
 800934c:	4631      	mov	r1, r6
 800934e:	4658      	mov	r0, fp
 8009350:	f000 ff9e 	bl	800a290 <__lshift>
 8009354:	f10a 0301 	add.w	r3, sl, #1
 8009358:	9307      	str	r3, [sp, #28]
 800935a:	9b00      	ldr	r3, [sp, #0]
 800935c:	4453      	add	r3, sl
 800935e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009360:	9b02      	ldr	r3, [sp, #8]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	462f      	mov	r7, r5
 8009368:	930a      	str	r3, [sp, #40]	@ 0x28
 800936a:	4605      	mov	r5, r0
 800936c:	9b07      	ldr	r3, [sp, #28]
 800936e:	4621      	mov	r1, r4
 8009370:	3b01      	subs	r3, #1
 8009372:	4648      	mov	r0, r9
 8009374:	9300      	str	r3, [sp, #0]
 8009376:	f7ff fa99 	bl	80088ac <quorem>
 800937a:	4639      	mov	r1, r7
 800937c:	9002      	str	r0, [sp, #8]
 800937e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009382:	4648      	mov	r0, r9
 8009384:	f000 fff0 	bl	800a368 <__mcmp>
 8009388:	462a      	mov	r2, r5
 800938a:	9008      	str	r0, [sp, #32]
 800938c:	4621      	mov	r1, r4
 800938e:	4658      	mov	r0, fp
 8009390:	f001 f806 	bl	800a3a0 <__mdiff>
 8009394:	68c2      	ldr	r2, [r0, #12]
 8009396:	4606      	mov	r6, r0
 8009398:	bb02      	cbnz	r2, 80093dc <_dtoa_r+0xa1c>
 800939a:	4601      	mov	r1, r0
 800939c:	4648      	mov	r0, r9
 800939e:	f000 ffe3 	bl	800a368 <__mcmp>
 80093a2:	4602      	mov	r2, r0
 80093a4:	4631      	mov	r1, r6
 80093a6:	4658      	mov	r0, fp
 80093a8:	920e      	str	r2, [sp, #56]	@ 0x38
 80093aa:	f000 fd59 	bl	8009e60 <_Bfree>
 80093ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80093b2:	9e07      	ldr	r6, [sp, #28]
 80093b4:	ea43 0102 	orr.w	r1, r3, r2
 80093b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093ba:	4319      	orrs	r1, r3
 80093bc:	d110      	bne.n	80093e0 <_dtoa_r+0xa20>
 80093be:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80093c2:	d029      	beq.n	8009418 <_dtoa_r+0xa58>
 80093c4:	9b08      	ldr	r3, [sp, #32]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	dd02      	ble.n	80093d0 <_dtoa_r+0xa10>
 80093ca:	9b02      	ldr	r3, [sp, #8]
 80093cc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80093d0:	9b00      	ldr	r3, [sp, #0]
 80093d2:	f883 8000 	strb.w	r8, [r3]
 80093d6:	e63f      	b.n	8009058 <_dtoa_r+0x698>
 80093d8:	4628      	mov	r0, r5
 80093da:	e7bb      	b.n	8009354 <_dtoa_r+0x994>
 80093dc:	2201      	movs	r2, #1
 80093de:	e7e1      	b.n	80093a4 <_dtoa_r+0x9e4>
 80093e0:	9b08      	ldr	r3, [sp, #32]
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	db04      	blt.n	80093f0 <_dtoa_r+0xa30>
 80093e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80093e8:	430b      	orrs	r3, r1
 80093ea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80093ec:	430b      	orrs	r3, r1
 80093ee:	d120      	bne.n	8009432 <_dtoa_r+0xa72>
 80093f0:	2a00      	cmp	r2, #0
 80093f2:	dded      	ble.n	80093d0 <_dtoa_r+0xa10>
 80093f4:	4649      	mov	r1, r9
 80093f6:	2201      	movs	r2, #1
 80093f8:	4658      	mov	r0, fp
 80093fa:	f000 ff49 	bl	800a290 <__lshift>
 80093fe:	4621      	mov	r1, r4
 8009400:	4681      	mov	r9, r0
 8009402:	f000 ffb1 	bl	800a368 <__mcmp>
 8009406:	2800      	cmp	r0, #0
 8009408:	dc03      	bgt.n	8009412 <_dtoa_r+0xa52>
 800940a:	d1e1      	bne.n	80093d0 <_dtoa_r+0xa10>
 800940c:	f018 0f01 	tst.w	r8, #1
 8009410:	d0de      	beq.n	80093d0 <_dtoa_r+0xa10>
 8009412:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009416:	d1d8      	bne.n	80093ca <_dtoa_r+0xa0a>
 8009418:	9a00      	ldr	r2, [sp, #0]
 800941a:	2339      	movs	r3, #57	@ 0x39
 800941c:	7013      	strb	r3, [r2, #0]
 800941e:	4633      	mov	r3, r6
 8009420:	461e      	mov	r6, r3
 8009422:	3b01      	subs	r3, #1
 8009424:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009428:	2a39      	cmp	r2, #57	@ 0x39
 800942a:	d052      	beq.n	80094d2 <_dtoa_r+0xb12>
 800942c:	3201      	adds	r2, #1
 800942e:	701a      	strb	r2, [r3, #0]
 8009430:	e612      	b.n	8009058 <_dtoa_r+0x698>
 8009432:	2a00      	cmp	r2, #0
 8009434:	dd07      	ble.n	8009446 <_dtoa_r+0xa86>
 8009436:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800943a:	d0ed      	beq.n	8009418 <_dtoa_r+0xa58>
 800943c:	9a00      	ldr	r2, [sp, #0]
 800943e:	f108 0301 	add.w	r3, r8, #1
 8009442:	7013      	strb	r3, [r2, #0]
 8009444:	e608      	b.n	8009058 <_dtoa_r+0x698>
 8009446:	9b07      	ldr	r3, [sp, #28]
 8009448:	9a07      	ldr	r2, [sp, #28]
 800944a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800944e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009450:	4293      	cmp	r3, r2
 8009452:	d028      	beq.n	80094a6 <_dtoa_r+0xae6>
 8009454:	4649      	mov	r1, r9
 8009456:	2300      	movs	r3, #0
 8009458:	220a      	movs	r2, #10
 800945a:	4658      	mov	r0, fp
 800945c:	f000 fd22 	bl	8009ea4 <__multadd>
 8009460:	42af      	cmp	r7, r5
 8009462:	4681      	mov	r9, r0
 8009464:	f04f 0300 	mov.w	r3, #0
 8009468:	f04f 020a 	mov.w	r2, #10
 800946c:	4639      	mov	r1, r7
 800946e:	4658      	mov	r0, fp
 8009470:	d107      	bne.n	8009482 <_dtoa_r+0xac2>
 8009472:	f000 fd17 	bl	8009ea4 <__multadd>
 8009476:	4607      	mov	r7, r0
 8009478:	4605      	mov	r5, r0
 800947a:	9b07      	ldr	r3, [sp, #28]
 800947c:	3301      	adds	r3, #1
 800947e:	9307      	str	r3, [sp, #28]
 8009480:	e774      	b.n	800936c <_dtoa_r+0x9ac>
 8009482:	f000 fd0f 	bl	8009ea4 <__multadd>
 8009486:	4629      	mov	r1, r5
 8009488:	4607      	mov	r7, r0
 800948a:	2300      	movs	r3, #0
 800948c:	220a      	movs	r2, #10
 800948e:	4658      	mov	r0, fp
 8009490:	f000 fd08 	bl	8009ea4 <__multadd>
 8009494:	4605      	mov	r5, r0
 8009496:	e7f0      	b.n	800947a <_dtoa_r+0xaba>
 8009498:	9b00      	ldr	r3, [sp, #0]
 800949a:	2b00      	cmp	r3, #0
 800949c:	bfcc      	ite	gt
 800949e:	461e      	movgt	r6, r3
 80094a0:	2601      	movle	r6, #1
 80094a2:	4456      	add	r6, sl
 80094a4:	2700      	movs	r7, #0
 80094a6:	4649      	mov	r1, r9
 80094a8:	2201      	movs	r2, #1
 80094aa:	4658      	mov	r0, fp
 80094ac:	f000 fef0 	bl	800a290 <__lshift>
 80094b0:	4621      	mov	r1, r4
 80094b2:	4681      	mov	r9, r0
 80094b4:	f000 ff58 	bl	800a368 <__mcmp>
 80094b8:	2800      	cmp	r0, #0
 80094ba:	dcb0      	bgt.n	800941e <_dtoa_r+0xa5e>
 80094bc:	d102      	bne.n	80094c4 <_dtoa_r+0xb04>
 80094be:	f018 0f01 	tst.w	r8, #1
 80094c2:	d1ac      	bne.n	800941e <_dtoa_r+0xa5e>
 80094c4:	4633      	mov	r3, r6
 80094c6:	461e      	mov	r6, r3
 80094c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80094cc:	2a30      	cmp	r2, #48	@ 0x30
 80094ce:	d0fa      	beq.n	80094c6 <_dtoa_r+0xb06>
 80094d0:	e5c2      	b.n	8009058 <_dtoa_r+0x698>
 80094d2:	459a      	cmp	sl, r3
 80094d4:	d1a4      	bne.n	8009420 <_dtoa_r+0xa60>
 80094d6:	9b04      	ldr	r3, [sp, #16]
 80094d8:	3301      	adds	r3, #1
 80094da:	9304      	str	r3, [sp, #16]
 80094dc:	2331      	movs	r3, #49	@ 0x31
 80094de:	f88a 3000 	strb.w	r3, [sl]
 80094e2:	e5b9      	b.n	8009058 <_dtoa_r+0x698>
 80094e4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094e6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009544 <_dtoa_r+0xb84>
 80094ea:	b11b      	cbz	r3, 80094f4 <_dtoa_r+0xb34>
 80094ec:	f10a 0308 	add.w	r3, sl, #8
 80094f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80094f2:	6013      	str	r3, [r2, #0]
 80094f4:	4650      	mov	r0, sl
 80094f6:	b019      	add	sp, #100	@ 0x64
 80094f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094fe:	2b01      	cmp	r3, #1
 8009500:	f77f ae37 	ble.w	8009172 <_dtoa_r+0x7b2>
 8009504:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009506:	930a      	str	r3, [sp, #40]	@ 0x28
 8009508:	2001      	movs	r0, #1
 800950a:	e655      	b.n	80091b8 <_dtoa_r+0x7f8>
 800950c:	9b00      	ldr	r3, [sp, #0]
 800950e:	2b00      	cmp	r3, #0
 8009510:	f77f aed6 	ble.w	80092c0 <_dtoa_r+0x900>
 8009514:	4656      	mov	r6, sl
 8009516:	4621      	mov	r1, r4
 8009518:	4648      	mov	r0, r9
 800951a:	f7ff f9c7 	bl	80088ac <quorem>
 800951e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009522:	f806 8b01 	strb.w	r8, [r6], #1
 8009526:	9b00      	ldr	r3, [sp, #0]
 8009528:	eba6 020a 	sub.w	r2, r6, sl
 800952c:	4293      	cmp	r3, r2
 800952e:	ddb3      	ble.n	8009498 <_dtoa_r+0xad8>
 8009530:	4649      	mov	r1, r9
 8009532:	2300      	movs	r3, #0
 8009534:	220a      	movs	r2, #10
 8009536:	4658      	mov	r0, fp
 8009538:	f000 fcb4 	bl	8009ea4 <__multadd>
 800953c:	4681      	mov	r9, r0
 800953e:	e7ea      	b.n	8009516 <_dtoa_r+0xb56>
 8009540:	0800b83d 	.word	0x0800b83d
 8009544:	0800b7c1 	.word	0x0800b7c1

08009548 <_free_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4605      	mov	r5, r0
 800954c:	2900      	cmp	r1, #0
 800954e:	d041      	beq.n	80095d4 <_free_r+0x8c>
 8009550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009554:	1f0c      	subs	r4, r1, #4
 8009556:	2b00      	cmp	r3, #0
 8009558:	bfb8      	it	lt
 800955a:	18e4      	addlt	r4, r4, r3
 800955c:	f000 fc34 	bl	8009dc8 <__malloc_lock>
 8009560:	4a1d      	ldr	r2, [pc, #116]	@ (80095d8 <_free_r+0x90>)
 8009562:	6813      	ldr	r3, [r2, #0]
 8009564:	b933      	cbnz	r3, 8009574 <_free_r+0x2c>
 8009566:	6063      	str	r3, [r4, #4]
 8009568:	6014      	str	r4, [r2, #0]
 800956a:	4628      	mov	r0, r5
 800956c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009570:	f000 bc30 	b.w	8009dd4 <__malloc_unlock>
 8009574:	42a3      	cmp	r3, r4
 8009576:	d908      	bls.n	800958a <_free_r+0x42>
 8009578:	6820      	ldr	r0, [r4, #0]
 800957a:	1821      	adds	r1, r4, r0
 800957c:	428b      	cmp	r3, r1
 800957e:	bf01      	itttt	eq
 8009580:	6819      	ldreq	r1, [r3, #0]
 8009582:	685b      	ldreq	r3, [r3, #4]
 8009584:	1809      	addeq	r1, r1, r0
 8009586:	6021      	streq	r1, [r4, #0]
 8009588:	e7ed      	b.n	8009566 <_free_r+0x1e>
 800958a:	461a      	mov	r2, r3
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	b10b      	cbz	r3, 8009594 <_free_r+0x4c>
 8009590:	42a3      	cmp	r3, r4
 8009592:	d9fa      	bls.n	800958a <_free_r+0x42>
 8009594:	6811      	ldr	r1, [r2, #0]
 8009596:	1850      	adds	r0, r2, r1
 8009598:	42a0      	cmp	r0, r4
 800959a:	d10b      	bne.n	80095b4 <_free_r+0x6c>
 800959c:	6820      	ldr	r0, [r4, #0]
 800959e:	4401      	add	r1, r0
 80095a0:	1850      	adds	r0, r2, r1
 80095a2:	4283      	cmp	r3, r0
 80095a4:	6011      	str	r1, [r2, #0]
 80095a6:	d1e0      	bne.n	800956a <_free_r+0x22>
 80095a8:	6818      	ldr	r0, [r3, #0]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	6053      	str	r3, [r2, #4]
 80095ae:	4408      	add	r0, r1
 80095b0:	6010      	str	r0, [r2, #0]
 80095b2:	e7da      	b.n	800956a <_free_r+0x22>
 80095b4:	d902      	bls.n	80095bc <_free_r+0x74>
 80095b6:	230c      	movs	r3, #12
 80095b8:	602b      	str	r3, [r5, #0]
 80095ba:	e7d6      	b.n	800956a <_free_r+0x22>
 80095bc:	6820      	ldr	r0, [r4, #0]
 80095be:	1821      	adds	r1, r4, r0
 80095c0:	428b      	cmp	r3, r1
 80095c2:	bf04      	itt	eq
 80095c4:	6819      	ldreq	r1, [r3, #0]
 80095c6:	685b      	ldreq	r3, [r3, #4]
 80095c8:	6063      	str	r3, [r4, #4]
 80095ca:	bf04      	itt	eq
 80095cc:	1809      	addeq	r1, r1, r0
 80095ce:	6021      	streq	r1, [r4, #0]
 80095d0:	6054      	str	r4, [r2, #4]
 80095d2:	e7ca      	b.n	800956a <_free_r+0x22>
 80095d4:	bd38      	pop	{r3, r4, r5, pc}
 80095d6:	bf00      	nop
 80095d8:	20000770 	.word	0x20000770

080095dc <rshift>:
 80095dc:	6903      	ldr	r3, [r0, #16]
 80095de:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80095e2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80095e6:	ea4f 1261 	mov.w	r2, r1, asr #5
 80095ea:	f100 0414 	add.w	r4, r0, #20
 80095ee:	dd45      	ble.n	800967c <rshift+0xa0>
 80095f0:	f011 011f 	ands.w	r1, r1, #31
 80095f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80095f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80095fc:	d10c      	bne.n	8009618 <rshift+0x3c>
 80095fe:	f100 0710 	add.w	r7, r0, #16
 8009602:	4629      	mov	r1, r5
 8009604:	42b1      	cmp	r1, r6
 8009606:	d334      	bcc.n	8009672 <rshift+0x96>
 8009608:	1a9b      	subs	r3, r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	1eea      	subs	r2, r5, #3
 800960e:	4296      	cmp	r6, r2
 8009610:	bf38      	it	cc
 8009612:	2300      	movcc	r3, #0
 8009614:	4423      	add	r3, r4
 8009616:	e015      	b.n	8009644 <rshift+0x68>
 8009618:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800961c:	f1c1 0820 	rsb	r8, r1, #32
 8009620:	40cf      	lsrs	r7, r1
 8009622:	f105 0e04 	add.w	lr, r5, #4
 8009626:	46a1      	mov	r9, r4
 8009628:	4576      	cmp	r6, lr
 800962a:	46f4      	mov	ip, lr
 800962c:	d815      	bhi.n	800965a <rshift+0x7e>
 800962e:	1a9a      	subs	r2, r3, r2
 8009630:	0092      	lsls	r2, r2, #2
 8009632:	3a04      	subs	r2, #4
 8009634:	3501      	adds	r5, #1
 8009636:	42ae      	cmp	r6, r5
 8009638:	bf38      	it	cc
 800963a:	2200      	movcc	r2, #0
 800963c:	18a3      	adds	r3, r4, r2
 800963e:	50a7      	str	r7, [r4, r2]
 8009640:	b107      	cbz	r7, 8009644 <rshift+0x68>
 8009642:	3304      	adds	r3, #4
 8009644:	1b1a      	subs	r2, r3, r4
 8009646:	42a3      	cmp	r3, r4
 8009648:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800964c:	bf08      	it	eq
 800964e:	2300      	moveq	r3, #0
 8009650:	6102      	str	r2, [r0, #16]
 8009652:	bf08      	it	eq
 8009654:	6143      	streq	r3, [r0, #20]
 8009656:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800965a:	f8dc c000 	ldr.w	ip, [ip]
 800965e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009662:	ea4c 0707 	orr.w	r7, ip, r7
 8009666:	f849 7b04 	str.w	r7, [r9], #4
 800966a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800966e:	40cf      	lsrs	r7, r1
 8009670:	e7da      	b.n	8009628 <rshift+0x4c>
 8009672:	f851 cb04 	ldr.w	ip, [r1], #4
 8009676:	f847 cf04 	str.w	ip, [r7, #4]!
 800967a:	e7c3      	b.n	8009604 <rshift+0x28>
 800967c:	4623      	mov	r3, r4
 800967e:	e7e1      	b.n	8009644 <rshift+0x68>

08009680 <__hexdig_fun>:
 8009680:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009684:	2b09      	cmp	r3, #9
 8009686:	d802      	bhi.n	800968e <__hexdig_fun+0xe>
 8009688:	3820      	subs	r0, #32
 800968a:	b2c0      	uxtb	r0, r0
 800968c:	4770      	bx	lr
 800968e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009692:	2b05      	cmp	r3, #5
 8009694:	d801      	bhi.n	800969a <__hexdig_fun+0x1a>
 8009696:	3847      	subs	r0, #71	@ 0x47
 8009698:	e7f7      	b.n	800968a <__hexdig_fun+0xa>
 800969a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800969e:	2b05      	cmp	r3, #5
 80096a0:	d801      	bhi.n	80096a6 <__hexdig_fun+0x26>
 80096a2:	3827      	subs	r0, #39	@ 0x27
 80096a4:	e7f1      	b.n	800968a <__hexdig_fun+0xa>
 80096a6:	2000      	movs	r0, #0
 80096a8:	4770      	bx	lr
	...

080096ac <__gethex>:
 80096ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b0:	b085      	sub	sp, #20
 80096b2:	468a      	mov	sl, r1
 80096b4:	9302      	str	r3, [sp, #8]
 80096b6:	680b      	ldr	r3, [r1, #0]
 80096b8:	9001      	str	r0, [sp, #4]
 80096ba:	4690      	mov	r8, r2
 80096bc:	1c9c      	adds	r4, r3, #2
 80096be:	46a1      	mov	r9, r4
 80096c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80096c4:	2830      	cmp	r0, #48	@ 0x30
 80096c6:	d0fa      	beq.n	80096be <__gethex+0x12>
 80096c8:	eba9 0303 	sub.w	r3, r9, r3
 80096cc:	f1a3 0b02 	sub.w	fp, r3, #2
 80096d0:	f7ff ffd6 	bl	8009680 <__hexdig_fun>
 80096d4:	4605      	mov	r5, r0
 80096d6:	2800      	cmp	r0, #0
 80096d8:	d168      	bne.n	80097ac <__gethex+0x100>
 80096da:	49a0      	ldr	r1, [pc, #640]	@ (800995c <__gethex+0x2b0>)
 80096dc:	2201      	movs	r2, #1
 80096de:	4648      	mov	r0, r9
 80096e0:	f7ff f83b 	bl	800875a <strncmp>
 80096e4:	4607      	mov	r7, r0
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d167      	bne.n	80097ba <__gethex+0x10e>
 80096ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 80096ee:	4626      	mov	r6, r4
 80096f0:	f7ff ffc6 	bl	8009680 <__hexdig_fun>
 80096f4:	2800      	cmp	r0, #0
 80096f6:	d062      	beq.n	80097be <__gethex+0x112>
 80096f8:	4623      	mov	r3, r4
 80096fa:	7818      	ldrb	r0, [r3, #0]
 80096fc:	2830      	cmp	r0, #48	@ 0x30
 80096fe:	4699      	mov	r9, r3
 8009700:	f103 0301 	add.w	r3, r3, #1
 8009704:	d0f9      	beq.n	80096fa <__gethex+0x4e>
 8009706:	f7ff ffbb 	bl	8009680 <__hexdig_fun>
 800970a:	fab0 f580 	clz	r5, r0
 800970e:	096d      	lsrs	r5, r5, #5
 8009710:	f04f 0b01 	mov.w	fp, #1
 8009714:	464a      	mov	r2, r9
 8009716:	4616      	mov	r6, r2
 8009718:	3201      	adds	r2, #1
 800971a:	7830      	ldrb	r0, [r6, #0]
 800971c:	f7ff ffb0 	bl	8009680 <__hexdig_fun>
 8009720:	2800      	cmp	r0, #0
 8009722:	d1f8      	bne.n	8009716 <__gethex+0x6a>
 8009724:	498d      	ldr	r1, [pc, #564]	@ (800995c <__gethex+0x2b0>)
 8009726:	2201      	movs	r2, #1
 8009728:	4630      	mov	r0, r6
 800972a:	f7ff f816 	bl	800875a <strncmp>
 800972e:	2800      	cmp	r0, #0
 8009730:	d13f      	bne.n	80097b2 <__gethex+0x106>
 8009732:	b944      	cbnz	r4, 8009746 <__gethex+0x9a>
 8009734:	1c74      	adds	r4, r6, #1
 8009736:	4622      	mov	r2, r4
 8009738:	4616      	mov	r6, r2
 800973a:	3201      	adds	r2, #1
 800973c:	7830      	ldrb	r0, [r6, #0]
 800973e:	f7ff ff9f 	bl	8009680 <__hexdig_fun>
 8009742:	2800      	cmp	r0, #0
 8009744:	d1f8      	bne.n	8009738 <__gethex+0x8c>
 8009746:	1ba4      	subs	r4, r4, r6
 8009748:	00a7      	lsls	r7, r4, #2
 800974a:	7833      	ldrb	r3, [r6, #0]
 800974c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009750:	2b50      	cmp	r3, #80	@ 0x50
 8009752:	d13e      	bne.n	80097d2 <__gethex+0x126>
 8009754:	7873      	ldrb	r3, [r6, #1]
 8009756:	2b2b      	cmp	r3, #43	@ 0x2b
 8009758:	d033      	beq.n	80097c2 <__gethex+0x116>
 800975a:	2b2d      	cmp	r3, #45	@ 0x2d
 800975c:	d034      	beq.n	80097c8 <__gethex+0x11c>
 800975e:	1c71      	adds	r1, r6, #1
 8009760:	2400      	movs	r4, #0
 8009762:	7808      	ldrb	r0, [r1, #0]
 8009764:	f7ff ff8c 	bl	8009680 <__hexdig_fun>
 8009768:	1e43      	subs	r3, r0, #1
 800976a:	b2db      	uxtb	r3, r3
 800976c:	2b18      	cmp	r3, #24
 800976e:	d830      	bhi.n	80097d2 <__gethex+0x126>
 8009770:	f1a0 0210 	sub.w	r2, r0, #16
 8009774:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009778:	f7ff ff82 	bl	8009680 <__hexdig_fun>
 800977c:	f100 3cff 	add.w	ip, r0, #4294967295
 8009780:	fa5f fc8c 	uxtb.w	ip, ip
 8009784:	f1bc 0f18 	cmp.w	ip, #24
 8009788:	f04f 030a 	mov.w	r3, #10
 800978c:	d91e      	bls.n	80097cc <__gethex+0x120>
 800978e:	b104      	cbz	r4, 8009792 <__gethex+0xe6>
 8009790:	4252      	negs	r2, r2
 8009792:	4417      	add	r7, r2
 8009794:	f8ca 1000 	str.w	r1, [sl]
 8009798:	b1ed      	cbz	r5, 80097d6 <__gethex+0x12a>
 800979a:	f1bb 0f00 	cmp.w	fp, #0
 800979e:	bf0c      	ite	eq
 80097a0:	2506      	moveq	r5, #6
 80097a2:	2500      	movne	r5, #0
 80097a4:	4628      	mov	r0, r5
 80097a6:	b005      	add	sp, #20
 80097a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ac:	2500      	movs	r5, #0
 80097ae:	462c      	mov	r4, r5
 80097b0:	e7b0      	b.n	8009714 <__gethex+0x68>
 80097b2:	2c00      	cmp	r4, #0
 80097b4:	d1c7      	bne.n	8009746 <__gethex+0x9a>
 80097b6:	4627      	mov	r7, r4
 80097b8:	e7c7      	b.n	800974a <__gethex+0x9e>
 80097ba:	464e      	mov	r6, r9
 80097bc:	462f      	mov	r7, r5
 80097be:	2501      	movs	r5, #1
 80097c0:	e7c3      	b.n	800974a <__gethex+0x9e>
 80097c2:	2400      	movs	r4, #0
 80097c4:	1cb1      	adds	r1, r6, #2
 80097c6:	e7cc      	b.n	8009762 <__gethex+0xb6>
 80097c8:	2401      	movs	r4, #1
 80097ca:	e7fb      	b.n	80097c4 <__gethex+0x118>
 80097cc:	fb03 0002 	mla	r0, r3, r2, r0
 80097d0:	e7ce      	b.n	8009770 <__gethex+0xc4>
 80097d2:	4631      	mov	r1, r6
 80097d4:	e7de      	b.n	8009794 <__gethex+0xe8>
 80097d6:	eba6 0309 	sub.w	r3, r6, r9
 80097da:	3b01      	subs	r3, #1
 80097dc:	4629      	mov	r1, r5
 80097de:	2b07      	cmp	r3, #7
 80097e0:	dc0a      	bgt.n	80097f8 <__gethex+0x14c>
 80097e2:	9801      	ldr	r0, [sp, #4]
 80097e4:	f000 fafc 	bl	8009de0 <_Balloc>
 80097e8:	4604      	mov	r4, r0
 80097ea:	b940      	cbnz	r0, 80097fe <__gethex+0x152>
 80097ec:	4b5c      	ldr	r3, [pc, #368]	@ (8009960 <__gethex+0x2b4>)
 80097ee:	4602      	mov	r2, r0
 80097f0:	21e4      	movs	r1, #228	@ 0xe4
 80097f2:	485c      	ldr	r0, [pc, #368]	@ (8009964 <__gethex+0x2b8>)
 80097f4:	f001 fc32 	bl	800b05c <__assert_func>
 80097f8:	3101      	adds	r1, #1
 80097fa:	105b      	asrs	r3, r3, #1
 80097fc:	e7ef      	b.n	80097de <__gethex+0x132>
 80097fe:	f100 0a14 	add.w	sl, r0, #20
 8009802:	2300      	movs	r3, #0
 8009804:	4655      	mov	r5, sl
 8009806:	469b      	mov	fp, r3
 8009808:	45b1      	cmp	r9, r6
 800980a:	d337      	bcc.n	800987c <__gethex+0x1d0>
 800980c:	f845 bb04 	str.w	fp, [r5], #4
 8009810:	eba5 050a 	sub.w	r5, r5, sl
 8009814:	10ad      	asrs	r5, r5, #2
 8009816:	6125      	str	r5, [r4, #16]
 8009818:	4658      	mov	r0, fp
 800981a:	f000 fbd3 	bl	8009fc4 <__hi0bits>
 800981e:	016d      	lsls	r5, r5, #5
 8009820:	f8d8 6000 	ldr.w	r6, [r8]
 8009824:	1a2d      	subs	r5, r5, r0
 8009826:	42b5      	cmp	r5, r6
 8009828:	dd54      	ble.n	80098d4 <__gethex+0x228>
 800982a:	1bad      	subs	r5, r5, r6
 800982c:	4629      	mov	r1, r5
 800982e:	4620      	mov	r0, r4
 8009830:	f000 ff67 	bl	800a702 <__any_on>
 8009834:	4681      	mov	r9, r0
 8009836:	b178      	cbz	r0, 8009858 <__gethex+0x1ac>
 8009838:	1e6b      	subs	r3, r5, #1
 800983a:	1159      	asrs	r1, r3, #5
 800983c:	f003 021f 	and.w	r2, r3, #31
 8009840:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009844:	f04f 0901 	mov.w	r9, #1
 8009848:	fa09 f202 	lsl.w	r2, r9, r2
 800984c:	420a      	tst	r2, r1
 800984e:	d003      	beq.n	8009858 <__gethex+0x1ac>
 8009850:	454b      	cmp	r3, r9
 8009852:	dc36      	bgt.n	80098c2 <__gethex+0x216>
 8009854:	f04f 0902 	mov.w	r9, #2
 8009858:	4629      	mov	r1, r5
 800985a:	4620      	mov	r0, r4
 800985c:	f7ff febe 	bl	80095dc <rshift>
 8009860:	442f      	add	r7, r5
 8009862:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009866:	42bb      	cmp	r3, r7
 8009868:	da42      	bge.n	80098f0 <__gethex+0x244>
 800986a:	9801      	ldr	r0, [sp, #4]
 800986c:	4621      	mov	r1, r4
 800986e:	f000 faf7 	bl	8009e60 <_Bfree>
 8009872:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009874:	2300      	movs	r3, #0
 8009876:	6013      	str	r3, [r2, #0]
 8009878:	25a3      	movs	r5, #163	@ 0xa3
 800987a:	e793      	b.n	80097a4 <__gethex+0xf8>
 800987c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009880:	2a2e      	cmp	r2, #46	@ 0x2e
 8009882:	d012      	beq.n	80098aa <__gethex+0x1fe>
 8009884:	2b20      	cmp	r3, #32
 8009886:	d104      	bne.n	8009892 <__gethex+0x1e6>
 8009888:	f845 bb04 	str.w	fp, [r5], #4
 800988c:	f04f 0b00 	mov.w	fp, #0
 8009890:	465b      	mov	r3, fp
 8009892:	7830      	ldrb	r0, [r6, #0]
 8009894:	9303      	str	r3, [sp, #12]
 8009896:	f7ff fef3 	bl	8009680 <__hexdig_fun>
 800989a:	9b03      	ldr	r3, [sp, #12]
 800989c:	f000 000f 	and.w	r0, r0, #15
 80098a0:	4098      	lsls	r0, r3
 80098a2:	ea4b 0b00 	orr.w	fp, fp, r0
 80098a6:	3304      	adds	r3, #4
 80098a8:	e7ae      	b.n	8009808 <__gethex+0x15c>
 80098aa:	45b1      	cmp	r9, r6
 80098ac:	d8ea      	bhi.n	8009884 <__gethex+0x1d8>
 80098ae:	492b      	ldr	r1, [pc, #172]	@ (800995c <__gethex+0x2b0>)
 80098b0:	9303      	str	r3, [sp, #12]
 80098b2:	2201      	movs	r2, #1
 80098b4:	4630      	mov	r0, r6
 80098b6:	f7fe ff50 	bl	800875a <strncmp>
 80098ba:	9b03      	ldr	r3, [sp, #12]
 80098bc:	2800      	cmp	r0, #0
 80098be:	d1e1      	bne.n	8009884 <__gethex+0x1d8>
 80098c0:	e7a2      	b.n	8009808 <__gethex+0x15c>
 80098c2:	1ea9      	subs	r1, r5, #2
 80098c4:	4620      	mov	r0, r4
 80098c6:	f000 ff1c 	bl	800a702 <__any_on>
 80098ca:	2800      	cmp	r0, #0
 80098cc:	d0c2      	beq.n	8009854 <__gethex+0x1a8>
 80098ce:	f04f 0903 	mov.w	r9, #3
 80098d2:	e7c1      	b.n	8009858 <__gethex+0x1ac>
 80098d4:	da09      	bge.n	80098ea <__gethex+0x23e>
 80098d6:	1b75      	subs	r5, r6, r5
 80098d8:	4621      	mov	r1, r4
 80098da:	9801      	ldr	r0, [sp, #4]
 80098dc:	462a      	mov	r2, r5
 80098de:	f000 fcd7 	bl	800a290 <__lshift>
 80098e2:	1b7f      	subs	r7, r7, r5
 80098e4:	4604      	mov	r4, r0
 80098e6:	f100 0a14 	add.w	sl, r0, #20
 80098ea:	f04f 0900 	mov.w	r9, #0
 80098ee:	e7b8      	b.n	8009862 <__gethex+0x1b6>
 80098f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80098f4:	42bd      	cmp	r5, r7
 80098f6:	dd6f      	ble.n	80099d8 <__gethex+0x32c>
 80098f8:	1bed      	subs	r5, r5, r7
 80098fa:	42ae      	cmp	r6, r5
 80098fc:	dc34      	bgt.n	8009968 <__gethex+0x2bc>
 80098fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009902:	2b02      	cmp	r3, #2
 8009904:	d022      	beq.n	800994c <__gethex+0x2a0>
 8009906:	2b03      	cmp	r3, #3
 8009908:	d024      	beq.n	8009954 <__gethex+0x2a8>
 800990a:	2b01      	cmp	r3, #1
 800990c:	d115      	bne.n	800993a <__gethex+0x28e>
 800990e:	42ae      	cmp	r6, r5
 8009910:	d113      	bne.n	800993a <__gethex+0x28e>
 8009912:	2e01      	cmp	r6, #1
 8009914:	d10b      	bne.n	800992e <__gethex+0x282>
 8009916:	9a02      	ldr	r2, [sp, #8]
 8009918:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800991c:	6013      	str	r3, [r2, #0]
 800991e:	2301      	movs	r3, #1
 8009920:	6123      	str	r3, [r4, #16]
 8009922:	f8ca 3000 	str.w	r3, [sl]
 8009926:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009928:	2562      	movs	r5, #98	@ 0x62
 800992a:	601c      	str	r4, [r3, #0]
 800992c:	e73a      	b.n	80097a4 <__gethex+0xf8>
 800992e:	1e71      	subs	r1, r6, #1
 8009930:	4620      	mov	r0, r4
 8009932:	f000 fee6 	bl	800a702 <__any_on>
 8009936:	2800      	cmp	r0, #0
 8009938:	d1ed      	bne.n	8009916 <__gethex+0x26a>
 800993a:	9801      	ldr	r0, [sp, #4]
 800993c:	4621      	mov	r1, r4
 800993e:	f000 fa8f 	bl	8009e60 <_Bfree>
 8009942:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009944:	2300      	movs	r3, #0
 8009946:	6013      	str	r3, [r2, #0]
 8009948:	2550      	movs	r5, #80	@ 0x50
 800994a:	e72b      	b.n	80097a4 <__gethex+0xf8>
 800994c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800994e:	2b00      	cmp	r3, #0
 8009950:	d1f3      	bne.n	800993a <__gethex+0x28e>
 8009952:	e7e0      	b.n	8009916 <__gethex+0x26a>
 8009954:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009956:	2b00      	cmp	r3, #0
 8009958:	d1dd      	bne.n	8009916 <__gethex+0x26a>
 800995a:	e7ee      	b.n	800993a <__gethex+0x28e>
 800995c:	0800b728 	.word	0x0800b728
 8009960:	0800b83d 	.word	0x0800b83d
 8009964:	0800b84e 	.word	0x0800b84e
 8009968:	1e6f      	subs	r7, r5, #1
 800996a:	f1b9 0f00 	cmp.w	r9, #0
 800996e:	d130      	bne.n	80099d2 <__gethex+0x326>
 8009970:	b127      	cbz	r7, 800997c <__gethex+0x2d0>
 8009972:	4639      	mov	r1, r7
 8009974:	4620      	mov	r0, r4
 8009976:	f000 fec4 	bl	800a702 <__any_on>
 800997a:	4681      	mov	r9, r0
 800997c:	117a      	asrs	r2, r7, #5
 800997e:	2301      	movs	r3, #1
 8009980:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009984:	f007 071f 	and.w	r7, r7, #31
 8009988:	40bb      	lsls	r3, r7
 800998a:	4213      	tst	r3, r2
 800998c:	4629      	mov	r1, r5
 800998e:	4620      	mov	r0, r4
 8009990:	bf18      	it	ne
 8009992:	f049 0902 	orrne.w	r9, r9, #2
 8009996:	f7ff fe21 	bl	80095dc <rshift>
 800999a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800999e:	1b76      	subs	r6, r6, r5
 80099a0:	2502      	movs	r5, #2
 80099a2:	f1b9 0f00 	cmp.w	r9, #0
 80099a6:	d047      	beq.n	8009a38 <__gethex+0x38c>
 80099a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80099ac:	2b02      	cmp	r3, #2
 80099ae:	d015      	beq.n	80099dc <__gethex+0x330>
 80099b0:	2b03      	cmp	r3, #3
 80099b2:	d017      	beq.n	80099e4 <__gethex+0x338>
 80099b4:	2b01      	cmp	r3, #1
 80099b6:	d109      	bne.n	80099cc <__gethex+0x320>
 80099b8:	f019 0f02 	tst.w	r9, #2
 80099bc:	d006      	beq.n	80099cc <__gethex+0x320>
 80099be:	f8da 3000 	ldr.w	r3, [sl]
 80099c2:	ea49 0903 	orr.w	r9, r9, r3
 80099c6:	f019 0f01 	tst.w	r9, #1
 80099ca:	d10e      	bne.n	80099ea <__gethex+0x33e>
 80099cc:	f045 0510 	orr.w	r5, r5, #16
 80099d0:	e032      	b.n	8009a38 <__gethex+0x38c>
 80099d2:	f04f 0901 	mov.w	r9, #1
 80099d6:	e7d1      	b.n	800997c <__gethex+0x2d0>
 80099d8:	2501      	movs	r5, #1
 80099da:	e7e2      	b.n	80099a2 <__gethex+0x2f6>
 80099dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099de:	f1c3 0301 	rsb	r3, r3, #1
 80099e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80099e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d0f0      	beq.n	80099cc <__gethex+0x320>
 80099ea:	f8d4 b010 	ldr.w	fp, [r4, #16]
 80099ee:	f104 0314 	add.w	r3, r4, #20
 80099f2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80099f6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80099fa:	f04f 0c00 	mov.w	ip, #0
 80099fe:	4618      	mov	r0, r3
 8009a00:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a04:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009a08:	d01b      	beq.n	8009a42 <__gethex+0x396>
 8009a0a:	3201      	adds	r2, #1
 8009a0c:	6002      	str	r2, [r0, #0]
 8009a0e:	2d02      	cmp	r5, #2
 8009a10:	f104 0314 	add.w	r3, r4, #20
 8009a14:	d13c      	bne.n	8009a90 <__gethex+0x3e4>
 8009a16:	f8d8 2000 	ldr.w	r2, [r8]
 8009a1a:	3a01      	subs	r2, #1
 8009a1c:	42b2      	cmp	r2, r6
 8009a1e:	d109      	bne.n	8009a34 <__gethex+0x388>
 8009a20:	1171      	asrs	r1, r6, #5
 8009a22:	2201      	movs	r2, #1
 8009a24:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009a28:	f006 061f 	and.w	r6, r6, #31
 8009a2c:	fa02 f606 	lsl.w	r6, r2, r6
 8009a30:	421e      	tst	r6, r3
 8009a32:	d13a      	bne.n	8009aaa <__gethex+0x3fe>
 8009a34:	f045 0520 	orr.w	r5, r5, #32
 8009a38:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a3a:	601c      	str	r4, [r3, #0]
 8009a3c:	9b02      	ldr	r3, [sp, #8]
 8009a3e:	601f      	str	r7, [r3, #0]
 8009a40:	e6b0      	b.n	80097a4 <__gethex+0xf8>
 8009a42:	4299      	cmp	r1, r3
 8009a44:	f843 cc04 	str.w	ip, [r3, #-4]
 8009a48:	d8d9      	bhi.n	80099fe <__gethex+0x352>
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	459b      	cmp	fp, r3
 8009a4e:	db17      	blt.n	8009a80 <__gethex+0x3d4>
 8009a50:	6861      	ldr	r1, [r4, #4]
 8009a52:	9801      	ldr	r0, [sp, #4]
 8009a54:	3101      	adds	r1, #1
 8009a56:	f000 f9c3 	bl	8009de0 <_Balloc>
 8009a5a:	4681      	mov	r9, r0
 8009a5c:	b918      	cbnz	r0, 8009a66 <__gethex+0x3ba>
 8009a5e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ac8 <__gethex+0x41c>)
 8009a60:	4602      	mov	r2, r0
 8009a62:	2184      	movs	r1, #132	@ 0x84
 8009a64:	e6c5      	b.n	80097f2 <__gethex+0x146>
 8009a66:	6922      	ldr	r2, [r4, #16]
 8009a68:	3202      	adds	r2, #2
 8009a6a:	f104 010c 	add.w	r1, r4, #12
 8009a6e:	0092      	lsls	r2, r2, #2
 8009a70:	300c      	adds	r0, #12
 8009a72:	f7fe fefc 	bl	800886e <memcpy>
 8009a76:	4621      	mov	r1, r4
 8009a78:	9801      	ldr	r0, [sp, #4]
 8009a7a:	f000 f9f1 	bl	8009e60 <_Bfree>
 8009a7e:	464c      	mov	r4, r9
 8009a80:	6923      	ldr	r3, [r4, #16]
 8009a82:	1c5a      	adds	r2, r3, #1
 8009a84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009a88:	6122      	str	r2, [r4, #16]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	615a      	str	r2, [r3, #20]
 8009a8e:	e7be      	b.n	8009a0e <__gethex+0x362>
 8009a90:	6922      	ldr	r2, [r4, #16]
 8009a92:	455a      	cmp	r2, fp
 8009a94:	dd0b      	ble.n	8009aae <__gethex+0x402>
 8009a96:	2101      	movs	r1, #1
 8009a98:	4620      	mov	r0, r4
 8009a9a:	f7ff fd9f 	bl	80095dc <rshift>
 8009a9e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009aa2:	3701      	adds	r7, #1
 8009aa4:	42bb      	cmp	r3, r7
 8009aa6:	f6ff aee0 	blt.w	800986a <__gethex+0x1be>
 8009aaa:	2501      	movs	r5, #1
 8009aac:	e7c2      	b.n	8009a34 <__gethex+0x388>
 8009aae:	f016 061f 	ands.w	r6, r6, #31
 8009ab2:	d0fa      	beq.n	8009aaa <__gethex+0x3fe>
 8009ab4:	4453      	add	r3, sl
 8009ab6:	f1c6 0620 	rsb	r6, r6, #32
 8009aba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8009abe:	f000 fa81 	bl	8009fc4 <__hi0bits>
 8009ac2:	42b0      	cmp	r0, r6
 8009ac4:	dbe7      	blt.n	8009a96 <__gethex+0x3ea>
 8009ac6:	e7f0      	b.n	8009aaa <__gethex+0x3fe>
 8009ac8:	0800b83d 	.word	0x0800b83d

08009acc <L_shift>:
 8009acc:	f1c2 0208 	rsb	r2, r2, #8
 8009ad0:	0092      	lsls	r2, r2, #2
 8009ad2:	b570      	push	{r4, r5, r6, lr}
 8009ad4:	f1c2 0620 	rsb	r6, r2, #32
 8009ad8:	6843      	ldr	r3, [r0, #4]
 8009ada:	6804      	ldr	r4, [r0, #0]
 8009adc:	fa03 f506 	lsl.w	r5, r3, r6
 8009ae0:	432c      	orrs	r4, r5
 8009ae2:	40d3      	lsrs	r3, r2
 8009ae4:	6004      	str	r4, [r0, #0]
 8009ae6:	f840 3f04 	str.w	r3, [r0, #4]!
 8009aea:	4288      	cmp	r0, r1
 8009aec:	d3f4      	bcc.n	8009ad8 <L_shift+0xc>
 8009aee:	bd70      	pop	{r4, r5, r6, pc}

08009af0 <__match>:
 8009af0:	b530      	push	{r4, r5, lr}
 8009af2:	6803      	ldr	r3, [r0, #0]
 8009af4:	3301      	adds	r3, #1
 8009af6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009afa:	b914      	cbnz	r4, 8009b02 <__match+0x12>
 8009afc:	6003      	str	r3, [r0, #0]
 8009afe:	2001      	movs	r0, #1
 8009b00:	bd30      	pop	{r4, r5, pc}
 8009b02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009b06:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8009b0a:	2d19      	cmp	r5, #25
 8009b0c:	bf98      	it	ls
 8009b0e:	3220      	addls	r2, #32
 8009b10:	42a2      	cmp	r2, r4
 8009b12:	d0f0      	beq.n	8009af6 <__match+0x6>
 8009b14:	2000      	movs	r0, #0
 8009b16:	e7f3      	b.n	8009b00 <__match+0x10>

08009b18 <__hexnan>:
 8009b18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1c:	680b      	ldr	r3, [r1, #0]
 8009b1e:	6801      	ldr	r1, [r0, #0]
 8009b20:	115e      	asrs	r6, r3, #5
 8009b22:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009b26:	f013 031f 	ands.w	r3, r3, #31
 8009b2a:	b087      	sub	sp, #28
 8009b2c:	bf18      	it	ne
 8009b2e:	3604      	addne	r6, #4
 8009b30:	2500      	movs	r5, #0
 8009b32:	1f37      	subs	r7, r6, #4
 8009b34:	4682      	mov	sl, r0
 8009b36:	4690      	mov	r8, r2
 8009b38:	9301      	str	r3, [sp, #4]
 8009b3a:	f846 5c04 	str.w	r5, [r6, #-4]
 8009b3e:	46b9      	mov	r9, r7
 8009b40:	463c      	mov	r4, r7
 8009b42:	9502      	str	r5, [sp, #8]
 8009b44:	46ab      	mov	fp, r5
 8009b46:	784a      	ldrb	r2, [r1, #1]
 8009b48:	1c4b      	adds	r3, r1, #1
 8009b4a:	9303      	str	r3, [sp, #12]
 8009b4c:	b342      	cbz	r2, 8009ba0 <__hexnan+0x88>
 8009b4e:	4610      	mov	r0, r2
 8009b50:	9105      	str	r1, [sp, #20]
 8009b52:	9204      	str	r2, [sp, #16]
 8009b54:	f7ff fd94 	bl	8009680 <__hexdig_fun>
 8009b58:	2800      	cmp	r0, #0
 8009b5a:	d151      	bne.n	8009c00 <__hexnan+0xe8>
 8009b5c:	9a04      	ldr	r2, [sp, #16]
 8009b5e:	9905      	ldr	r1, [sp, #20]
 8009b60:	2a20      	cmp	r2, #32
 8009b62:	d818      	bhi.n	8009b96 <__hexnan+0x7e>
 8009b64:	9b02      	ldr	r3, [sp, #8]
 8009b66:	459b      	cmp	fp, r3
 8009b68:	dd13      	ble.n	8009b92 <__hexnan+0x7a>
 8009b6a:	454c      	cmp	r4, r9
 8009b6c:	d206      	bcs.n	8009b7c <__hexnan+0x64>
 8009b6e:	2d07      	cmp	r5, #7
 8009b70:	dc04      	bgt.n	8009b7c <__hexnan+0x64>
 8009b72:	462a      	mov	r2, r5
 8009b74:	4649      	mov	r1, r9
 8009b76:	4620      	mov	r0, r4
 8009b78:	f7ff ffa8 	bl	8009acc <L_shift>
 8009b7c:	4544      	cmp	r4, r8
 8009b7e:	d952      	bls.n	8009c26 <__hexnan+0x10e>
 8009b80:	2300      	movs	r3, #0
 8009b82:	f1a4 0904 	sub.w	r9, r4, #4
 8009b86:	f844 3c04 	str.w	r3, [r4, #-4]
 8009b8a:	f8cd b008 	str.w	fp, [sp, #8]
 8009b8e:	464c      	mov	r4, r9
 8009b90:	461d      	mov	r5, r3
 8009b92:	9903      	ldr	r1, [sp, #12]
 8009b94:	e7d7      	b.n	8009b46 <__hexnan+0x2e>
 8009b96:	2a29      	cmp	r2, #41	@ 0x29
 8009b98:	d157      	bne.n	8009c4a <__hexnan+0x132>
 8009b9a:	3102      	adds	r1, #2
 8009b9c:	f8ca 1000 	str.w	r1, [sl]
 8009ba0:	f1bb 0f00 	cmp.w	fp, #0
 8009ba4:	d051      	beq.n	8009c4a <__hexnan+0x132>
 8009ba6:	454c      	cmp	r4, r9
 8009ba8:	d206      	bcs.n	8009bb8 <__hexnan+0xa0>
 8009baa:	2d07      	cmp	r5, #7
 8009bac:	dc04      	bgt.n	8009bb8 <__hexnan+0xa0>
 8009bae:	462a      	mov	r2, r5
 8009bb0:	4649      	mov	r1, r9
 8009bb2:	4620      	mov	r0, r4
 8009bb4:	f7ff ff8a 	bl	8009acc <L_shift>
 8009bb8:	4544      	cmp	r4, r8
 8009bba:	d936      	bls.n	8009c2a <__hexnan+0x112>
 8009bbc:	f1a8 0204 	sub.w	r2, r8, #4
 8009bc0:	4623      	mov	r3, r4
 8009bc2:	f853 1b04 	ldr.w	r1, [r3], #4
 8009bc6:	f842 1f04 	str.w	r1, [r2, #4]!
 8009bca:	429f      	cmp	r7, r3
 8009bcc:	d2f9      	bcs.n	8009bc2 <__hexnan+0xaa>
 8009bce:	1b3b      	subs	r3, r7, r4
 8009bd0:	f023 0303 	bic.w	r3, r3, #3
 8009bd4:	3304      	adds	r3, #4
 8009bd6:	3401      	adds	r4, #1
 8009bd8:	3e03      	subs	r6, #3
 8009bda:	42b4      	cmp	r4, r6
 8009bdc:	bf88      	it	hi
 8009bde:	2304      	movhi	r3, #4
 8009be0:	4443      	add	r3, r8
 8009be2:	2200      	movs	r2, #0
 8009be4:	f843 2b04 	str.w	r2, [r3], #4
 8009be8:	429f      	cmp	r7, r3
 8009bea:	d2fb      	bcs.n	8009be4 <__hexnan+0xcc>
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	b91b      	cbnz	r3, 8009bf8 <__hexnan+0xe0>
 8009bf0:	4547      	cmp	r7, r8
 8009bf2:	d128      	bne.n	8009c46 <__hexnan+0x12e>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	603b      	str	r3, [r7, #0]
 8009bf8:	2005      	movs	r0, #5
 8009bfa:	b007      	add	sp, #28
 8009bfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c00:	3501      	adds	r5, #1
 8009c02:	2d08      	cmp	r5, #8
 8009c04:	f10b 0b01 	add.w	fp, fp, #1
 8009c08:	dd06      	ble.n	8009c18 <__hexnan+0x100>
 8009c0a:	4544      	cmp	r4, r8
 8009c0c:	d9c1      	bls.n	8009b92 <__hexnan+0x7a>
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f844 3c04 	str.w	r3, [r4, #-4]
 8009c14:	2501      	movs	r5, #1
 8009c16:	3c04      	subs	r4, #4
 8009c18:	6822      	ldr	r2, [r4, #0]
 8009c1a:	f000 000f 	and.w	r0, r0, #15
 8009c1e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8009c22:	6020      	str	r0, [r4, #0]
 8009c24:	e7b5      	b.n	8009b92 <__hexnan+0x7a>
 8009c26:	2508      	movs	r5, #8
 8009c28:	e7b3      	b.n	8009b92 <__hexnan+0x7a>
 8009c2a:	9b01      	ldr	r3, [sp, #4]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d0dd      	beq.n	8009bec <__hexnan+0xd4>
 8009c30:	f1c3 0320 	rsb	r3, r3, #32
 8009c34:	f04f 32ff 	mov.w	r2, #4294967295
 8009c38:	40da      	lsrs	r2, r3
 8009c3a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8009c3e:	4013      	ands	r3, r2
 8009c40:	f846 3c04 	str.w	r3, [r6, #-4]
 8009c44:	e7d2      	b.n	8009bec <__hexnan+0xd4>
 8009c46:	3f04      	subs	r7, #4
 8009c48:	e7d0      	b.n	8009bec <__hexnan+0xd4>
 8009c4a:	2004      	movs	r0, #4
 8009c4c:	e7d5      	b.n	8009bfa <__hexnan+0xe2>
	...

08009c50 <malloc>:
 8009c50:	4b02      	ldr	r3, [pc, #8]	@ (8009c5c <malloc+0xc>)
 8009c52:	4601      	mov	r1, r0
 8009c54:	6818      	ldr	r0, [r3, #0]
 8009c56:	f000 b825 	b.w	8009ca4 <_malloc_r>
 8009c5a:	bf00      	nop
 8009c5c:	200001a8 	.word	0x200001a8

08009c60 <sbrk_aligned>:
 8009c60:	b570      	push	{r4, r5, r6, lr}
 8009c62:	4e0f      	ldr	r6, [pc, #60]	@ (8009ca0 <sbrk_aligned+0x40>)
 8009c64:	460c      	mov	r4, r1
 8009c66:	6831      	ldr	r1, [r6, #0]
 8009c68:	4605      	mov	r5, r0
 8009c6a:	b911      	cbnz	r1, 8009c72 <sbrk_aligned+0x12>
 8009c6c:	f001 f9e6 	bl	800b03c <_sbrk_r>
 8009c70:	6030      	str	r0, [r6, #0]
 8009c72:	4621      	mov	r1, r4
 8009c74:	4628      	mov	r0, r5
 8009c76:	f001 f9e1 	bl	800b03c <_sbrk_r>
 8009c7a:	1c43      	adds	r3, r0, #1
 8009c7c:	d103      	bne.n	8009c86 <sbrk_aligned+0x26>
 8009c7e:	f04f 34ff 	mov.w	r4, #4294967295
 8009c82:	4620      	mov	r0, r4
 8009c84:	bd70      	pop	{r4, r5, r6, pc}
 8009c86:	1cc4      	adds	r4, r0, #3
 8009c88:	f024 0403 	bic.w	r4, r4, #3
 8009c8c:	42a0      	cmp	r0, r4
 8009c8e:	d0f8      	beq.n	8009c82 <sbrk_aligned+0x22>
 8009c90:	1a21      	subs	r1, r4, r0
 8009c92:	4628      	mov	r0, r5
 8009c94:	f001 f9d2 	bl	800b03c <_sbrk_r>
 8009c98:	3001      	adds	r0, #1
 8009c9a:	d1f2      	bne.n	8009c82 <sbrk_aligned+0x22>
 8009c9c:	e7ef      	b.n	8009c7e <sbrk_aligned+0x1e>
 8009c9e:	bf00      	nop
 8009ca0:	2000076c 	.word	0x2000076c

08009ca4 <_malloc_r>:
 8009ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009ca8:	1ccd      	adds	r5, r1, #3
 8009caa:	f025 0503 	bic.w	r5, r5, #3
 8009cae:	3508      	adds	r5, #8
 8009cb0:	2d0c      	cmp	r5, #12
 8009cb2:	bf38      	it	cc
 8009cb4:	250c      	movcc	r5, #12
 8009cb6:	2d00      	cmp	r5, #0
 8009cb8:	4606      	mov	r6, r0
 8009cba:	db01      	blt.n	8009cc0 <_malloc_r+0x1c>
 8009cbc:	42a9      	cmp	r1, r5
 8009cbe:	d904      	bls.n	8009cca <_malloc_r+0x26>
 8009cc0:	230c      	movs	r3, #12
 8009cc2:	6033      	str	r3, [r6, #0]
 8009cc4:	2000      	movs	r0, #0
 8009cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cca:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009da0 <_malloc_r+0xfc>
 8009cce:	f000 f87b 	bl	8009dc8 <__malloc_lock>
 8009cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8009cd6:	461c      	mov	r4, r3
 8009cd8:	bb44      	cbnz	r4, 8009d2c <_malloc_r+0x88>
 8009cda:	4629      	mov	r1, r5
 8009cdc:	4630      	mov	r0, r6
 8009cde:	f7ff ffbf 	bl	8009c60 <sbrk_aligned>
 8009ce2:	1c43      	adds	r3, r0, #1
 8009ce4:	4604      	mov	r4, r0
 8009ce6:	d158      	bne.n	8009d9a <_malloc_r+0xf6>
 8009ce8:	f8d8 4000 	ldr.w	r4, [r8]
 8009cec:	4627      	mov	r7, r4
 8009cee:	2f00      	cmp	r7, #0
 8009cf0:	d143      	bne.n	8009d7a <_malloc_r+0xd6>
 8009cf2:	2c00      	cmp	r4, #0
 8009cf4:	d04b      	beq.n	8009d8e <_malloc_r+0xea>
 8009cf6:	6823      	ldr	r3, [r4, #0]
 8009cf8:	4639      	mov	r1, r7
 8009cfa:	4630      	mov	r0, r6
 8009cfc:	eb04 0903 	add.w	r9, r4, r3
 8009d00:	f001 f99c 	bl	800b03c <_sbrk_r>
 8009d04:	4581      	cmp	r9, r0
 8009d06:	d142      	bne.n	8009d8e <_malloc_r+0xea>
 8009d08:	6821      	ldr	r1, [r4, #0]
 8009d0a:	1a6d      	subs	r5, r5, r1
 8009d0c:	4629      	mov	r1, r5
 8009d0e:	4630      	mov	r0, r6
 8009d10:	f7ff ffa6 	bl	8009c60 <sbrk_aligned>
 8009d14:	3001      	adds	r0, #1
 8009d16:	d03a      	beq.n	8009d8e <_malloc_r+0xea>
 8009d18:	6823      	ldr	r3, [r4, #0]
 8009d1a:	442b      	add	r3, r5
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	f8d8 3000 	ldr.w	r3, [r8]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	bb62      	cbnz	r2, 8009d80 <_malloc_r+0xdc>
 8009d26:	f8c8 7000 	str.w	r7, [r8]
 8009d2a:	e00f      	b.n	8009d4c <_malloc_r+0xa8>
 8009d2c:	6822      	ldr	r2, [r4, #0]
 8009d2e:	1b52      	subs	r2, r2, r5
 8009d30:	d420      	bmi.n	8009d74 <_malloc_r+0xd0>
 8009d32:	2a0b      	cmp	r2, #11
 8009d34:	d917      	bls.n	8009d66 <_malloc_r+0xc2>
 8009d36:	1961      	adds	r1, r4, r5
 8009d38:	42a3      	cmp	r3, r4
 8009d3a:	6025      	str	r5, [r4, #0]
 8009d3c:	bf18      	it	ne
 8009d3e:	6059      	strne	r1, [r3, #4]
 8009d40:	6863      	ldr	r3, [r4, #4]
 8009d42:	bf08      	it	eq
 8009d44:	f8c8 1000 	streq.w	r1, [r8]
 8009d48:	5162      	str	r2, [r4, r5]
 8009d4a:	604b      	str	r3, [r1, #4]
 8009d4c:	4630      	mov	r0, r6
 8009d4e:	f000 f841 	bl	8009dd4 <__malloc_unlock>
 8009d52:	f104 000b 	add.w	r0, r4, #11
 8009d56:	1d23      	adds	r3, r4, #4
 8009d58:	f020 0007 	bic.w	r0, r0, #7
 8009d5c:	1ac2      	subs	r2, r0, r3
 8009d5e:	bf1c      	itt	ne
 8009d60:	1a1b      	subne	r3, r3, r0
 8009d62:	50a3      	strne	r3, [r4, r2]
 8009d64:	e7af      	b.n	8009cc6 <_malloc_r+0x22>
 8009d66:	6862      	ldr	r2, [r4, #4]
 8009d68:	42a3      	cmp	r3, r4
 8009d6a:	bf0c      	ite	eq
 8009d6c:	f8c8 2000 	streq.w	r2, [r8]
 8009d70:	605a      	strne	r2, [r3, #4]
 8009d72:	e7eb      	b.n	8009d4c <_malloc_r+0xa8>
 8009d74:	4623      	mov	r3, r4
 8009d76:	6864      	ldr	r4, [r4, #4]
 8009d78:	e7ae      	b.n	8009cd8 <_malloc_r+0x34>
 8009d7a:	463c      	mov	r4, r7
 8009d7c:	687f      	ldr	r7, [r7, #4]
 8009d7e:	e7b6      	b.n	8009cee <_malloc_r+0x4a>
 8009d80:	461a      	mov	r2, r3
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	42a3      	cmp	r3, r4
 8009d86:	d1fb      	bne.n	8009d80 <_malloc_r+0xdc>
 8009d88:	2300      	movs	r3, #0
 8009d8a:	6053      	str	r3, [r2, #4]
 8009d8c:	e7de      	b.n	8009d4c <_malloc_r+0xa8>
 8009d8e:	230c      	movs	r3, #12
 8009d90:	6033      	str	r3, [r6, #0]
 8009d92:	4630      	mov	r0, r6
 8009d94:	f000 f81e 	bl	8009dd4 <__malloc_unlock>
 8009d98:	e794      	b.n	8009cc4 <_malloc_r+0x20>
 8009d9a:	6005      	str	r5, [r0, #0]
 8009d9c:	e7d6      	b.n	8009d4c <_malloc_r+0xa8>
 8009d9e:	bf00      	nop
 8009da0:	20000770 	.word	0x20000770

08009da4 <__ascii_mbtowc>:
 8009da4:	b082      	sub	sp, #8
 8009da6:	b901      	cbnz	r1, 8009daa <__ascii_mbtowc+0x6>
 8009da8:	a901      	add	r1, sp, #4
 8009daa:	b142      	cbz	r2, 8009dbe <__ascii_mbtowc+0x1a>
 8009dac:	b14b      	cbz	r3, 8009dc2 <__ascii_mbtowc+0x1e>
 8009dae:	7813      	ldrb	r3, [r2, #0]
 8009db0:	600b      	str	r3, [r1, #0]
 8009db2:	7812      	ldrb	r2, [r2, #0]
 8009db4:	1e10      	subs	r0, r2, #0
 8009db6:	bf18      	it	ne
 8009db8:	2001      	movne	r0, #1
 8009dba:	b002      	add	sp, #8
 8009dbc:	4770      	bx	lr
 8009dbe:	4610      	mov	r0, r2
 8009dc0:	e7fb      	b.n	8009dba <__ascii_mbtowc+0x16>
 8009dc2:	f06f 0001 	mvn.w	r0, #1
 8009dc6:	e7f8      	b.n	8009dba <__ascii_mbtowc+0x16>

08009dc8 <__malloc_lock>:
 8009dc8:	4801      	ldr	r0, [pc, #4]	@ (8009dd0 <__malloc_lock+0x8>)
 8009dca:	f7fe bd4e 	b.w	800886a <__retarget_lock_acquire_recursive>
 8009dce:	bf00      	nop
 8009dd0:	20000768 	.word	0x20000768

08009dd4 <__malloc_unlock>:
 8009dd4:	4801      	ldr	r0, [pc, #4]	@ (8009ddc <__malloc_unlock+0x8>)
 8009dd6:	f7fe bd49 	b.w	800886c <__retarget_lock_release_recursive>
 8009dda:	bf00      	nop
 8009ddc:	20000768 	.word	0x20000768

08009de0 <_Balloc>:
 8009de0:	b570      	push	{r4, r5, r6, lr}
 8009de2:	69c6      	ldr	r6, [r0, #28]
 8009de4:	4604      	mov	r4, r0
 8009de6:	460d      	mov	r5, r1
 8009de8:	b976      	cbnz	r6, 8009e08 <_Balloc+0x28>
 8009dea:	2010      	movs	r0, #16
 8009dec:	f7ff ff30 	bl	8009c50 <malloc>
 8009df0:	4602      	mov	r2, r0
 8009df2:	61e0      	str	r0, [r4, #28]
 8009df4:	b920      	cbnz	r0, 8009e00 <_Balloc+0x20>
 8009df6:	4b18      	ldr	r3, [pc, #96]	@ (8009e58 <_Balloc+0x78>)
 8009df8:	4818      	ldr	r0, [pc, #96]	@ (8009e5c <_Balloc+0x7c>)
 8009dfa:	216b      	movs	r1, #107	@ 0x6b
 8009dfc:	f001 f92e 	bl	800b05c <__assert_func>
 8009e00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e04:	6006      	str	r6, [r0, #0]
 8009e06:	60c6      	str	r6, [r0, #12]
 8009e08:	69e6      	ldr	r6, [r4, #28]
 8009e0a:	68f3      	ldr	r3, [r6, #12]
 8009e0c:	b183      	cbz	r3, 8009e30 <_Balloc+0x50>
 8009e0e:	69e3      	ldr	r3, [r4, #28]
 8009e10:	68db      	ldr	r3, [r3, #12]
 8009e12:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009e16:	b9b8      	cbnz	r0, 8009e48 <_Balloc+0x68>
 8009e18:	2101      	movs	r1, #1
 8009e1a:	fa01 f605 	lsl.w	r6, r1, r5
 8009e1e:	1d72      	adds	r2, r6, #5
 8009e20:	0092      	lsls	r2, r2, #2
 8009e22:	4620      	mov	r0, r4
 8009e24:	f001 f938 	bl	800b098 <_calloc_r>
 8009e28:	b160      	cbz	r0, 8009e44 <_Balloc+0x64>
 8009e2a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e2e:	e00e      	b.n	8009e4e <_Balloc+0x6e>
 8009e30:	2221      	movs	r2, #33	@ 0x21
 8009e32:	2104      	movs	r1, #4
 8009e34:	4620      	mov	r0, r4
 8009e36:	f001 f92f 	bl	800b098 <_calloc_r>
 8009e3a:	69e3      	ldr	r3, [r4, #28]
 8009e3c:	60f0      	str	r0, [r6, #12]
 8009e3e:	68db      	ldr	r3, [r3, #12]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d1e4      	bne.n	8009e0e <_Balloc+0x2e>
 8009e44:	2000      	movs	r0, #0
 8009e46:	bd70      	pop	{r4, r5, r6, pc}
 8009e48:	6802      	ldr	r2, [r0, #0]
 8009e4a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e4e:	2300      	movs	r3, #0
 8009e50:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e54:	e7f7      	b.n	8009e46 <_Balloc+0x66>
 8009e56:	bf00      	nop
 8009e58:	0800b7ce 	.word	0x0800b7ce
 8009e5c:	0800b8ae 	.word	0x0800b8ae

08009e60 <_Bfree>:
 8009e60:	b570      	push	{r4, r5, r6, lr}
 8009e62:	69c6      	ldr	r6, [r0, #28]
 8009e64:	4605      	mov	r5, r0
 8009e66:	460c      	mov	r4, r1
 8009e68:	b976      	cbnz	r6, 8009e88 <_Bfree+0x28>
 8009e6a:	2010      	movs	r0, #16
 8009e6c:	f7ff fef0 	bl	8009c50 <malloc>
 8009e70:	4602      	mov	r2, r0
 8009e72:	61e8      	str	r0, [r5, #28]
 8009e74:	b920      	cbnz	r0, 8009e80 <_Bfree+0x20>
 8009e76:	4b09      	ldr	r3, [pc, #36]	@ (8009e9c <_Bfree+0x3c>)
 8009e78:	4809      	ldr	r0, [pc, #36]	@ (8009ea0 <_Bfree+0x40>)
 8009e7a:	218f      	movs	r1, #143	@ 0x8f
 8009e7c:	f001 f8ee 	bl	800b05c <__assert_func>
 8009e80:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e84:	6006      	str	r6, [r0, #0]
 8009e86:	60c6      	str	r6, [r0, #12]
 8009e88:	b13c      	cbz	r4, 8009e9a <_Bfree+0x3a>
 8009e8a:	69eb      	ldr	r3, [r5, #28]
 8009e8c:	6862      	ldr	r2, [r4, #4]
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e94:	6021      	str	r1, [r4, #0]
 8009e96:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e9a:	bd70      	pop	{r4, r5, r6, pc}
 8009e9c:	0800b7ce 	.word	0x0800b7ce
 8009ea0:	0800b8ae 	.word	0x0800b8ae

08009ea4 <__multadd>:
 8009ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ea8:	690d      	ldr	r5, [r1, #16]
 8009eaa:	4607      	mov	r7, r0
 8009eac:	460c      	mov	r4, r1
 8009eae:	461e      	mov	r6, r3
 8009eb0:	f101 0c14 	add.w	ip, r1, #20
 8009eb4:	2000      	movs	r0, #0
 8009eb6:	f8dc 3000 	ldr.w	r3, [ip]
 8009eba:	b299      	uxth	r1, r3
 8009ebc:	fb02 6101 	mla	r1, r2, r1, r6
 8009ec0:	0c1e      	lsrs	r6, r3, #16
 8009ec2:	0c0b      	lsrs	r3, r1, #16
 8009ec4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ec8:	b289      	uxth	r1, r1
 8009eca:	3001      	adds	r0, #1
 8009ecc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009ed0:	4285      	cmp	r5, r0
 8009ed2:	f84c 1b04 	str.w	r1, [ip], #4
 8009ed6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009eda:	dcec      	bgt.n	8009eb6 <__multadd+0x12>
 8009edc:	b30e      	cbz	r6, 8009f22 <__multadd+0x7e>
 8009ede:	68a3      	ldr	r3, [r4, #8]
 8009ee0:	42ab      	cmp	r3, r5
 8009ee2:	dc19      	bgt.n	8009f18 <__multadd+0x74>
 8009ee4:	6861      	ldr	r1, [r4, #4]
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	3101      	adds	r1, #1
 8009eea:	f7ff ff79 	bl	8009de0 <_Balloc>
 8009eee:	4680      	mov	r8, r0
 8009ef0:	b928      	cbnz	r0, 8009efe <__multadd+0x5a>
 8009ef2:	4602      	mov	r2, r0
 8009ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8009f28 <__multadd+0x84>)
 8009ef6:	480d      	ldr	r0, [pc, #52]	@ (8009f2c <__multadd+0x88>)
 8009ef8:	21ba      	movs	r1, #186	@ 0xba
 8009efa:	f001 f8af 	bl	800b05c <__assert_func>
 8009efe:	6922      	ldr	r2, [r4, #16]
 8009f00:	3202      	adds	r2, #2
 8009f02:	f104 010c 	add.w	r1, r4, #12
 8009f06:	0092      	lsls	r2, r2, #2
 8009f08:	300c      	adds	r0, #12
 8009f0a:	f7fe fcb0 	bl	800886e <memcpy>
 8009f0e:	4621      	mov	r1, r4
 8009f10:	4638      	mov	r0, r7
 8009f12:	f7ff ffa5 	bl	8009e60 <_Bfree>
 8009f16:	4644      	mov	r4, r8
 8009f18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009f1c:	3501      	adds	r5, #1
 8009f1e:	615e      	str	r6, [r3, #20]
 8009f20:	6125      	str	r5, [r4, #16]
 8009f22:	4620      	mov	r0, r4
 8009f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f28:	0800b83d 	.word	0x0800b83d
 8009f2c:	0800b8ae 	.word	0x0800b8ae

08009f30 <__s2b>:
 8009f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f34:	460c      	mov	r4, r1
 8009f36:	4615      	mov	r5, r2
 8009f38:	461f      	mov	r7, r3
 8009f3a:	2209      	movs	r2, #9
 8009f3c:	3308      	adds	r3, #8
 8009f3e:	4606      	mov	r6, r0
 8009f40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f44:	2100      	movs	r1, #0
 8009f46:	2201      	movs	r2, #1
 8009f48:	429a      	cmp	r2, r3
 8009f4a:	db09      	blt.n	8009f60 <__s2b+0x30>
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	f7ff ff47 	bl	8009de0 <_Balloc>
 8009f52:	b940      	cbnz	r0, 8009f66 <__s2b+0x36>
 8009f54:	4602      	mov	r2, r0
 8009f56:	4b19      	ldr	r3, [pc, #100]	@ (8009fbc <__s2b+0x8c>)
 8009f58:	4819      	ldr	r0, [pc, #100]	@ (8009fc0 <__s2b+0x90>)
 8009f5a:	21d3      	movs	r1, #211	@ 0xd3
 8009f5c:	f001 f87e 	bl	800b05c <__assert_func>
 8009f60:	0052      	lsls	r2, r2, #1
 8009f62:	3101      	adds	r1, #1
 8009f64:	e7f0      	b.n	8009f48 <__s2b+0x18>
 8009f66:	9b08      	ldr	r3, [sp, #32]
 8009f68:	6143      	str	r3, [r0, #20]
 8009f6a:	2d09      	cmp	r5, #9
 8009f6c:	f04f 0301 	mov.w	r3, #1
 8009f70:	6103      	str	r3, [r0, #16]
 8009f72:	dd16      	ble.n	8009fa2 <__s2b+0x72>
 8009f74:	f104 0909 	add.w	r9, r4, #9
 8009f78:	46c8      	mov	r8, r9
 8009f7a:	442c      	add	r4, r5
 8009f7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009f80:	4601      	mov	r1, r0
 8009f82:	3b30      	subs	r3, #48	@ 0x30
 8009f84:	220a      	movs	r2, #10
 8009f86:	4630      	mov	r0, r6
 8009f88:	f7ff ff8c 	bl	8009ea4 <__multadd>
 8009f8c:	45a0      	cmp	r8, r4
 8009f8e:	d1f5      	bne.n	8009f7c <__s2b+0x4c>
 8009f90:	f1a5 0408 	sub.w	r4, r5, #8
 8009f94:	444c      	add	r4, r9
 8009f96:	1b2d      	subs	r5, r5, r4
 8009f98:	1963      	adds	r3, r4, r5
 8009f9a:	42bb      	cmp	r3, r7
 8009f9c:	db04      	blt.n	8009fa8 <__s2b+0x78>
 8009f9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009fa2:	340a      	adds	r4, #10
 8009fa4:	2509      	movs	r5, #9
 8009fa6:	e7f6      	b.n	8009f96 <__s2b+0x66>
 8009fa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009fac:	4601      	mov	r1, r0
 8009fae:	3b30      	subs	r3, #48	@ 0x30
 8009fb0:	220a      	movs	r2, #10
 8009fb2:	4630      	mov	r0, r6
 8009fb4:	f7ff ff76 	bl	8009ea4 <__multadd>
 8009fb8:	e7ee      	b.n	8009f98 <__s2b+0x68>
 8009fba:	bf00      	nop
 8009fbc:	0800b83d 	.word	0x0800b83d
 8009fc0:	0800b8ae 	.word	0x0800b8ae

08009fc4 <__hi0bits>:
 8009fc4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009fc8:	4603      	mov	r3, r0
 8009fca:	bf36      	itet	cc
 8009fcc:	0403      	lslcc	r3, r0, #16
 8009fce:	2000      	movcs	r0, #0
 8009fd0:	2010      	movcc	r0, #16
 8009fd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009fd6:	bf3c      	itt	cc
 8009fd8:	021b      	lslcc	r3, r3, #8
 8009fda:	3008      	addcc	r0, #8
 8009fdc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fe0:	bf3c      	itt	cc
 8009fe2:	011b      	lslcc	r3, r3, #4
 8009fe4:	3004      	addcc	r0, #4
 8009fe6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009fea:	bf3c      	itt	cc
 8009fec:	009b      	lslcc	r3, r3, #2
 8009fee:	3002      	addcc	r0, #2
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	db05      	blt.n	800a000 <__hi0bits+0x3c>
 8009ff4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009ff8:	f100 0001 	add.w	r0, r0, #1
 8009ffc:	bf08      	it	eq
 8009ffe:	2020      	moveq	r0, #32
 800a000:	4770      	bx	lr

0800a002 <__lo0bits>:
 800a002:	6803      	ldr	r3, [r0, #0]
 800a004:	4602      	mov	r2, r0
 800a006:	f013 0007 	ands.w	r0, r3, #7
 800a00a:	d00b      	beq.n	800a024 <__lo0bits+0x22>
 800a00c:	07d9      	lsls	r1, r3, #31
 800a00e:	d421      	bmi.n	800a054 <__lo0bits+0x52>
 800a010:	0798      	lsls	r0, r3, #30
 800a012:	bf49      	itett	mi
 800a014:	085b      	lsrmi	r3, r3, #1
 800a016:	089b      	lsrpl	r3, r3, #2
 800a018:	2001      	movmi	r0, #1
 800a01a:	6013      	strmi	r3, [r2, #0]
 800a01c:	bf5c      	itt	pl
 800a01e:	6013      	strpl	r3, [r2, #0]
 800a020:	2002      	movpl	r0, #2
 800a022:	4770      	bx	lr
 800a024:	b299      	uxth	r1, r3
 800a026:	b909      	cbnz	r1, 800a02c <__lo0bits+0x2a>
 800a028:	0c1b      	lsrs	r3, r3, #16
 800a02a:	2010      	movs	r0, #16
 800a02c:	b2d9      	uxtb	r1, r3
 800a02e:	b909      	cbnz	r1, 800a034 <__lo0bits+0x32>
 800a030:	3008      	adds	r0, #8
 800a032:	0a1b      	lsrs	r3, r3, #8
 800a034:	0719      	lsls	r1, r3, #28
 800a036:	bf04      	itt	eq
 800a038:	091b      	lsreq	r3, r3, #4
 800a03a:	3004      	addeq	r0, #4
 800a03c:	0799      	lsls	r1, r3, #30
 800a03e:	bf04      	itt	eq
 800a040:	089b      	lsreq	r3, r3, #2
 800a042:	3002      	addeq	r0, #2
 800a044:	07d9      	lsls	r1, r3, #31
 800a046:	d403      	bmi.n	800a050 <__lo0bits+0x4e>
 800a048:	085b      	lsrs	r3, r3, #1
 800a04a:	f100 0001 	add.w	r0, r0, #1
 800a04e:	d003      	beq.n	800a058 <__lo0bits+0x56>
 800a050:	6013      	str	r3, [r2, #0]
 800a052:	4770      	bx	lr
 800a054:	2000      	movs	r0, #0
 800a056:	4770      	bx	lr
 800a058:	2020      	movs	r0, #32
 800a05a:	4770      	bx	lr

0800a05c <__i2b>:
 800a05c:	b510      	push	{r4, lr}
 800a05e:	460c      	mov	r4, r1
 800a060:	2101      	movs	r1, #1
 800a062:	f7ff febd 	bl	8009de0 <_Balloc>
 800a066:	4602      	mov	r2, r0
 800a068:	b928      	cbnz	r0, 800a076 <__i2b+0x1a>
 800a06a:	4b05      	ldr	r3, [pc, #20]	@ (800a080 <__i2b+0x24>)
 800a06c:	4805      	ldr	r0, [pc, #20]	@ (800a084 <__i2b+0x28>)
 800a06e:	f240 1145 	movw	r1, #325	@ 0x145
 800a072:	f000 fff3 	bl	800b05c <__assert_func>
 800a076:	2301      	movs	r3, #1
 800a078:	6144      	str	r4, [r0, #20]
 800a07a:	6103      	str	r3, [r0, #16]
 800a07c:	bd10      	pop	{r4, pc}
 800a07e:	bf00      	nop
 800a080:	0800b83d 	.word	0x0800b83d
 800a084:	0800b8ae 	.word	0x0800b8ae

0800a088 <__multiply>:
 800a088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a08c:	4614      	mov	r4, r2
 800a08e:	690a      	ldr	r2, [r1, #16]
 800a090:	6923      	ldr	r3, [r4, #16]
 800a092:	429a      	cmp	r2, r3
 800a094:	bfa8      	it	ge
 800a096:	4623      	movge	r3, r4
 800a098:	460f      	mov	r7, r1
 800a09a:	bfa4      	itt	ge
 800a09c:	460c      	movge	r4, r1
 800a09e:	461f      	movge	r7, r3
 800a0a0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a0a4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a0a8:	68a3      	ldr	r3, [r4, #8]
 800a0aa:	6861      	ldr	r1, [r4, #4]
 800a0ac:	eb0a 0609 	add.w	r6, sl, r9
 800a0b0:	42b3      	cmp	r3, r6
 800a0b2:	b085      	sub	sp, #20
 800a0b4:	bfb8      	it	lt
 800a0b6:	3101      	addlt	r1, #1
 800a0b8:	f7ff fe92 	bl	8009de0 <_Balloc>
 800a0bc:	b930      	cbnz	r0, 800a0cc <__multiply+0x44>
 800a0be:	4602      	mov	r2, r0
 800a0c0:	4b44      	ldr	r3, [pc, #272]	@ (800a1d4 <__multiply+0x14c>)
 800a0c2:	4845      	ldr	r0, [pc, #276]	@ (800a1d8 <__multiply+0x150>)
 800a0c4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a0c8:	f000 ffc8 	bl	800b05c <__assert_func>
 800a0cc:	f100 0514 	add.w	r5, r0, #20
 800a0d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a0d4:	462b      	mov	r3, r5
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	4543      	cmp	r3, r8
 800a0da:	d321      	bcc.n	800a120 <__multiply+0x98>
 800a0dc:	f107 0114 	add.w	r1, r7, #20
 800a0e0:	f104 0214 	add.w	r2, r4, #20
 800a0e4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a0e8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a0ec:	9302      	str	r3, [sp, #8]
 800a0ee:	1b13      	subs	r3, r2, r4
 800a0f0:	3b15      	subs	r3, #21
 800a0f2:	f023 0303 	bic.w	r3, r3, #3
 800a0f6:	3304      	adds	r3, #4
 800a0f8:	f104 0715 	add.w	r7, r4, #21
 800a0fc:	42ba      	cmp	r2, r7
 800a0fe:	bf38      	it	cc
 800a100:	2304      	movcc	r3, #4
 800a102:	9301      	str	r3, [sp, #4]
 800a104:	9b02      	ldr	r3, [sp, #8]
 800a106:	9103      	str	r1, [sp, #12]
 800a108:	428b      	cmp	r3, r1
 800a10a:	d80c      	bhi.n	800a126 <__multiply+0x9e>
 800a10c:	2e00      	cmp	r6, #0
 800a10e:	dd03      	ble.n	800a118 <__multiply+0x90>
 800a110:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a114:	2b00      	cmp	r3, #0
 800a116:	d05b      	beq.n	800a1d0 <__multiply+0x148>
 800a118:	6106      	str	r6, [r0, #16]
 800a11a:	b005      	add	sp, #20
 800a11c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a120:	f843 2b04 	str.w	r2, [r3], #4
 800a124:	e7d8      	b.n	800a0d8 <__multiply+0x50>
 800a126:	f8b1 a000 	ldrh.w	sl, [r1]
 800a12a:	f1ba 0f00 	cmp.w	sl, #0
 800a12e:	d024      	beq.n	800a17a <__multiply+0xf2>
 800a130:	f104 0e14 	add.w	lr, r4, #20
 800a134:	46a9      	mov	r9, r5
 800a136:	f04f 0c00 	mov.w	ip, #0
 800a13a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a13e:	f8d9 3000 	ldr.w	r3, [r9]
 800a142:	fa1f fb87 	uxth.w	fp, r7
 800a146:	b29b      	uxth	r3, r3
 800a148:	fb0a 330b 	mla	r3, sl, fp, r3
 800a14c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a150:	f8d9 7000 	ldr.w	r7, [r9]
 800a154:	4463      	add	r3, ip
 800a156:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a15a:	fb0a c70b 	mla	r7, sl, fp, ip
 800a15e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a162:	b29b      	uxth	r3, r3
 800a164:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a168:	4572      	cmp	r2, lr
 800a16a:	f849 3b04 	str.w	r3, [r9], #4
 800a16e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a172:	d8e2      	bhi.n	800a13a <__multiply+0xb2>
 800a174:	9b01      	ldr	r3, [sp, #4]
 800a176:	f845 c003 	str.w	ip, [r5, r3]
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a180:	3104      	adds	r1, #4
 800a182:	f1b9 0f00 	cmp.w	r9, #0
 800a186:	d021      	beq.n	800a1cc <__multiply+0x144>
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	f104 0c14 	add.w	ip, r4, #20
 800a18e:	46ae      	mov	lr, r5
 800a190:	f04f 0a00 	mov.w	sl, #0
 800a194:	f8bc b000 	ldrh.w	fp, [ip]
 800a198:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a19c:	fb09 770b 	mla	r7, r9, fp, r7
 800a1a0:	4457      	add	r7, sl
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a1a8:	f84e 3b04 	str.w	r3, [lr], #4
 800a1ac:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a1b0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1b4:	f8be 3000 	ldrh.w	r3, [lr]
 800a1b8:	fb09 330a 	mla	r3, r9, sl, r3
 800a1bc:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a1c0:	4562      	cmp	r2, ip
 800a1c2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a1c6:	d8e5      	bhi.n	800a194 <__multiply+0x10c>
 800a1c8:	9f01      	ldr	r7, [sp, #4]
 800a1ca:	51eb      	str	r3, [r5, r7]
 800a1cc:	3504      	adds	r5, #4
 800a1ce:	e799      	b.n	800a104 <__multiply+0x7c>
 800a1d0:	3e01      	subs	r6, #1
 800a1d2:	e79b      	b.n	800a10c <__multiply+0x84>
 800a1d4:	0800b83d 	.word	0x0800b83d
 800a1d8:	0800b8ae 	.word	0x0800b8ae

0800a1dc <__pow5mult>:
 800a1dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1e0:	4615      	mov	r5, r2
 800a1e2:	f012 0203 	ands.w	r2, r2, #3
 800a1e6:	4607      	mov	r7, r0
 800a1e8:	460e      	mov	r6, r1
 800a1ea:	d007      	beq.n	800a1fc <__pow5mult+0x20>
 800a1ec:	4c25      	ldr	r4, [pc, #148]	@ (800a284 <__pow5mult+0xa8>)
 800a1ee:	3a01      	subs	r2, #1
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a1f6:	f7ff fe55 	bl	8009ea4 <__multadd>
 800a1fa:	4606      	mov	r6, r0
 800a1fc:	10ad      	asrs	r5, r5, #2
 800a1fe:	d03d      	beq.n	800a27c <__pow5mult+0xa0>
 800a200:	69fc      	ldr	r4, [r7, #28]
 800a202:	b97c      	cbnz	r4, 800a224 <__pow5mult+0x48>
 800a204:	2010      	movs	r0, #16
 800a206:	f7ff fd23 	bl	8009c50 <malloc>
 800a20a:	4602      	mov	r2, r0
 800a20c:	61f8      	str	r0, [r7, #28]
 800a20e:	b928      	cbnz	r0, 800a21c <__pow5mult+0x40>
 800a210:	4b1d      	ldr	r3, [pc, #116]	@ (800a288 <__pow5mult+0xac>)
 800a212:	481e      	ldr	r0, [pc, #120]	@ (800a28c <__pow5mult+0xb0>)
 800a214:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a218:	f000 ff20 	bl	800b05c <__assert_func>
 800a21c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a220:	6004      	str	r4, [r0, #0]
 800a222:	60c4      	str	r4, [r0, #12]
 800a224:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a228:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a22c:	b94c      	cbnz	r4, 800a242 <__pow5mult+0x66>
 800a22e:	f240 2171 	movw	r1, #625	@ 0x271
 800a232:	4638      	mov	r0, r7
 800a234:	f7ff ff12 	bl	800a05c <__i2b>
 800a238:	2300      	movs	r3, #0
 800a23a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a23e:	4604      	mov	r4, r0
 800a240:	6003      	str	r3, [r0, #0]
 800a242:	f04f 0900 	mov.w	r9, #0
 800a246:	07eb      	lsls	r3, r5, #31
 800a248:	d50a      	bpl.n	800a260 <__pow5mult+0x84>
 800a24a:	4631      	mov	r1, r6
 800a24c:	4622      	mov	r2, r4
 800a24e:	4638      	mov	r0, r7
 800a250:	f7ff ff1a 	bl	800a088 <__multiply>
 800a254:	4631      	mov	r1, r6
 800a256:	4680      	mov	r8, r0
 800a258:	4638      	mov	r0, r7
 800a25a:	f7ff fe01 	bl	8009e60 <_Bfree>
 800a25e:	4646      	mov	r6, r8
 800a260:	106d      	asrs	r5, r5, #1
 800a262:	d00b      	beq.n	800a27c <__pow5mult+0xa0>
 800a264:	6820      	ldr	r0, [r4, #0]
 800a266:	b938      	cbnz	r0, 800a278 <__pow5mult+0x9c>
 800a268:	4622      	mov	r2, r4
 800a26a:	4621      	mov	r1, r4
 800a26c:	4638      	mov	r0, r7
 800a26e:	f7ff ff0b 	bl	800a088 <__multiply>
 800a272:	6020      	str	r0, [r4, #0]
 800a274:	f8c0 9000 	str.w	r9, [r0]
 800a278:	4604      	mov	r4, r0
 800a27a:	e7e4      	b.n	800a246 <__pow5mult+0x6a>
 800a27c:	4630      	mov	r0, r6
 800a27e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a282:	bf00      	nop
 800a284:	0800b908 	.word	0x0800b908
 800a288:	0800b7ce 	.word	0x0800b7ce
 800a28c:	0800b8ae 	.word	0x0800b8ae

0800a290 <__lshift>:
 800a290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a294:	460c      	mov	r4, r1
 800a296:	6849      	ldr	r1, [r1, #4]
 800a298:	6923      	ldr	r3, [r4, #16]
 800a29a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a29e:	68a3      	ldr	r3, [r4, #8]
 800a2a0:	4607      	mov	r7, r0
 800a2a2:	4691      	mov	r9, r2
 800a2a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a2a8:	f108 0601 	add.w	r6, r8, #1
 800a2ac:	42b3      	cmp	r3, r6
 800a2ae:	db0b      	blt.n	800a2c8 <__lshift+0x38>
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	f7ff fd95 	bl	8009de0 <_Balloc>
 800a2b6:	4605      	mov	r5, r0
 800a2b8:	b948      	cbnz	r0, 800a2ce <__lshift+0x3e>
 800a2ba:	4602      	mov	r2, r0
 800a2bc:	4b28      	ldr	r3, [pc, #160]	@ (800a360 <__lshift+0xd0>)
 800a2be:	4829      	ldr	r0, [pc, #164]	@ (800a364 <__lshift+0xd4>)
 800a2c0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a2c4:	f000 feca 	bl	800b05c <__assert_func>
 800a2c8:	3101      	adds	r1, #1
 800a2ca:	005b      	lsls	r3, r3, #1
 800a2cc:	e7ee      	b.n	800a2ac <__lshift+0x1c>
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	f100 0114 	add.w	r1, r0, #20
 800a2d4:	f100 0210 	add.w	r2, r0, #16
 800a2d8:	4618      	mov	r0, r3
 800a2da:	4553      	cmp	r3, sl
 800a2dc:	db33      	blt.n	800a346 <__lshift+0xb6>
 800a2de:	6920      	ldr	r0, [r4, #16]
 800a2e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a2e4:	f104 0314 	add.w	r3, r4, #20
 800a2e8:	f019 091f 	ands.w	r9, r9, #31
 800a2ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a2f0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a2f4:	d02b      	beq.n	800a34e <__lshift+0xbe>
 800a2f6:	f1c9 0e20 	rsb	lr, r9, #32
 800a2fa:	468a      	mov	sl, r1
 800a2fc:	2200      	movs	r2, #0
 800a2fe:	6818      	ldr	r0, [r3, #0]
 800a300:	fa00 f009 	lsl.w	r0, r0, r9
 800a304:	4310      	orrs	r0, r2
 800a306:	f84a 0b04 	str.w	r0, [sl], #4
 800a30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a30e:	459c      	cmp	ip, r3
 800a310:	fa22 f20e 	lsr.w	r2, r2, lr
 800a314:	d8f3      	bhi.n	800a2fe <__lshift+0x6e>
 800a316:	ebac 0304 	sub.w	r3, ip, r4
 800a31a:	3b15      	subs	r3, #21
 800a31c:	f023 0303 	bic.w	r3, r3, #3
 800a320:	3304      	adds	r3, #4
 800a322:	f104 0015 	add.w	r0, r4, #21
 800a326:	4584      	cmp	ip, r0
 800a328:	bf38      	it	cc
 800a32a:	2304      	movcc	r3, #4
 800a32c:	50ca      	str	r2, [r1, r3]
 800a32e:	b10a      	cbz	r2, 800a334 <__lshift+0xa4>
 800a330:	f108 0602 	add.w	r6, r8, #2
 800a334:	3e01      	subs	r6, #1
 800a336:	4638      	mov	r0, r7
 800a338:	612e      	str	r6, [r5, #16]
 800a33a:	4621      	mov	r1, r4
 800a33c:	f7ff fd90 	bl	8009e60 <_Bfree>
 800a340:	4628      	mov	r0, r5
 800a342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a346:	f842 0f04 	str.w	r0, [r2, #4]!
 800a34a:	3301      	adds	r3, #1
 800a34c:	e7c5      	b.n	800a2da <__lshift+0x4a>
 800a34e:	3904      	subs	r1, #4
 800a350:	f853 2b04 	ldr.w	r2, [r3], #4
 800a354:	f841 2f04 	str.w	r2, [r1, #4]!
 800a358:	459c      	cmp	ip, r3
 800a35a:	d8f9      	bhi.n	800a350 <__lshift+0xc0>
 800a35c:	e7ea      	b.n	800a334 <__lshift+0xa4>
 800a35e:	bf00      	nop
 800a360:	0800b83d 	.word	0x0800b83d
 800a364:	0800b8ae 	.word	0x0800b8ae

0800a368 <__mcmp>:
 800a368:	690a      	ldr	r2, [r1, #16]
 800a36a:	4603      	mov	r3, r0
 800a36c:	6900      	ldr	r0, [r0, #16]
 800a36e:	1a80      	subs	r0, r0, r2
 800a370:	b530      	push	{r4, r5, lr}
 800a372:	d10e      	bne.n	800a392 <__mcmp+0x2a>
 800a374:	3314      	adds	r3, #20
 800a376:	3114      	adds	r1, #20
 800a378:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a37c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a380:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a384:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a388:	4295      	cmp	r5, r2
 800a38a:	d003      	beq.n	800a394 <__mcmp+0x2c>
 800a38c:	d205      	bcs.n	800a39a <__mcmp+0x32>
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295
 800a392:	bd30      	pop	{r4, r5, pc}
 800a394:	42a3      	cmp	r3, r4
 800a396:	d3f3      	bcc.n	800a380 <__mcmp+0x18>
 800a398:	e7fb      	b.n	800a392 <__mcmp+0x2a>
 800a39a:	2001      	movs	r0, #1
 800a39c:	e7f9      	b.n	800a392 <__mcmp+0x2a>
	...

0800a3a0 <__mdiff>:
 800a3a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3a4:	4689      	mov	r9, r1
 800a3a6:	4606      	mov	r6, r0
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	4648      	mov	r0, r9
 800a3ac:	4614      	mov	r4, r2
 800a3ae:	f7ff ffdb 	bl	800a368 <__mcmp>
 800a3b2:	1e05      	subs	r5, r0, #0
 800a3b4:	d112      	bne.n	800a3dc <__mdiff+0x3c>
 800a3b6:	4629      	mov	r1, r5
 800a3b8:	4630      	mov	r0, r6
 800a3ba:	f7ff fd11 	bl	8009de0 <_Balloc>
 800a3be:	4602      	mov	r2, r0
 800a3c0:	b928      	cbnz	r0, 800a3ce <__mdiff+0x2e>
 800a3c2:	4b3f      	ldr	r3, [pc, #252]	@ (800a4c0 <__mdiff+0x120>)
 800a3c4:	f240 2137 	movw	r1, #567	@ 0x237
 800a3c8:	483e      	ldr	r0, [pc, #248]	@ (800a4c4 <__mdiff+0x124>)
 800a3ca:	f000 fe47 	bl	800b05c <__assert_func>
 800a3ce:	2301      	movs	r3, #1
 800a3d0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a3d4:	4610      	mov	r0, r2
 800a3d6:	b003      	add	sp, #12
 800a3d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3dc:	bfbc      	itt	lt
 800a3de:	464b      	movlt	r3, r9
 800a3e0:	46a1      	movlt	r9, r4
 800a3e2:	4630      	mov	r0, r6
 800a3e4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a3e8:	bfba      	itte	lt
 800a3ea:	461c      	movlt	r4, r3
 800a3ec:	2501      	movlt	r5, #1
 800a3ee:	2500      	movge	r5, #0
 800a3f0:	f7ff fcf6 	bl	8009de0 <_Balloc>
 800a3f4:	4602      	mov	r2, r0
 800a3f6:	b918      	cbnz	r0, 800a400 <__mdiff+0x60>
 800a3f8:	4b31      	ldr	r3, [pc, #196]	@ (800a4c0 <__mdiff+0x120>)
 800a3fa:	f240 2145 	movw	r1, #581	@ 0x245
 800a3fe:	e7e3      	b.n	800a3c8 <__mdiff+0x28>
 800a400:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a404:	6926      	ldr	r6, [r4, #16]
 800a406:	60c5      	str	r5, [r0, #12]
 800a408:	f109 0310 	add.w	r3, r9, #16
 800a40c:	f109 0514 	add.w	r5, r9, #20
 800a410:	f104 0e14 	add.w	lr, r4, #20
 800a414:	f100 0b14 	add.w	fp, r0, #20
 800a418:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a41c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a420:	9301      	str	r3, [sp, #4]
 800a422:	46d9      	mov	r9, fp
 800a424:	f04f 0c00 	mov.w	ip, #0
 800a428:	9b01      	ldr	r3, [sp, #4]
 800a42a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a42e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a432:	9301      	str	r3, [sp, #4]
 800a434:	fa1f f38a 	uxth.w	r3, sl
 800a438:	4619      	mov	r1, r3
 800a43a:	b283      	uxth	r3, r0
 800a43c:	1acb      	subs	r3, r1, r3
 800a43e:	0c00      	lsrs	r0, r0, #16
 800a440:	4463      	add	r3, ip
 800a442:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a446:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a450:	4576      	cmp	r6, lr
 800a452:	f849 3b04 	str.w	r3, [r9], #4
 800a456:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a45a:	d8e5      	bhi.n	800a428 <__mdiff+0x88>
 800a45c:	1b33      	subs	r3, r6, r4
 800a45e:	3b15      	subs	r3, #21
 800a460:	f023 0303 	bic.w	r3, r3, #3
 800a464:	3415      	adds	r4, #21
 800a466:	3304      	adds	r3, #4
 800a468:	42a6      	cmp	r6, r4
 800a46a:	bf38      	it	cc
 800a46c:	2304      	movcc	r3, #4
 800a46e:	441d      	add	r5, r3
 800a470:	445b      	add	r3, fp
 800a472:	461e      	mov	r6, r3
 800a474:	462c      	mov	r4, r5
 800a476:	4544      	cmp	r4, r8
 800a478:	d30e      	bcc.n	800a498 <__mdiff+0xf8>
 800a47a:	f108 0103 	add.w	r1, r8, #3
 800a47e:	1b49      	subs	r1, r1, r5
 800a480:	f021 0103 	bic.w	r1, r1, #3
 800a484:	3d03      	subs	r5, #3
 800a486:	45a8      	cmp	r8, r5
 800a488:	bf38      	it	cc
 800a48a:	2100      	movcc	r1, #0
 800a48c:	440b      	add	r3, r1
 800a48e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a492:	b191      	cbz	r1, 800a4ba <__mdiff+0x11a>
 800a494:	6117      	str	r7, [r2, #16]
 800a496:	e79d      	b.n	800a3d4 <__mdiff+0x34>
 800a498:	f854 1b04 	ldr.w	r1, [r4], #4
 800a49c:	46e6      	mov	lr, ip
 800a49e:	0c08      	lsrs	r0, r1, #16
 800a4a0:	fa1c fc81 	uxtah	ip, ip, r1
 800a4a4:	4471      	add	r1, lr
 800a4a6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a4aa:	b289      	uxth	r1, r1
 800a4ac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a4b0:	f846 1b04 	str.w	r1, [r6], #4
 800a4b4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a4b8:	e7dd      	b.n	800a476 <__mdiff+0xd6>
 800a4ba:	3f01      	subs	r7, #1
 800a4bc:	e7e7      	b.n	800a48e <__mdiff+0xee>
 800a4be:	bf00      	nop
 800a4c0:	0800b83d 	.word	0x0800b83d
 800a4c4:	0800b8ae 	.word	0x0800b8ae

0800a4c8 <__ulp>:
 800a4c8:	b082      	sub	sp, #8
 800a4ca:	ed8d 0b00 	vstr	d0, [sp]
 800a4ce:	9a01      	ldr	r2, [sp, #4]
 800a4d0:	4b0f      	ldr	r3, [pc, #60]	@ (800a510 <__ulp+0x48>)
 800a4d2:	4013      	ands	r3, r2
 800a4d4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	dc08      	bgt.n	800a4ee <__ulp+0x26>
 800a4dc:	425b      	negs	r3, r3
 800a4de:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800a4e2:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a4e6:	da04      	bge.n	800a4f2 <__ulp+0x2a>
 800a4e8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800a4ec:	4113      	asrs	r3, r2
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	e008      	b.n	800a504 <__ulp+0x3c>
 800a4f2:	f1a2 0314 	sub.w	r3, r2, #20
 800a4f6:	2b1e      	cmp	r3, #30
 800a4f8:	bfda      	itte	le
 800a4fa:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800a4fe:	40da      	lsrle	r2, r3
 800a500:	2201      	movgt	r2, #1
 800a502:	2300      	movs	r3, #0
 800a504:	4619      	mov	r1, r3
 800a506:	4610      	mov	r0, r2
 800a508:	ec41 0b10 	vmov	d0, r0, r1
 800a50c:	b002      	add	sp, #8
 800a50e:	4770      	bx	lr
 800a510:	7ff00000 	.word	0x7ff00000

0800a514 <__b2d>:
 800a514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a518:	6906      	ldr	r6, [r0, #16]
 800a51a:	f100 0814 	add.w	r8, r0, #20
 800a51e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800a522:	1f37      	subs	r7, r6, #4
 800a524:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a528:	4610      	mov	r0, r2
 800a52a:	f7ff fd4b 	bl	8009fc4 <__hi0bits>
 800a52e:	f1c0 0320 	rsb	r3, r0, #32
 800a532:	280a      	cmp	r0, #10
 800a534:	600b      	str	r3, [r1, #0]
 800a536:	491b      	ldr	r1, [pc, #108]	@ (800a5a4 <__b2d+0x90>)
 800a538:	dc15      	bgt.n	800a566 <__b2d+0x52>
 800a53a:	f1c0 0c0b 	rsb	ip, r0, #11
 800a53e:	fa22 f30c 	lsr.w	r3, r2, ip
 800a542:	45b8      	cmp	r8, r7
 800a544:	ea43 0501 	orr.w	r5, r3, r1
 800a548:	bf34      	ite	cc
 800a54a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a54e:	2300      	movcs	r3, #0
 800a550:	3015      	adds	r0, #21
 800a552:	fa02 f000 	lsl.w	r0, r2, r0
 800a556:	fa23 f30c 	lsr.w	r3, r3, ip
 800a55a:	4303      	orrs	r3, r0
 800a55c:	461c      	mov	r4, r3
 800a55e:	ec45 4b10 	vmov	d0, r4, r5
 800a562:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a566:	45b8      	cmp	r8, r7
 800a568:	bf3a      	itte	cc
 800a56a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800a56e:	f1a6 0708 	subcc.w	r7, r6, #8
 800a572:	2300      	movcs	r3, #0
 800a574:	380b      	subs	r0, #11
 800a576:	d012      	beq.n	800a59e <__b2d+0x8a>
 800a578:	f1c0 0120 	rsb	r1, r0, #32
 800a57c:	fa23 f401 	lsr.w	r4, r3, r1
 800a580:	4082      	lsls	r2, r0
 800a582:	4322      	orrs	r2, r4
 800a584:	4547      	cmp	r7, r8
 800a586:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800a58a:	bf8c      	ite	hi
 800a58c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800a590:	2200      	movls	r2, #0
 800a592:	4083      	lsls	r3, r0
 800a594:	40ca      	lsrs	r2, r1
 800a596:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800a59a:	4313      	orrs	r3, r2
 800a59c:	e7de      	b.n	800a55c <__b2d+0x48>
 800a59e:	ea42 0501 	orr.w	r5, r2, r1
 800a5a2:	e7db      	b.n	800a55c <__b2d+0x48>
 800a5a4:	3ff00000 	.word	0x3ff00000

0800a5a8 <__d2b>:
 800a5a8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a5ac:	460f      	mov	r7, r1
 800a5ae:	2101      	movs	r1, #1
 800a5b0:	ec59 8b10 	vmov	r8, r9, d0
 800a5b4:	4616      	mov	r6, r2
 800a5b6:	f7ff fc13 	bl	8009de0 <_Balloc>
 800a5ba:	4604      	mov	r4, r0
 800a5bc:	b930      	cbnz	r0, 800a5cc <__d2b+0x24>
 800a5be:	4602      	mov	r2, r0
 800a5c0:	4b23      	ldr	r3, [pc, #140]	@ (800a650 <__d2b+0xa8>)
 800a5c2:	4824      	ldr	r0, [pc, #144]	@ (800a654 <__d2b+0xac>)
 800a5c4:	f240 310f 	movw	r1, #783	@ 0x30f
 800a5c8:	f000 fd48 	bl	800b05c <__assert_func>
 800a5cc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a5d0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a5d4:	b10d      	cbz	r5, 800a5da <__d2b+0x32>
 800a5d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a5da:	9301      	str	r3, [sp, #4]
 800a5dc:	f1b8 0300 	subs.w	r3, r8, #0
 800a5e0:	d023      	beq.n	800a62a <__d2b+0x82>
 800a5e2:	4668      	mov	r0, sp
 800a5e4:	9300      	str	r3, [sp, #0]
 800a5e6:	f7ff fd0c 	bl	800a002 <__lo0bits>
 800a5ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a5ee:	b1d0      	cbz	r0, 800a626 <__d2b+0x7e>
 800a5f0:	f1c0 0320 	rsb	r3, r0, #32
 800a5f4:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f8:	430b      	orrs	r3, r1
 800a5fa:	40c2      	lsrs	r2, r0
 800a5fc:	6163      	str	r3, [r4, #20]
 800a5fe:	9201      	str	r2, [sp, #4]
 800a600:	9b01      	ldr	r3, [sp, #4]
 800a602:	61a3      	str	r3, [r4, #24]
 800a604:	2b00      	cmp	r3, #0
 800a606:	bf0c      	ite	eq
 800a608:	2201      	moveq	r2, #1
 800a60a:	2202      	movne	r2, #2
 800a60c:	6122      	str	r2, [r4, #16]
 800a60e:	b1a5      	cbz	r5, 800a63a <__d2b+0x92>
 800a610:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a614:	4405      	add	r5, r0
 800a616:	603d      	str	r5, [r7, #0]
 800a618:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a61c:	6030      	str	r0, [r6, #0]
 800a61e:	4620      	mov	r0, r4
 800a620:	b003      	add	sp, #12
 800a622:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a626:	6161      	str	r1, [r4, #20]
 800a628:	e7ea      	b.n	800a600 <__d2b+0x58>
 800a62a:	a801      	add	r0, sp, #4
 800a62c:	f7ff fce9 	bl	800a002 <__lo0bits>
 800a630:	9b01      	ldr	r3, [sp, #4]
 800a632:	6163      	str	r3, [r4, #20]
 800a634:	3020      	adds	r0, #32
 800a636:	2201      	movs	r2, #1
 800a638:	e7e8      	b.n	800a60c <__d2b+0x64>
 800a63a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a63e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a642:	6038      	str	r0, [r7, #0]
 800a644:	6918      	ldr	r0, [r3, #16]
 800a646:	f7ff fcbd 	bl	8009fc4 <__hi0bits>
 800a64a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a64e:	e7e5      	b.n	800a61c <__d2b+0x74>
 800a650:	0800b83d 	.word	0x0800b83d
 800a654:	0800b8ae 	.word	0x0800b8ae

0800a658 <__ratio>:
 800a658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a65c:	b085      	sub	sp, #20
 800a65e:	e9cd 1000 	strd	r1, r0, [sp]
 800a662:	a902      	add	r1, sp, #8
 800a664:	f7ff ff56 	bl	800a514 <__b2d>
 800a668:	9800      	ldr	r0, [sp, #0]
 800a66a:	a903      	add	r1, sp, #12
 800a66c:	ec55 4b10 	vmov	r4, r5, d0
 800a670:	f7ff ff50 	bl	800a514 <__b2d>
 800a674:	9b01      	ldr	r3, [sp, #4]
 800a676:	6919      	ldr	r1, [r3, #16]
 800a678:	9b00      	ldr	r3, [sp, #0]
 800a67a:	691b      	ldr	r3, [r3, #16]
 800a67c:	1ac9      	subs	r1, r1, r3
 800a67e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800a682:	1a9b      	subs	r3, r3, r2
 800a684:	ec5b ab10 	vmov	sl, fp, d0
 800a688:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	bfce      	itee	gt
 800a690:	462a      	movgt	r2, r5
 800a692:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800a696:	465a      	movle	r2, fp
 800a698:	462f      	mov	r7, r5
 800a69a:	46d9      	mov	r9, fp
 800a69c:	bfcc      	ite	gt
 800a69e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800a6a2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800a6a6:	464b      	mov	r3, r9
 800a6a8:	4652      	mov	r2, sl
 800a6aa:	4620      	mov	r0, r4
 800a6ac:	4639      	mov	r1, r7
 800a6ae:	f7f6 f8cd 	bl	800084c <__aeabi_ddiv>
 800a6b2:	ec41 0b10 	vmov	d0, r0, r1
 800a6b6:	b005      	add	sp, #20
 800a6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a6bc <__copybits>:
 800a6bc:	3901      	subs	r1, #1
 800a6be:	b570      	push	{r4, r5, r6, lr}
 800a6c0:	1149      	asrs	r1, r1, #5
 800a6c2:	6914      	ldr	r4, [r2, #16]
 800a6c4:	3101      	adds	r1, #1
 800a6c6:	f102 0314 	add.w	r3, r2, #20
 800a6ca:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800a6ce:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800a6d2:	1f05      	subs	r5, r0, #4
 800a6d4:	42a3      	cmp	r3, r4
 800a6d6:	d30c      	bcc.n	800a6f2 <__copybits+0x36>
 800a6d8:	1aa3      	subs	r3, r4, r2
 800a6da:	3b11      	subs	r3, #17
 800a6dc:	f023 0303 	bic.w	r3, r3, #3
 800a6e0:	3211      	adds	r2, #17
 800a6e2:	42a2      	cmp	r2, r4
 800a6e4:	bf88      	it	hi
 800a6e6:	2300      	movhi	r3, #0
 800a6e8:	4418      	add	r0, r3
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	4288      	cmp	r0, r1
 800a6ee:	d305      	bcc.n	800a6fc <__copybits+0x40>
 800a6f0:	bd70      	pop	{r4, r5, r6, pc}
 800a6f2:	f853 6b04 	ldr.w	r6, [r3], #4
 800a6f6:	f845 6f04 	str.w	r6, [r5, #4]!
 800a6fa:	e7eb      	b.n	800a6d4 <__copybits+0x18>
 800a6fc:	f840 3b04 	str.w	r3, [r0], #4
 800a700:	e7f4      	b.n	800a6ec <__copybits+0x30>

0800a702 <__any_on>:
 800a702:	f100 0214 	add.w	r2, r0, #20
 800a706:	6900      	ldr	r0, [r0, #16]
 800a708:	114b      	asrs	r3, r1, #5
 800a70a:	4298      	cmp	r0, r3
 800a70c:	b510      	push	{r4, lr}
 800a70e:	db11      	blt.n	800a734 <__any_on+0x32>
 800a710:	dd0a      	ble.n	800a728 <__any_on+0x26>
 800a712:	f011 011f 	ands.w	r1, r1, #31
 800a716:	d007      	beq.n	800a728 <__any_on+0x26>
 800a718:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800a71c:	fa24 f001 	lsr.w	r0, r4, r1
 800a720:	fa00 f101 	lsl.w	r1, r0, r1
 800a724:	428c      	cmp	r4, r1
 800a726:	d10b      	bne.n	800a740 <__any_on+0x3e>
 800a728:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d803      	bhi.n	800a738 <__any_on+0x36>
 800a730:	2000      	movs	r0, #0
 800a732:	bd10      	pop	{r4, pc}
 800a734:	4603      	mov	r3, r0
 800a736:	e7f7      	b.n	800a728 <__any_on+0x26>
 800a738:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a73c:	2900      	cmp	r1, #0
 800a73e:	d0f5      	beq.n	800a72c <__any_on+0x2a>
 800a740:	2001      	movs	r0, #1
 800a742:	e7f6      	b.n	800a732 <__any_on+0x30>

0800a744 <_strtol_l.constprop.0>:
 800a744:	2b24      	cmp	r3, #36	@ 0x24
 800a746:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a74a:	4686      	mov	lr, r0
 800a74c:	4690      	mov	r8, r2
 800a74e:	d801      	bhi.n	800a754 <_strtol_l.constprop.0+0x10>
 800a750:	2b01      	cmp	r3, #1
 800a752:	d106      	bne.n	800a762 <_strtol_l.constprop.0+0x1e>
 800a754:	f7fe f85e 	bl	8008814 <__errno>
 800a758:	2316      	movs	r3, #22
 800a75a:	6003      	str	r3, [r0, #0]
 800a75c:	2000      	movs	r0, #0
 800a75e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a762:	4834      	ldr	r0, [pc, #208]	@ (800a834 <_strtol_l.constprop.0+0xf0>)
 800a764:	460d      	mov	r5, r1
 800a766:	462a      	mov	r2, r5
 800a768:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a76c:	5d06      	ldrb	r6, [r0, r4]
 800a76e:	f016 0608 	ands.w	r6, r6, #8
 800a772:	d1f8      	bne.n	800a766 <_strtol_l.constprop.0+0x22>
 800a774:	2c2d      	cmp	r4, #45	@ 0x2d
 800a776:	d12d      	bne.n	800a7d4 <_strtol_l.constprop.0+0x90>
 800a778:	782c      	ldrb	r4, [r5, #0]
 800a77a:	2601      	movs	r6, #1
 800a77c:	1c95      	adds	r5, r2, #2
 800a77e:	f033 0210 	bics.w	r2, r3, #16
 800a782:	d109      	bne.n	800a798 <_strtol_l.constprop.0+0x54>
 800a784:	2c30      	cmp	r4, #48	@ 0x30
 800a786:	d12a      	bne.n	800a7de <_strtol_l.constprop.0+0x9a>
 800a788:	782a      	ldrb	r2, [r5, #0]
 800a78a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a78e:	2a58      	cmp	r2, #88	@ 0x58
 800a790:	d125      	bne.n	800a7de <_strtol_l.constprop.0+0x9a>
 800a792:	786c      	ldrb	r4, [r5, #1]
 800a794:	2310      	movs	r3, #16
 800a796:	3502      	adds	r5, #2
 800a798:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a79c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	fbbc f9f3 	udiv	r9, ip, r3
 800a7a6:	4610      	mov	r0, r2
 800a7a8:	fb03 ca19 	mls	sl, r3, r9, ip
 800a7ac:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a7b0:	2f09      	cmp	r7, #9
 800a7b2:	d81b      	bhi.n	800a7ec <_strtol_l.constprop.0+0xa8>
 800a7b4:	463c      	mov	r4, r7
 800a7b6:	42a3      	cmp	r3, r4
 800a7b8:	dd27      	ble.n	800a80a <_strtol_l.constprop.0+0xc6>
 800a7ba:	1c57      	adds	r7, r2, #1
 800a7bc:	d007      	beq.n	800a7ce <_strtol_l.constprop.0+0x8a>
 800a7be:	4581      	cmp	r9, r0
 800a7c0:	d320      	bcc.n	800a804 <_strtol_l.constprop.0+0xc0>
 800a7c2:	d101      	bne.n	800a7c8 <_strtol_l.constprop.0+0x84>
 800a7c4:	45a2      	cmp	sl, r4
 800a7c6:	db1d      	blt.n	800a804 <_strtol_l.constprop.0+0xc0>
 800a7c8:	fb00 4003 	mla	r0, r0, r3, r4
 800a7cc:	2201      	movs	r2, #1
 800a7ce:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a7d2:	e7eb      	b.n	800a7ac <_strtol_l.constprop.0+0x68>
 800a7d4:	2c2b      	cmp	r4, #43	@ 0x2b
 800a7d6:	bf04      	itt	eq
 800a7d8:	782c      	ldrbeq	r4, [r5, #0]
 800a7da:	1c95      	addeq	r5, r2, #2
 800a7dc:	e7cf      	b.n	800a77e <_strtol_l.constprop.0+0x3a>
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d1da      	bne.n	800a798 <_strtol_l.constprop.0+0x54>
 800a7e2:	2c30      	cmp	r4, #48	@ 0x30
 800a7e4:	bf0c      	ite	eq
 800a7e6:	2308      	moveq	r3, #8
 800a7e8:	230a      	movne	r3, #10
 800a7ea:	e7d5      	b.n	800a798 <_strtol_l.constprop.0+0x54>
 800a7ec:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a7f0:	2f19      	cmp	r7, #25
 800a7f2:	d801      	bhi.n	800a7f8 <_strtol_l.constprop.0+0xb4>
 800a7f4:	3c37      	subs	r4, #55	@ 0x37
 800a7f6:	e7de      	b.n	800a7b6 <_strtol_l.constprop.0+0x72>
 800a7f8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a7fc:	2f19      	cmp	r7, #25
 800a7fe:	d804      	bhi.n	800a80a <_strtol_l.constprop.0+0xc6>
 800a800:	3c57      	subs	r4, #87	@ 0x57
 800a802:	e7d8      	b.n	800a7b6 <_strtol_l.constprop.0+0x72>
 800a804:	f04f 32ff 	mov.w	r2, #4294967295
 800a808:	e7e1      	b.n	800a7ce <_strtol_l.constprop.0+0x8a>
 800a80a:	1c53      	adds	r3, r2, #1
 800a80c:	d108      	bne.n	800a820 <_strtol_l.constprop.0+0xdc>
 800a80e:	2322      	movs	r3, #34	@ 0x22
 800a810:	f8ce 3000 	str.w	r3, [lr]
 800a814:	4660      	mov	r0, ip
 800a816:	f1b8 0f00 	cmp.w	r8, #0
 800a81a:	d0a0      	beq.n	800a75e <_strtol_l.constprop.0+0x1a>
 800a81c:	1e69      	subs	r1, r5, #1
 800a81e:	e006      	b.n	800a82e <_strtol_l.constprop.0+0xea>
 800a820:	b106      	cbz	r6, 800a824 <_strtol_l.constprop.0+0xe0>
 800a822:	4240      	negs	r0, r0
 800a824:	f1b8 0f00 	cmp.w	r8, #0
 800a828:	d099      	beq.n	800a75e <_strtol_l.constprop.0+0x1a>
 800a82a:	2a00      	cmp	r2, #0
 800a82c:	d1f6      	bne.n	800a81c <_strtol_l.constprop.0+0xd8>
 800a82e:	f8c8 1000 	str.w	r1, [r8]
 800a832:	e794      	b.n	800a75e <_strtol_l.constprop.0+0x1a>
 800a834:	0800ba09 	.word	0x0800ba09

0800a838 <_strtol_r>:
 800a838:	f7ff bf84 	b.w	800a744 <_strtol_l.constprop.0>

0800a83c <__ascii_wctomb>:
 800a83c:	4603      	mov	r3, r0
 800a83e:	4608      	mov	r0, r1
 800a840:	b141      	cbz	r1, 800a854 <__ascii_wctomb+0x18>
 800a842:	2aff      	cmp	r2, #255	@ 0xff
 800a844:	d904      	bls.n	800a850 <__ascii_wctomb+0x14>
 800a846:	228a      	movs	r2, #138	@ 0x8a
 800a848:	601a      	str	r2, [r3, #0]
 800a84a:	f04f 30ff 	mov.w	r0, #4294967295
 800a84e:	4770      	bx	lr
 800a850:	700a      	strb	r2, [r1, #0]
 800a852:	2001      	movs	r0, #1
 800a854:	4770      	bx	lr

0800a856 <__ssputs_r>:
 800a856:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a85a:	688e      	ldr	r6, [r1, #8]
 800a85c:	461f      	mov	r7, r3
 800a85e:	42be      	cmp	r6, r7
 800a860:	680b      	ldr	r3, [r1, #0]
 800a862:	4682      	mov	sl, r0
 800a864:	460c      	mov	r4, r1
 800a866:	4690      	mov	r8, r2
 800a868:	d82d      	bhi.n	800a8c6 <__ssputs_r+0x70>
 800a86a:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a86e:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a872:	d026      	beq.n	800a8c2 <__ssputs_r+0x6c>
 800a874:	6965      	ldr	r5, [r4, #20]
 800a876:	6909      	ldr	r1, [r1, #16]
 800a878:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a87c:	eba3 0901 	sub.w	r9, r3, r1
 800a880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a884:	1c7b      	adds	r3, r7, #1
 800a886:	444b      	add	r3, r9
 800a888:	106d      	asrs	r5, r5, #1
 800a88a:	429d      	cmp	r5, r3
 800a88c:	bf38      	it	cc
 800a88e:	461d      	movcc	r5, r3
 800a890:	0553      	lsls	r3, r2, #21
 800a892:	d527      	bpl.n	800a8e4 <__ssputs_r+0x8e>
 800a894:	4629      	mov	r1, r5
 800a896:	f7ff fa05 	bl	8009ca4 <_malloc_r>
 800a89a:	4606      	mov	r6, r0
 800a89c:	b360      	cbz	r0, 800a8f8 <__ssputs_r+0xa2>
 800a89e:	6921      	ldr	r1, [r4, #16]
 800a8a0:	464a      	mov	r2, r9
 800a8a2:	f7fd ffe4 	bl	800886e <memcpy>
 800a8a6:	89a3      	ldrh	r3, [r4, #12]
 800a8a8:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a8ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a8b0:	81a3      	strh	r3, [r4, #12]
 800a8b2:	6126      	str	r6, [r4, #16]
 800a8b4:	6165      	str	r5, [r4, #20]
 800a8b6:	444e      	add	r6, r9
 800a8b8:	eba5 0509 	sub.w	r5, r5, r9
 800a8bc:	6026      	str	r6, [r4, #0]
 800a8be:	60a5      	str	r5, [r4, #8]
 800a8c0:	463e      	mov	r6, r7
 800a8c2:	42be      	cmp	r6, r7
 800a8c4:	d900      	bls.n	800a8c8 <__ssputs_r+0x72>
 800a8c6:	463e      	mov	r6, r7
 800a8c8:	6820      	ldr	r0, [r4, #0]
 800a8ca:	4632      	mov	r2, r6
 800a8cc:	4641      	mov	r1, r8
 800a8ce:	f000 fb9b 	bl	800b008 <memmove>
 800a8d2:	68a3      	ldr	r3, [r4, #8]
 800a8d4:	1b9b      	subs	r3, r3, r6
 800a8d6:	60a3      	str	r3, [r4, #8]
 800a8d8:	6823      	ldr	r3, [r4, #0]
 800a8da:	4433      	add	r3, r6
 800a8dc:	6023      	str	r3, [r4, #0]
 800a8de:	2000      	movs	r0, #0
 800a8e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a8e4:	462a      	mov	r2, r5
 800a8e6:	f000 fbeb 	bl	800b0c0 <_realloc_r>
 800a8ea:	4606      	mov	r6, r0
 800a8ec:	2800      	cmp	r0, #0
 800a8ee:	d1e0      	bne.n	800a8b2 <__ssputs_r+0x5c>
 800a8f0:	6921      	ldr	r1, [r4, #16]
 800a8f2:	4650      	mov	r0, sl
 800a8f4:	f7fe fe28 	bl	8009548 <_free_r>
 800a8f8:	230c      	movs	r3, #12
 800a8fa:	f8ca 3000 	str.w	r3, [sl]
 800a8fe:	89a3      	ldrh	r3, [r4, #12]
 800a900:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a904:	81a3      	strh	r3, [r4, #12]
 800a906:	f04f 30ff 	mov.w	r0, #4294967295
 800a90a:	e7e9      	b.n	800a8e0 <__ssputs_r+0x8a>

0800a90c <_svfiprintf_r>:
 800a90c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a910:	4698      	mov	r8, r3
 800a912:	898b      	ldrh	r3, [r1, #12]
 800a914:	061b      	lsls	r3, r3, #24
 800a916:	b09d      	sub	sp, #116	@ 0x74
 800a918:	4607      	mov	r7, r0
 800a91a:	460d      	mov	r5, r1
 800a91c:	4614      	mov	r4, r2
 800a91e:	d510      	bpl.n	800a942 <_svfiprintf_r+0x36>
 800a920:	690b      	ldr	r3, [r1, #16]
 800a922:	b973      	cbnz	r3, 800a942 <_svfiprintf_r+0x36>
 800a924:	2140      	movs	r1, #64	@ 0x40
 800a926:	f7ff f9bd 	bl	8009ca4 <_malloc_r>
 800a92a:	6028      	str	r0, [r5, #0]
 800a92c:	6128      	str	r0, [r5, #16]
 800a92e:	b930      	cbnz	r0, 800a93e <_svfiprintf_r+0x32>
 800a930:	230c      	movs	r3, #12
 800a932:	603b      	str	r3, [r7, #0]
 800a934:	f04f 30ff 	mov.w	r0, #4294967295
 800a938:	b01d      	add	sp, #116	@ 0x74
 800a93a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a93e:	2340      	movs	r3, #64	@ 0x40
 800a940:	616b      	str	r3, [r5, #20]
 800a942:	2300      	movs	r3, #0
 800a944:	9309      	str	r3, [sp, #36]	@ 0x24
 800a946:	2320      	movs	r3, #32
 800a948:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a94c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a950:	2330      	movs	r3, #48	@ 0x30
 800a952:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800aaf0 <_svfiprintf_r+0x1e4>
 800a956:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a95a:	f04f 0901 	mov.w	r9, #1
 800a95e:	4623      	mov	r3, r4
 800a960:	469a      	mov	sl, r3
 800a962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a966:	b10a      	cbz	r2, 800a96c <_svfiprintf_r+0x60>
 800a968:	2a25      	cmp	r2, #37	@ 0x25
 800a96a:	d1f9      	bne.n	800a960 <_svfiprintf_r+0x54>
 800a96c:	ebba 0b04 	subs.w	fp, sl, r4
 800a970:	d00b      	beq.n	800a98a <_svfiprintf_r+0x7e>
 800a972:	465b      	mov	r3, fp
 800a974:	4622      	mov	r2, r4
 800a976:	4629      	mov	r1, r5
 800a978:	4638      	mov	r0, r7
 800a97a:	f7ff ff6c 	bl	800a856 <__ssputs_r>
 800a97e:	3001      	adds	r0, #1
 800a980:	f000 80a7 	beq.w	800aad2 <_svfiprintf_r+0x1c6>
 800a984:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a986:	445a      	add	r2, fp
 800a988:	9209      	str	r2, [sp, #36]	@ 0x24
 800a98a:	f89a 3000 	ldrb.w	r3, [sl]
 800a98e:	2b00      	cmp	r3, #0
 800a990:	f000 809f 	beq.w	800aad2 <_svfiprintf_r+0x1c6>
 800a994:	2300      	movs	r3, #0
 800a996:	f04f 32ff 	mov.w	r2, #4294967295
 800a99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a99e:	f10a 0a01 	add.w	sl, sl, #1
 800a9a2:	9304      	str	r3, [sp, #16]
 800a9a4:	9307      	str	r3, [sp, #28]
 800a9a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a9aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800a9ac:	4654      	mov	r4, sl
 800a9ae:	2205      	movs	r2, #5
 800a9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9b4:	484e      	ldr	r0, [pc, #312]	@ (800aaf0 <_svfiprintf_r+0x1e4>)
 800a9b6:	f7f5 fc0b 	bl	80001d0 <memchr>
 800a9ba:	9a04      	ldr	r2, [sp, #16]
 800a9bc:	b9d8      	cbnz	r0, 800a9f6 <_svfiprintf_r+0xea>
 800a9be:	06d0      	lsls	r0, r2, #27
 800a9c0:	bf44      	itt	mi
 800a9c2:	2320      	movmi	r3, #32
 800a9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9c8:	0711      	lsls	r1, r2, #28
 800a9ca:	bf44      	itt	mi
 800a9cc:	232b      	movmi	r3, #43	@ 0x2b
 800a9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800a9d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800a9d8:	d015      	beq.n	800aa06 <_svfiprintf_r+0xfa>
 800a9da:	9a07      	ldr	r2, [sp, #28]
 800a9dc:	4654      	mov	r4, sl
 800a9de:	2000      	movs	r0, #0
 800a9e0:	f04f 0c0a 	mov.w	ip, #10
 800a9e4:	4621      	mov	r1, r4
 800a9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a9ea:	3b30      	subs	r3, #48	@ 0x30
 800a9ec:	2b09      	cmp	r3, #9
 800a9ee:	d94b      	bls.n	800aa88 <_svfiprintf_r+0x17c>
 800a9f0:	b1b0      	cbz	r0, 800aa20 <_svfiprintf_r+0x114>
 800a9f2:	9207      	str	r2, [sp, #28]
 800a9f4:	e014      	b.n	800aa20 <_svfiprintf_r+0x114>
 800a9f6:	eba0 0308 	sub.w	r3, r0, r8
 800a9fa:	fa09 f303 	lsl.w	r3, r9, r3
 800a9fe:	4313      	orrs	r3, r2
 800aa00:	9304      	str	r3, [sp, #16]
 800aa02:	46a2      	mov	sl, r4
 800aa04:	e7d2      	b.n	800a9ac <_svfiprintf_r+0xa0>
 800aa06:	9b03      	ldr	r3, [sp, #12]
 800aa08:	1d19      	adds	r1, r3, #4
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	9103      	str	r1, [sp, #12]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bfbb      	ittet	lt
 800aa12:	425b      	neglt	r3, r3
 800aa14:	f042 0202 	orrlt.w	r2, r2, #2
 800aa18:	9307      	strge	r3, [sp, #28]
 800aa1a:	9307      	strlt	r3, [sp, #28]
 800aa1c:	bfb8      	it	lt
 800aa1e:	9204      	strlt	r2, [sp, #16]
 800aa20:	7823      	ldrb	r3, [r4, #0]
 800aa22:	2b2e      	cmp	r3, #46	@ 0x2e
 800aa24:	d10a      	bne.n	800aa3c <_svfiprintf_r+0x130>
 800aa26:	7863      	ldrb	r3, [r4, #1]
 800aa28:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa2a:	d132      	bne.n	800aa92 <_svfiprintf_r+0x186>
 800aa2c:	9b03      	ldr	r3, [sp, #12]
 800aa2e:	1d1a      	adds	r2, r3, #4
 800aa30:	681b      	ldr	r3, [r3, #0]
 800aa32:	9203      	str	r2, [sp, #12]
 800aa34:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800aa38:	3402      	adds	r4, #2
 800aa3a:	9305      	str	r3, [sp, #20]
 800aa3c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ab00 <_svfiprintf_r+0x1f4>
 800aa40:	7821      	ldrb	r1, [r4, #0]
 800aa42:	2203      	movs	r2, #3
 800aa44:	4650      	mov	r0, sl
 800aa46:	f7f5 fbc3 	bl	80001d0 <memchr>
 800aa4a:	b138      	cbz	r0, 800aa5c <_svfiprintf_r+0x150>
 800aa4c:	9b04      	ldr	r3, [sp, #16]
 800aa4e:	eba0 000a 	sub.w	r0, r0, sl
 800aa52:	2240      	movs	r2, #64	@ 0x40
 800aa54:	4082      	lsls	r2, r0
 800aa56:	4313      	orrs	r3, r2
 800aa58:	3401      	adds	r4, #1
 800aa5a:	9304      	str	r3, [sp, #16]
 800aa5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa60:	4824      	ldr	r0, [pc, #144]	@ (800aaf4 <_svfiprintf_r+0x1e8>)
 800aa62:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800aa66:	2206      	movs	r2, #6
 800aa68:	f7f5 fbb2 	bl	80001d0 <memchr>
 800aa6c:	2800      	cmp	r0, #0
 800aa6e:	d036      	beq.n	800aade <_svfiprintf_r+0x1d2>
 800aa70:	4b21      	ldr	r3, [pc, #132]	@ (800aaf8 <_svfiprintf_r+0x1ec>)
 800aa72:	bb1b      	cbnz	r3, 800aabc <_svfiprintf_r+0x1b0>
 800aa74:	9b03      	ldr	r3, [sp, #12]
 800aa76:	3307      	adds	r3, #7
 800aa78:	f023 0307 	bic.w	r3, r3, #7
 800aa7c:	3308      	adds	r3, #8
 800aa7e:	9303      	str	r3, [sp, #12]
 800aa80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aa82:	4433      	add	r3, r6
 800aa84:	9309      	str	r3, [sp, #36]	@ 0x24
 800aa86:	e76a      	b.n	800a95e <_svfiprintf_r+0x52>
 800aa88:	fb0c 3202 	mla	r2, ip, r2, r3
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	2001      	movs	r0, #1
 800aa90:	e7a8      	b.n	800a9e4 <_svfiprintf_r+0xd8>
 800aa92:	2300      	movs	r3, #0
 800aa94:	3401      	adds	r4, #1
 800aa96:	9305      	str	r3, [sp, #20]
 800aa98:	4619      	mov	r1, r3
 800aa9a:	f04f 0c0a 	mov.w	ip, #10
 800aa9e:	4620      	mov	r0, r4
 800aaa0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aaa4:	3a30      	subs	r2, #48	@ 0x30
 800aaa6:	2a09      	cmp	r2, #9
 800aaa8:	d903      	bls.n	800aab2 <_svfiprintf_r+0x1a6>
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d0c6      	beq.n	800aa3c <_svfiprintf_r+0x130>
 800aaae:	9105      	str	r1, [sp, #20]
 800aab0:	e7c4      	b.n	800aa3c <_svfiprintf_r+0x130>
 800aab2:	fb0c 2101 	mla	r1, ip, r1, r2
 800aab6:	4604      	mov	r4, r0
 800aab8:	2301      	movs	r3, #1
 800aaba:	e7f0      	b.n	800aa9e <_svfiprintf_r+0x192>
 800aabc:	ab03      	add	r3, sp, #12
 800aabe:	9300      	str	r3, [sp, #0]
 800aac0:	462a      	mov	r2, r5
 800aac2:	4b0e      	ldr	r3, [pc, #56]	@ (800aafc <_svfiprintf_r+0x1f0>)
 800aac4:	a904      	add	r1, sp, #16
 800aac6:	4638      	mov	r0, r7
 800aac8:	f7fc ff3c 	bl	8007944 <_printf_float>
 800aacc:	1c42      	adds	r2, r0, #1
 800aace:	4606      	mov	r6, r0
 800aad0:	d1d6      	bne.n	800aa80 <_svfiprintf_r+0x174>
 800aad2:	89ab      	ldrh	r3, [r5, #12]
 800aad4:	065b      	lsls	r3, r3, #25
 800aad6:	f53f af2d 	bmi.w	800a934 <_svfiprintf_r+0x28>
 800aada:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aadc:	e72c      	b.n	800a938 <_svfiprintf_r+0x2c>
 800aade:	ab03      	add	r3, sp, #12
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	462a      	mov	r2, r5
 800aae4:	4b05      	ldr	r3, [pc, #20]	@ (800aafc <_svfiprintf_r+0x1f0>)
 800aae6:	a904      	add	r1, sp, #16
 800aae8:	4638      	mov	r0, r7
 800aaea:	f7fd f9c3 	bl	8007e74 <_printf_i>
 800aaee:	e7ed      	b.n	800aacc <_svfiprintf_r+0x1c0>
 800aaf0:	0800bb09 	.word	0x0800bb09
 800aaf4:	0800bb13 	.word	0x0800bb13
 800aaf8:	08007945 	.word	0x08007945
 800aafc:	0800a857 	.word	0x0800a857
 800ab00:	0800bb0f 	.word	0x0800bb0f

0800ab04 <__sfputc_r>:
 800ab04:	6893      	ldr	r3, [r2, #8]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	b410      	push	{r4}
 800ab0c:	6093      	str	r3, [r2, #8]
 800ab0e:	da08      	bge.n	800ab22 <__sfputc_r+0x1e>
 800ab10:	6994      	ldr	r4, [r2, #24]
 800ab12:	42a3      	cmp	r3, r4
 800ab14:	db01      	blt.n	800ab1a <__sfputc_r+0x16>
 800ab16:	290a      	cmp	r1, #10
 800ab18:	d103      	bne.n	800ab22 <__sfputc_r+0x1e>
 800ab1a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab1e:	f000 b9df 	b.w	800aee0 <__swbuf_r>
 800ab22:	6813      	ldr	r3, [r2, #0]
 800ab24:	1c58      	adds	r0, r3, #1
 800ab26:	6010      	str	r0, [r2, #0]
 800ab28:	7019      	strb	r1, [r3, #0]
 800ab2a:	4608      	mov	r0, r1
 800ab2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ab30:	4770      	bx	lr

0800ab32 <__sfputs_r>:
 800ab32:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab34:	4606      	mov	r6, r0
 800ab36:	460f      	mov	r7, r1
 800ab38:	4614      	mov	r4, r2
 800ab3a:	18d5      	adds	r5, r2, r3
 800ab3c:	42ac      	cmp	r4, r5
 800ab3e:	d101      	bne.n	800ab44 <__sfputs_r+0x12>
 800ab40:	2000      	movs	r0, #0
 800ab42:	e007      	b.n	800ab54 <__sfputs_r+0x22>
 800ab44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab48:	463a      	mov	r2, r7
 800ab4a:	4630      	mov	r0, r6
 800ab4c:	f7ff ffda 	bl	800ab04 <__sfputc_r>
 800ab50:	1c43      	adds	r3, r0, #1
 800ab52:	d1f3      	bne.n	800ab3c <__sfputs_r+0xa>
 800ab54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ab58 <_vfiprintf_r>:
 800ab58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab5c:	460d      	mov	r5, r1
 800ab5e:	b09d      	sub	sp, #116	@ 0x74
 800ab60:	4614      	mov	r4, r2
 800ab62:	4698      	mov	r8, r3
 800ab64:	4606      	mov	r6, r0
 800ab66:	b118      	cbz	r0, 800ab70 <_vfiprintf_r+0x18>
 800ab68:	6a03      	ldr	r3, [r0, #32]
 800ab6a:	b90b      	cbnz	r3, 800ab70 <_vfiprintf_r+0x18>
 800ab6c:	f7fd fd42 	bl	80085f4 <__sinit>
 800ab70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab72:	07d9      	lsls	r1, r3, #31
 800ab74:	d405      	bmi.n	800ab82 <_vfiprintf_r+0x2a>
 800ab76:	89ab      	ldrh	r3, [r5, #12]
 800ab78:	059a      	lsls	r2, r3, #22
 800ab7a:	d402      	bmi.n	800ab82 <_vfiprintf_r+0x2a>
 800ab7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ab7e:	f7fd fe74 	bl	800886a <__retarget_lock_acquire_recursive>
 800ab82:	89ab      	ldrh	r3, [r5, #12]
 800ab84:	071b      	lsls	r3, r3, #28
 800ab86:	d501      	bpl.n	800ab8c <_vfiprintf_r+0x34>
 800ab88:	692b      	ldr	r3, [r5, #16]
 800ab8a:	b99b      	cbnz	r3, 800abb4 <_vfiprintf_r+0x5c>
 800ab8c:	4629      	mov	r1, r5
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f000 f9e4 	bl	800af5c <__swsetup_r>
 800ab94:	b170      	cbz	r0, 800abb4 <_vfiprintf_r+0x5c>
 800ab96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ab98:	07dc      	lsls	r4, r3, #31
 800ab9a:	d504      	bpl.n	800aba6 <_vfiprintf_r+0x4e>
 800ab9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aba0:	b01d      	add	sp, #116	@ 0x74
 800aba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aba6:	89ab      	ldrh	r3, [r5, #12]
 800aba8:	0598      	lsls	r0, r3, #22
 800abaa:	d4f7      	bmi.n	800ab9c <_vfiprintf_r+0x44>
 800abac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abae:	f7fd fe5d 	bl	800886c <__retarget_lock_release_recursive>
 800abb2:	e7f3      	b.n	800ab9c <_vfiprintf_r+0x44>
 800abb4:	2300      	movs	r3, #0
 800abb6:	9309      	str	r3, [sp, #36]	@ 0x24
 800abb8:	2320      	movs	r3, #32
 800abba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800abc2:	2330      	movs	r3, #48	@ 0x30
 800abc4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ad74 <_vfiprintf_r+0x21c>
 800abc8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800abcc:	f04f 0901 	mov.w	r9, #1
 800abd0:	4623      	mov	r3, r4
 800abd2:	469a      	mov	sl, r3
 800abd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800abd8:	b10a      	cbz	r2, 800abde <_vfiprintf_r+0x86>
 800abda:	2a25      	cmp	r2, #37	@ 0x25
 800abdc:	d1f9      	bne.n	800abd2 <_vfiprintf_r+0x7a>
 800abde:	ebba 0b04 	subs.w	fp, sl, r4
 800abe2:	d00b      	beq.n	800abfc <_vfiprintf_r+0xa4>
 800abe4:	465b      	mov	r3, fp
 800abe6:	4622      	mov	r2, r4
 800abe8:	4629      	mov	r1, r5
 800abea:	4630      	mov	r0, r6
 800abec:	f7ff ffa1 	bl	800ab32 <__sfputs_r>
 800abf0:	3001      	adds	r0, #1
 800abf2:	f000 80a7 	beq.w	800ad44 <_vfiprintf_r+0x1ec>
 800abf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800abf8:	445a      	add	r2, fp
 800abfa:	9209      	str	r2, [sp, #36]	@ 0x24
 800abfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 809f 	beq.w	800ad44 <_vfiprintf_r+0x1ec>
 800ac06:	2300      	movs	r3, #0
 800ac08:	f04f 32ff 	mov.w	r2, #4294967295
 800ac0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac10:	f10a 0a01 	add.w	sl, sl, #1
 800ac14:	9304      	str	r3, [sp, #16]
 800ac16:	9307      	str	r3, [sp, #28]
 800ac18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac1e:	4654      	mov	r4, sl
 800ac20:	2205      	movs	r2, #5
 800ac22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac26:	4853      	ldr	r0, [pc, #332]	@ (800ad74 <_vfiprintf_r+0x21c>)
 800ac28:	f7f5 fad2 	bl	80001d0 <memchr>
 800ac2c:	9a04      	ldr	r2, [sp, #16]
 800ac2e:	b9d8      	cbnz	r0, 800ac68 <_vfiprintf_r+0x110>
 800ac30:	06d1      	lsls	r1, r2, #27
 800ac32:	bf44      	itt	mi
 800ac34:	2320      	movmi	r3, #32
 800ac36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac3a:	0713      	lsls	r3, r2, #28
 800ac3c:	bf44      	itt	mi
 800ac3e:	232b      	movmi	r3, #43	@ 0x2b
 800ac40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac44:	f89a 3000 	ldrb.w	r3, [sl]
 800ac48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac4a:	d015      	beq.n	800ac78 <_vfiprintf_r+0x120>
 800ac4c:	9a07      	ldr	r2, [sp, #28]
 800ac4e:	4654      	mov	r4, sl
 800ac50:	2000      	movs	r0, #0
 800ac52:	f04f 0c0a 	mov.w	ip, #10
 800ac56:	4621      	mov	r1, r4
 800ac58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac5c:	3b30      	subs	r3, #48	@ 0x30
 800ac5e:	2b09      	cmp	r3, #9
 800ac60:	d94b      	bls.n	800acfa <_vfiprintf_r+0x1a2>
 800ac62:	b1b0      	cbz	r0, 800ac92 <_vfiprintf_r+0x13a>
 800ac64:	9207      	str	r2, [sp, #28]
 800ac66:	e014      	b.n	800ac92 <_vfiprintf_r+0x13a>
 800ac68:	eba0 0308 	sub.w	r3, r0, r8
 800ac6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ac70:	4313      	orrs	r3, r2
 800ac72:	9304      	str	r3, [sp, #16]
 800ac74:	46a2      	mov	sl, r4
 800ac76:	e7d2      	b.n	800ac1e <_vfiprintf_r+0xc6>
 800ac78:	9b03      	ldr	r3, [sp, #12]
 800ac7a:	1d19      	adds	r1, r3, #4
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	9103      	str	r1, [sp, #12]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bfbb      	ittet	lt
 800ac84:	425b      	neglt	r3, r3
 800ac86:	f042 0202 	orrlt.w	r2, r2, #2
 800ac8a:	9307      	strge	r3, [sp, #28]
 800ac8c:	9307      	strlt	r3, [sp, #28]
 800ac8e:	bfb8      	it	lt
 800ac90:	9204      	strlt	r2, [sp, #16]
 800ac92:	7823      	ldrb	r3, [r4, #0]
 800ac94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ac96:	d10a      	bne.n	800acae <_vfiprintf_r+0x156>
 800ac98:	7863      	ldrb	r3, [r4, #1]
 800ac9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac9c:	d132      	bne.n	800ad04 <_vfiprintf_r+0x1ac>
 800ac9e:	9b03      	ldr	r3, [sp, #12]
 800aca0:	1d1a      	adds	r2, r3, #4
 800aca2:	681b      	ldr	r3, [r3, #0]
 800aca4:	9203      	str	r2, [sp, #12]
 800aca6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800acaa:	3402      	adds	r4, #2
 800acac:	9305      	str	r3, [sp, #20]
 800acae:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ad84 <_vfiprintf_r+0x22c>
 800acb2:	7821      	ldrb	r1, [r4, #0]
 800acb4:	2203      	movs	r2, #3
 800acb6:	4650      	mov	r0, sl
 800acb8:	f7f5 fa8a 	bl	80001d0 <memchr>
 800acbc:	b138      	cbz	r0, 800acce <_vfiprintf_r+0x176>
 800acbe:	9b04      	ldr	r3, [sp, #16]
 800acc0:	eba0 000a 	sub.w	r0, r0, sl
 800acc4:	2240      	movs	r2, #64	@ 0x40
 800acc6:	4082      	lsls	r2, r0
 800acc8:	4313      	orrs	r3, r2
 800acca:	3401      	adds	r4, #1
 800accc:	9304      	str	r3, [sp, #16]
 800acce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acd2:	4829      	ldr	r0, [pc, #164]	@ (800ad78 <_vfiprintf_r+0x220>)
 800acd4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800acd8:	2206      	movs	r2, #6
 800acda:	f7f5 fa79 	bl	80001d0 <memchr>
 800acde:	2800      	cmp	r0, #0
 800ace0:	d03f      	beq.n	800ad62 <_vfiprintf_r+0x20a>
 800ace2:	4b26      	ldr	r3, [pc, #152]	@ (800ad7c <_vfiprintf_r+0x224>)
 800ace4:	bb1b      	cbnz	r3, 800ad2e <_vfiprintf_r+0x1d6>
 800ace6:	9b03      	ldr	r3, [sp, #12]
 800ace8:	3307      	adds	r3, #7
 800acea:	f023 0307 	bic.w	r3, r3, #7
 800acee:	3308      	adds	r3, #8
 800acf0:	9303      	str	r3, [sp, #12]
 800acf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800acf4:	443b      	add	r3, r7
 800acf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800acf8:	e76a      	b.n	800abd0 <_vfiprintf_r+0x78>
 800acfa:	fb0c 3202 	mla	r2, ip, r2, r3
 800acfe:	460c      	mov	r4, r1
 800ad00:	2001      	movs	r0, #1
 800ad02:	e7a8      	b.n	800ac56 <_vfiprintf_r+0xfe>
 800ad04:	2300      	movs	r3, #0
 800ad06:	3401      	adds	r4, #1
 800ad08:	9305      	str	r3, [sp, #20]
 800ad0a:	4619      	mov	r1, r3
 800ad0c:	f04f 0c0a 	mov.w	ip, #10
 800ad10:	4620      	mov	r0, r4
 800ad12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad16:	3a30      	subs	r2, #48	@ 0x30
 800ad18:	2a09      	cmp	r2, #9
 800ad1a:	d903      	bls.n	800ad24 <_vfiprintf_r+0x1cc>
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d0c6      	beq.n	800acae <_vfiprintf_r+0x156>
 800ad20:	9105      	str	r1, [sp, #20]
 800ad22:	e7c4      	b.n	800acae <_vfiprintf_r+0x156>
 800ad24:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad28:	4604      	mov	r4, r0
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	e7f0      	b.n	800ad10 <_vfiprintf_r+0x1b8>
 800ad2e:	ab03      	add	r3, sp, #12
 800ad30:	9300      	str	r3, [sp, #0]
 800ad32:	462a      	mov	r2, r5
 800ad34:	4b12      	ldr	r3, [pc, #72]	@ (800ad80 <_vfiprintf_r+0x228>)
 800ad36:	a904      	add	r1, sp, #16
 800ad38:	4630      	mov	r0, r6
 800ad3a:	f7fc fe03 	bl	8007944 <_printf_float>
 800ad3e:	4607      	mov	r7, r0
 800ad40:	1c78      	adds	r0, r7, #1
 800ad42:	d1d6      	bne.n	800acf2 <_vfiprintf_r+0x19a>
 800ad44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad46:	07d9      	lsls	r1, r3, #31
 800ad48:	d405      	bmi.n	800ad56 <_vfiprintf_r+0x1fe>
 800ad4a:	89ab      	ldrh	r3, [r5, #12]
 800ad4c:	059a      	lsls	r2, r3, #22
 800ad4e:	d402      	bmi.n	800ad56 <_vfiprintf_r+0x1fe>
 800ad50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad52:	f7fd fd8b 	bl	800886c <__retarget_lock_release_recursive>
 800ad56:	89ab      	ldrh	r3, [r5, #12]
 800ad58:	065b      	lsls	r3, r3, #25
 800ad5a:	f53f af1f 	bmi.w	800ab9c <_vfiprintf_r+0x44>
 800ad5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad60:	e71e      	b.n	800aba0 <_vfiprintf_r+0x48>
 800ad62:	ab03      	add	r3, sp, #12
 800ad64:	9300      	str	r3, [sp, #0]
 800ad66:	462a      	mov	r2, r5
 800ad68:	4b05      	ldr	r3, [pc, #20]	@ (800ad80 <_vfiprintf_r+0x228>)
 800ad6a:	a904      	add	r1, sp, #16
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	f7fd f881 	bl	8007e74 <_printf_i>
 800ad72:	e7e4      	b.n	800ad3e <_vfiprintf_r+0x1e6>
 800ad74:	0800bb09 	.word	0x0800bb09
 800ad78:	0800bb13 	.word	0x0800bb13
 800ad7c:	08007945 	.word	0x08007945
 800ad80:	0800ab33 	.word	0x0800ab33
 800ad84:	0800bb0f 	.word	0x0800bb0f

0800ad88 <__sflush_r>:
 800ad88:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ad8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad90:	0716      	lsls	r6, r2, #28
 800ad92:	4605      	mov	r5, r0
 800ad94:	460c      	mov	r4, r1
 800ad96:	d454      	bmi.n	800ae42 <__sflush_r+0xba>
 800ad98:	684b      	ldr	r3, [r1, #4]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	dc02      	bgt.n	800ada4 <__sflush_r+0x1c>
 800ad9e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dd48      	ble.n	800ae36 <__sflush_r+0xae>
 800ada4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ada6:	2e00      	cmp	r6, #0
 800ada8:	d045      	beq.n	800ae36 <__sflush_r+0xae>
 800adaa:	2300      	movs	r3, #0
 800adac:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800adb0:	682f      	ldr	r7, [r5, #0]
 800adb2:	6a21      	ldr	r1, [r4, #32]
 800adb4:	602b      	str	r3, [r5, #0]
 800adb6:	d030      	beq.n	800ae1a <__sflush_r+0x92>
 800adb8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800adba:	89a3      	ldrh	r3, [r4, #12]
 800adbc:	0759      	lsls	r1, r3, #29
 800adbe:	d505      	bpl.n	800adcc <__sflush_r+0x44>
 800adc0:	6863      	ldr	r3, [r4, #4]
 800adc2:	1ad2      	subs	r2, r2, r3
 800adc4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800adc6:	b10b      	cbz	r3, 800adcc <__sflush_r+0x44>
 800adc8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800adca:	1ad2      	subs	r2, r2, r3
 800adcc:	2300      	movs	r3, #0
 800adce:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800add0:	6a21      	ldr	r1, [r4, #32]
 800add2:	4628      	mov	r0, r5
 800add4:	47b0      	blx	r6
 800add6:	1c43      	adds	r3, r0, #1
 800add8:	89a3      	ldrh	r3, [r4, #12]
 800adda:	d106      	bne.n	800adea <__sflush_r+0x62>
 800addc:	6829      	ldr	r1, [r5, #0]
 800adde:	291d      	cmp	r1, #29
 800ade0:	d82b      	bhi.n	800ae3a <__sflush_r+0xb2>
 800ade2:	4a2a      	ldr	r2, [pc, #168]	@ (800ae8c <__sflush_r+0x104>)
 800ade4:	410a      	asrs	r2, r1
 800ade6:	07d6      	lsls	r6, r2, #31
 800ade8:	d427      	bmi.n	800ae3a <__sflush_r+0xb2>
 800adea:	2200      	movs	r2, #0
 800adec:	6062      	str	r2, [r4, #4]
 800adee:	04d9      	lsls	r1, r3, #19
 800adf0:	6922      	ldr	r2, [r4, #16]
 800adf2:	6022      	str	r2, [r4, #0]
 800adf4:	d504      	bpl.n	800ae00 <__sflush_r+0x78>
 800adf6:	1c42      	adds	r2, r0, #1
 800adf8:	d101      	bne.n	800adfe <__sflush_r+0x76>
 800adfa:	682b      	ldr	r3, [r5, #0]
 800adfc:	b903      	cbnz	r3, 800ae00 <__sflush_r+0x78>
 800adfe:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae02:	602f      	str	r7, [r5, #0]
 800ae04:	b1b9      	cbz	r1, 800ae36 <__sflush_r+0xae>
 800ae06:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae0a:	4299      	cmp	r1, r3
 800ae0c:	d002      	beq.n	800ae14 <__sflush_r+0x8c>
 800ae0e:	4628      	mov	r0, r5
 800ae10:	f7fe fb9a 	bl	8009548 <_free_r>
 800ae14:	2300      	movs	r3, #0
 800ae16:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae18:	e00d      	b.n	800ae36 <__sflush_r+0xae>
 800ae1a:	2301      	movs	r3, #1
 800ae1c:	4628      	mov	r0, r5
 800ae1e:	47b0      	blx	r6
 800ae20:	4602      	mov	r2, r0
 800ae22:	1c50      	adds	r0, r2, #1
 800ae24:	d1c9      	bne.n	800adba <__sflush_r+0x32>
 800ae26:	682b      	ldr	r3, [r5, #0]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d0c6      	beq.n	800adba <__sflush_r+0x32>
 800ae2c:	2b1d      	cmp	r3, #29
 800ae2e:	d001      	beq.n	800ae34 <__sflush_r+0xac>
 800ae30:	2b16      	cmp	r3, #22
 800ae32:	d11e      	bne.n	800ae72 <__sflush_r+0xea>
 800ae34:	602f      	str	r7, [r5, #0]
 800ae36:	2000      	movs	r0, #0
 800ae38:	e022      	b.n	800ae80 <__sflush_r+0xf8>
 800ae3a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae3e:	b21b      	sxth	r3, r3
 800ae40:	e01b      	b.n	800ae7a <__sflush_r+0xf2>
 800ae42:	690f      	ldr	r7, [r1, #16]
 800ae44:	2f00      	cmp	r7, #0
 800ae46:	d0f6      	beq.n	800ae36 <__sflush_r+0xae>
 800ae48:	0793      	lsls	r3, r2, #30
 800ae4a:	680e      	ldr	r6, [r1, #0]
 800ae4c:	bf08      	it	eq
 800ae4e:	694b      	ldreq	r3, [r1, #20]
 800ae50:	600f      	str	r7, [r1, #0]
 800ae52:	bf18      	it	ne
 800ae54:	2300      	movne	r3, #0
 800ae56:	eba6 0807 	sub.w	r8, r6, r7
 800ae5a:	608b      	str	r3, [r1, #8]
 800ae5c:	f1b8 0f00 	cmp.w	r8, #0
 800ae60:	dde9      	ble.n	800ae36 <__sflush_r+0xae>
 800ae62:	6a21      	ldr	r1, [r4, #32]
 800ae64:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ae66:	4643      	mov	r3, r8
 800ae68:	463a      	mov	r2, r7
 800ae6a:	4628      	mov	r0, r5
 800ae6c:	47b0      	blx	r6
 800ae6e:	2800      	cmp	r0, #0
 800ae70:	dc08      	bgt.n	800ae84 <__sflush_r+0xfc>
 800ae72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae7a:	81a3      	strh	r3, [r4, #12]
 800ae7c:	f04f 30ff 	mov.w	r0, #4294967295
 800ae80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae84:	4407      	add	r7, r0
 800ae86:	eba8 0800 	sub.w	r8, r8, r0
 800ae8a:	e7e7      	b.n	800ae5c <__sflush_r+0xd4>
 800ae8c:	dfbffffe 	.word	0xdfbffffe

0800ae90 <_fflush_r>:
 800ae90:	b538      	push	{r3, r4, r5, lr}
 800ae92:	690b      	ldr	r3, [r1, #16]
 800ae94:	4605      	mov	r5, r0
 800ae96:	460c      	mov	r4, r1
 800ae98:	b913      	cbnz	r3, 800aea0 <_fflush_r+0x10>
 800ae9a:	2500      	movs	r5, #0
 800ae9c:	4628      	mov	r0, r5
 800ae9e:	bd38      	pop	{r3, r4, r5, pc}
 800aea0:	b118      	cbz	r0, 800aeaa <_fflush_r+0x1a>
 800aea2:	6a03      	ldr	r3, [r0, #32]
 800aea4:	b90b      	cbnz	r3, 800aeaa <_fflush_r+0x1a>
 800aea6:	f7fd fba5 	bl	80085f4 <__sinit>
 800aeaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d0f3      	beq.n	800ae9a <_fflush_r+0xa>
 800aeb2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aeb4:	07d0      	lsls	r0, r2, #31
 800aeb6:	d404      	bmi.n	800aec2 <_fflush_r+0x32>
 800aeb8:	0599      	lsls	r1, r3, #22
 800aeba:	d402      	bmi.n	800aec2 <_fflush_r+0x32>
 800aebc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aebe:	f7fd fcd4 	bl	800886a <__retarget_lock_acquire_recursive>
 800aec2:	4628      	mov	r0, r5
 800aec4:	4621      	mov	r1, r4
 800aec6:	f7ff ff5f 	bl	800ad88 <__sflush_r>
 800aeca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aecc:	07da      	lsls	r2, r3, #31
 800aece:	4605      	mov	r5, r0
 800aed0:	d4e4      	bmi.n	800ae9c <_fflush_r+0xc>
 800aed2:	89a3      	ldrh	r3, [r4, #12]
 800aed4:	059b      	lsls	r3, r3, #22
 800aed6:	d4e1      	bmi.n	800ae9c <_fflush_r+0xc>
 800aed8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aeda:	f7fd fcc7 	bl	800886c <__retarget_lock_release_recursive>
 800aede:	e7dd      	b.n	800ae9c <_fflush_r+0xc>

0800aee0 <__swbuf_r>:
 800aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aee2:	460e      	mov	r6, r1
 800aee4:	4614      	mov	r4, r2
 800aee6:	4605      	mov	r5, r0
 800aee8:	b118      	cbz	r0, 800aef2 <__swbuf_r+0x12>
 800aeea:	6a03      	ldr	r3, [r0, #32]
 800aeec:	b90b      	cbnz	r3, 800aef2 <__swbuf_r+0x12>
 800aeee:	f7fd fb81 	bl	80085f4 <__sinit>
 800aef2:	69a3      	ldr	r3, [r4, #24]
 800aef4:	60a3      	str	r3, [r4, #8]
 800aef6:	89a3      	ldrh	r3, [r4, #12]
 800aef8:	071a      	lsls	r2, r3, #28
 800aefa:	d501      	bpl.n	800af00 <__swbuf_r+0x20>
 800aefc:	6923      	ldr	r3, [r4, #16]
 800aefe:	b943      	cbnz	r3, 800af12 <__swbuf_r+0x32>
 800af00:	4621      	mov	r1, r4
 800af02:	4628      	mov	r0, r5
 800af04:	f000 f82a 	bl	800af5c <__swsetup_r>
 800af08:	b118      	cbz	r0, 800af12 <__swbuf_r+0x32>
 800af0a:	f04f 37ff 	mov.w	r7, #4294967295
 800af0e:	4638      	mov	r0, r7
 800af10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af12:	6823      	ldr	r3, [r4, #0]
 800af14:	6922      	ldr	r2, [r4, #16]
 800af16:	1a98      	subs	r0, r3, r2
 800af18:	6963      	ldr	r3, [r4, #20]
 800af1a:	b2f6      	uxtb	r6, r6
 800af1c:	4283      	cmp	r3, r0
 800af1e:	4637      	mov	r7, r6
 800af20:	dc05      	bgt.n	800af2e <__swbuf_r+0x4e>
 800af22:	4621      	mov	r1, r4
 800af24:	4628      	mov	r0, r5
 800af26:	f7ff ffb3 	bl	800ae90 <_fflush_r>
 800af2a:	2800      	cmp	r0, #0
 800af2c:	d1ed      	bne.n	800af0a <__swbuf_r+0x2a>
 800af2e:	68a3      	ldr	r3, [r4, #8]
 800af30:	3b01      	subs	r3, #1
 800af32:	60a3      	str	r3, [r4, #8]
 800af34:	6823      	ldr	r3, [r4, #0]
 800af36:	1c5a      	adds	r2, r3, #1
 800af38:	6022      	str	r2, [r4, #0]
 800af3a:	701e      	strb	r6, [r3, #0]
 800af3c:	6962      	ldr	r2, [r4, #20]
 800af3e:	1c43      	adds	r3, r0, #1
 800af40:	429a      	cmp	r2, r3
 800af42:	d004      	beq.n	800af4e <__swbuf_r+0x6e>
 800af44:	89a3      	ldrh	r3, [r4, #12]
 800af46:	07db      	lsls	r3, r3, #31
 800af48:	d5e1      	bpl.n	800af0e <__swbuf_r+0x2e>
 800af4a:	2e0a      	cmp	r6, #10
 800af4c:	d1df      	bne.n	800af0e <__swbuf_r+0x2e>
 800af4e:	4621      	mov	r1, r4
 800af50:	4628      	mov	r0, r5
 800af52:	f7ff ff9d 	bl	800ae90 <_fflush_r>
 800af56:	2800      	cmp	r0, #0
 800af58:	d0d9      	beq.n	800af0e <__swbuf_r+0x2e>
 800af5a:	e7d6      	b.n	800af0a <__swbuf_r+0x2a>

0800af5c <__swsetup_r>:
 800af5c:	b538      	push	{r3, r4, r5, lr}
 800af5e:	4b29      	ldr	r3, [pc, #164]	@ (800b004 <__swsetup_r+0xa8>)
 800af60:	4605      	mov	r5, r0
 800af62:	6818      	ldr	r0, [r3, #0]
 800af64:	460c      	mov	r4, r1
 800af66:	b118      	cbz	r0, 800af70 <__swsetup_r+0x14>
 800af68:	6a03      	ldr	r3, [r0, #32]
 800af6a:	b90b      	cbnz	r3, 800af70 <__swsetup_r+0x14>
 800af6c:	f7fd fb42 	bl	80085f4 <__sinit>
 800af70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af74:	0719      	lsls	r1, r3, #28
 800af76:	d422      	bmi.n	800afbe <__swsetup_r+0x62>
 800af78:	06da      	lsls	r2, r3, #27
 800af7a:	d407      	bmi.n	800af8c <__swsetup_r+0x30>
 800af7c:	2209      	movs	r2, #9
 800af7e:	602a      	str	r2, [r5, #0]
 800af80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af84:	81a3      	strh	r3, [r4, #12]
 800af86:	f04f 30ff 	mov.w	r0, #4294967295
 800af8a:	e033      	b.n	800aff4 <__swsetup_r+0x98>
 800af8c:	0758      	lsls	r0, r3, #29
 800af8e:	d512      	bpl.n	800afb6 <__swsetup_r+0x5a>
 800af90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af92:	b141      	cbz	r1, 800afa6 <__swsetup_r+0x4a>
 800af94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af98:	4299      	cmp	r1, r3
 800af9a:	d002      	beq.n	800afa2 <__swsetup_r+0x46>
 800af9c:	4628      	mov	r0, r5
 800af9e:	f7fe fad3 	bl	8009548 <_free_r>
 800afa2:	2300      	movs	r3, #0
 800afa4:	6363      	str	r3, [r4, #52]	@ 0x34
 800afa6:	89a3      	ldrh	r3, [r4, #12]
 800afa8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800afac:	81a3      	strh	r3, [r4, #12]
 800afae:	2300      	movs	r3, #0
 800afb0:	6063      	str	r3, [r4, #4]
 800afb2:	6923      	ldr	r3, [r4, #16]
 800afb4:	6023      	str	r3, [r4, #0]
 800afb6:	89a3      	ldrh	r3, [r4, #12]
 800afb8:	f043 0308 	orr.w	r3, r3, #8
 800afbc:	81a3      	strh	r3, [r4, #12]
 800afbe:	6923      	ldr	r3, [r4, #16]
 800afc0:	b94b      	cbnz	r3, 800afd6 <__swsetup_r+0x7a>
 800afc2:	89a3      	ldrh	r3, [r4, #12]
 800afc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800afc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800afcc:	d003      	beq.n	800afd6 <__swsetup_r+0x7a>
 800afce:	4621      	mov	r1, r4
 800afd0:	4628      	mov	r0, r5
 800afd2:	f000 f8db 	bl	800b18c <__smakebuf_r>
 800afd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afda:	f013 0201 	ands.w	r2, r3, #1
 800afde:	d00a      	beq.n	800aff6 <__swsetup_r+0x9a>
 800afe0:	2200      	movs	r2, #0
 800afe2:	60a2      	str	r2, [r4, #8]
 800afe4:	6962      	ldr	r2, [r4, #20]
 800afe6:	4252      	negs	r2, r2
 800afe8:	61a2      	str	r2, [r4, #24]
 800afea:	6922      	ldr	r2, [r4, #16]
 800afec:	b942      	cbnz	r2, 800b000 <__swsetup_r+0xa4>
 800afee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aff2:	d1c5      	bne.n	800af80 <__swsetup_r+0x24>
 800aff4:	bd38      	pop	{r3, r4, r5, pc}
 800aff6:	0799      	lsls	r1, r3, #30
 800aff8:	bf58      	it	pl
 800affa:	6962      	ldrpl	r2, [r4, #20]
 800affc:	60a2      	str	r2, [r4, #8]
 800affe:	e7f4      	b.n	800afea <__swsetup_r+0x8e>
 800b000:	2000      	movs	r0, #0
 800b002:	e7f7      	b.n	800aff4 <__swsetup_r+0x98>
 800b004:	200001a8 	.word	0x200001a8

0800b008 <memmove>:
 800b008:	4288      	cmp	r0, r1
 800b00a:	b510      	push	{r4, lr}
 800b00c:	eb01 0402 	add.w	r4, r1, r2
 800b010:	d902      	bls.n	800b018 <memmove+0x10>
 800b012:	4284      	cmp	r4, r0
 800b014:	4623      	mov	r3, r4
 800b016:	d807      	bhi.n	800b028 <memmove+0x20>
 800b018:	1e43      	subs	r3, r0, #1
 800b01a:	42a1      	cmp	r1, r4
 800b01c:	d008      	beq.n	800b030 <memmove+0x28>
 800b01e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b022:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b026:	e7f8      	b.n	800b01a <memmove+0x12>
 800b028:	4402      	add	r2, r0
 800b02a:	4601      	mov	r1, r0
 800b02c:	428a      	cmp	r2, r1
 800b02e:	d100      	bne.n	800b032 <memmove+0x2a>
 800b030:	bd10      	pop	{r4, pc}
 800b032:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b036:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b03a:	e7f7      	b.n	800b02c <memmove+0x24>

0800b03c <_sbrk_r>:
 800b03c:	b538      	push	{r3, r4, r5, lr}
 800b03e:	4d06      	ldr	r5, [pc, #24]	@ (800b058 <_sbrk_r+0x1c>)
 800b040:	2300      	movs	r3, #0
 800b042:	4604      	mov	r4, r0
 800b044:	4608      	mov	r0, r1
 800b046:	602b      	str	r3, [r5, #0]
 800b048:	f7f7 f944 	bl	80022d4 <_sbrk>
 800b04c:	1c43      	adds	r3, r0, #1
 800b04e:	d102      	bne.n	800b056 <_sbrk_r+0x1a>
 800b050:	682b      	ldr	r3, [r5, #0]
 800b052:	b103      	cbz	r3, 800b056 <_sbrk_r+0x1a>
 800b054:	6023      	str	r3, [r4, #0]
 800b056:	bd38      	pop	{r3, r4, r5, pc}
 800b058:	20000764 	.word	0x20000764

0800b05c <__assert_func>:
 800b05c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b05e:	4614      	mov	r4, r2
 800b060:	461a      	mov	r2, r3
 800b062:	4b09      	ldr	r3, [pc, #36]	@ (800b088 <__assert_func+0x2c>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4605      	mov	r5, r0
 800b068:	68d8      	ldr	r0, [r3, #12]
 800b06a:	b954      	cbnz	r4, 800b082 <__assert_func+0x26>
 800b06c:	4b07      	ldr	r3, [pc, #28]	@ (800b08c <__assert_func+0x30>)
 800b06e:	461c      	mov	r4, r3
 800b070:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b074:	9100      	str	r1, [sp, #0]
 800b076:	462b      	mov	r3, r5
 800b078:	4905      	ldr	r1, [pc, #20]	@ (800b090 <__assert_func+0x34>)
 800b07a:	f000 f84f 	bl	800b11c <fiprintf>
 800b07e:	f000 f8e3 	bl	800b248 <abort>
 800b082:	4b04      	ldr	r3, [pc, #16]	@ (800b094 <__assert_func+0x38>)
 800b084:	e7f4      	b.n	800b070 <__assert_func+0x14>
 800b086:	bf00      	nop
 800b088:	200001a8 	.word	0x200001a8
 800b08c:	0800bb55 	.word	0x0800bb55
 800b090:	0800bb27 	.word	0x0800bb27
 800b094:	0800bb1a 	.word	0x0800bb1a

0800b098 <_calloc_r>:
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	fba1 5402 	umull	r5, r4, r1, r2
 800b09e:	b93c      	cbnz	r4, 800b0b0 <_calloc_r+0x18>
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	f7fe fdff 	bl	8009ca4 <_malloc_r>
 800b0a6:	4606      	mov	r6, r0
 800b0a8:	b928      	cbnz	r0, 800b0b6 <_calloc_r+0x1e>
 800b0aa:	2600      	movs	r6, #0
 800b0ac:	4630      	mov	r0, r6
 800b0ae:	bd70      	pop	{r4, r5, r6, pc}
 800b0b0:	220c      	movs	r2, #12
 800b0b2:	6002      	str	r2, [r0, #0]
 800b0b4:	e7f9      	b.n	800b0aa <_calloc_r+0x12>
 800b0b6:	462a      	mov	r2, r5
 800b0b8:	4621      	mov	r1, r4
 800b0ba:	f7fd fb46 	bl	800874a <memset>
 800b0be:	e7f5      	b.n	800b0ac <_calloc_r+0x14>

0800b0c0 <_realloc_r>:
 800b0c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0c4:	4680      	mov	r8, r0
 800b0c6:	4615      	mov	r5, r2
 800b0c8:	460c      	mov	r4, r1
 800b0ca:	b921      	cbnz	r1, 800b0d6 <_realloc_r+0x16>
 800b0cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d0:	4611      	mov	r1, r2
 800b0d2:	f7fe bde7 	b.w	8009ca4 <_malloc_r>
 800b0d6:	b92a      	cbnz	r2, 800b0e4 <_realloc_r+0x24>
 800b0d8:	f7fe fa36 	bl	8009548 <_free_r>
 800b0dc:	2400      	movs	r4, #0
 800b0de:	4620      	mov	r0, r4
 800b0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b0e4:	f000 f8b7 	bl	800b256 <_malloc_usable_size_r>
 800b0e8:	4285      	cmp	r5, r0
 800b0ea:	4606      	mov	r6, r0
 800b0ec:	d802      	bhi.n	800b0f4 <_realloc_r+0x34>
 800b0ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b0f2:	d8f4      	bhi.n	800b0de <_realloc_r+0x1e>
 800b0f4:	4629      	mov	r1, r5
 800b0f6:	4640      	mov	r0, r8
 800b0f8:	f7fe fdd4 	bl	8009ca4 <_malloc_r>
 800b0fc:	4607      	mov	r7, r0
 800b0fe:	2800      	cmp	r0, #0
 800b100:	d0ec      	beq.n	800b0dc <_realloc_r+0x1c>
 800b102:	42b5      	cmp	r5, r6
 800b104:	462a      	mov	r2, r5
 800b106:	4621      	mov	r1, r4
 800b108:	bf28      	it	cs
 800b10a:	4632      	movcs	r2, r6
 800b10c:	f7fd fbaf 	bl	800886e <memcpy>
 800b110:	4621      	mov	r1, r4
 800b112:	4640      	mov	r0, r8
 800b114:	f7fe fa18 	bl	8009548 <_free_r>
 800b118:	463c      	mov	r4, r7
 800b11a:	e7e0      	b.n	800b0de <_realloc_r+0x1e>

0800b11c <fiprintf>:
 800b11c:	b40e      	push	{r1, r2, r3}
 800b11e:	b503      	push	{r0, r1, lr}
 800b120:	4601      	mov	r1, r0
 800b122:	ab03      	add	r3, sp, #12
 800b124:	4805      	ldr	r0, [pc, #20]	@ (800b13c <fiprintf+0x20>)
 800b126:	f853 2b04 	ldr.w	r2, [r3], #4
 800b12a:	6800      	ldr	r0, [r0, #0]
 800b12c:	9301      	str	r3, [sp, #4]
 800b12e:	f7ff fd13 	bl	800ab58 <_vfiprintf_r>
 800b132:	b002      	add	sp, #8
 800b134:	f85d eb04 	ldr.w	lr, [sp], #4
 800b138:	b003      	add	sp, #12
 800b13a:	4770      	bx	lr
 800b13c:	200001a8 	.word	0x200001a8

0800b140 <__swhatbuf_r>:
 800b140:	b570      	push	{r4, r5, r6, lr}
 800b142:	460c      	mov	r4, r1
 800b144:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b148:	2900      	cmp	r1, #0
 800b14a:	b096      	sub	sp, #88	@ 0x58
 800b14c:	4615      	mov	r5, r2
 800b14e:	461e      	mov	r6, r3
 800b150:	da0d      	bge.n	800b16e <__swhatbuf_r+0x2e>
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b158:	f04f 0100 	mov.w	r1, #0
 800b15c:	bf14      	ite	ne
 800b15e:	2340      	movne	r3, #64	@ 0x40
 800b160:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b164:	2000      	movs	r0, #0
 800b166:	6031      	str	r1, [r6, #0]
 800b168:	602b      	str	r3, [r5, #0]
 800b16a:	b016      	add	sp, #88	@ 0x58
 800b16c:	bd70      	pop	{r4, r5, r6, pc}
 800b16e:	466a      	mov	r2, sp
 800b170:	f000 f848 	bl	800b204 <_fstat_r>
 800b174:	2800      	cmp	r0, #0
 800b176:	dbec      	blt.n	800b152 <__swhatbuf_r+0x12>
 800b178:	9901      	ldr	r1, [sp, #4]
 800b17a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b17e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b182:	4259      	negs	r1, r3
 800b184:	4159      	adcs	r1, r3
 800b186:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b18a:	e7eb      	b.n	800b164 <__swhatbuf_r+0x24>

0800b18c <__smakebuf_r>:
 800b18c:	898b      	ldrh	r3, [r1, #12]
 800b18e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b190:	079d      	lsls	r5, r3, #30
 800b192:	4606      	mov	r6, r0
 800b194:	460c      	mov	r4, r1
 800b196:	d507      	bpl.n	800b1a8 <__smakebuf_r+0x1c>
 800b198:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b19c:	6023      	str	r3, [r4, #0]
 800b19e:	6123      	str	r3, [r4, #16]
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	6163      	str	r3, [r4, #20]
 800b1a4:	b003      	add	sp, #12
 800b1a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1a8:	ab01      	add	r3, sp, #4
 800b1aa:	466a      	mov	r2, sp
 800b1ac:	f7ff ffc8 	bl	800b140 <__swhatbuf_r>
 800b1b0:	9f00      	ldr	r7, [sp, #0]
 800b1b2:	4605      	mov	r5, r0
 800b1b4:	4639      	mov	r1, r7
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7fe fd74 	bl	8009ca4 <_malloc_r>
 800b1bc:	b948      	cbnz	r0, 800b1d2 <__smakebuf_r+0x46>
 800b1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b1c2:	059a      	lsls	r2, r3, #22
 800b1c4:	d4ee      	bmi.n	800b1a4 <__smakebuf_r+0x18>
 800b1c6:	f023 0303 	bic.w	r3, r3, #3
 800b1ca:	f043 0302 	orr.w	r3, r3, #2
 800b1ce:	81a3      	strh	r3, [r4, #12]
 800b1d0:	e7e2      	b.n	800b198 <__smakebuf_r+0xc>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	6020      	str	r0, [r4, #0]
 800b1d6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b1da:	81a3      	strh	r3, [r4, #12]
 800b1dc:	9b01      	ldr	r3, [sp, #4]
 800b1de:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b1e2:	b15b      	cbz	r3, 800b1fc <__smakebuf_r+0x70>
 800b1e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	f000 f81d 	bl	800b228 <_isatty_r>
 800b1ee:	b128      	cbz	r0, 800b1fc <__smakebuf_r+0x70>
 800b1f0:	89a3      	ldrh	r3, [r4, #12]
 800b1f2:	f023 0303 	bic.w	r3, r3, #3
 800b1f6:	f043 0301 	orr.w	r3, r3, #1
 800b1fa:	81a3      	strh	r3, [r4, #12]
 800b1fc:	89a3      	ldrh	r3, [r4, #12]
 800b1fe:	431d      	orrs	r5, r3
 800b200:	81a5      	strh	r5, [r4, #12]
 800b202:	e7cf      	b.n	800b1a4 <__smakebuf_r+0x18>

0800b204 <_fstat_r>:
 800b204:	b538      	push	{r3, r4, r5, lr}
 800b206:	4d07      	ldr	r5, [pc, #28]	@ (800b224 <_fstat_r+0x20>)
 800b208:	2300      	movs	r3, #0
 800b20a:	4604      	mov	r4, r0
 800b20c:	4608      	mov	r0, r1
 800b20e:	4611      	mov	r1, r2
 800b210:	602b      	str	r3, [r5, #0]
 800b212:	f7f7 f837 	bl	8002284 <_fstat>
 800b216:	1c43      	adds	r3, r0, #1
 800b218:	d102      	bne.n	800b220 <_fstat_r+0x1c>
 800b21a:	682b      	ldr	r3, [r5, #0]
 800b21c:	b103      	cbz	r3, 800b220 <_fstat_r+0x1c>
 800b21e:	6023      	str	r3, [r4, #0]
 800b220:	bd38      	pop	{r3, r4, r5, pc}
 800b222:	bf00      	nop
 800b224:	20000764 	.word	0x20000764

0800b228 <_isatty_r>:
 800b228:	b538      	push	{r3, r4, r5, lr}
 800b22a:	4d06      	ldr	r5, [pc, #24]	@ (800b244 <_isatty_r+0x1c>)
 800b22c:	2300      	movs	r3, #0
 800b22e:	4604      	mov	r4, r0
 800b230:	4608      	mov	r0, r1
 800b232:	602b      	str	r3, [r5, #0]
 800b234:	f7f7 f836 	bl	80022a4 <_isatty>
 800b238:	1c43      	adds	r3, r0, #1
 800b23a:	d102      	bne.n	800b242 <_isatty_r+0x1a>
 800b23c:	682b      	ldr	r3, [r5, #0]
 800b23e:	b103      	cbz	r3, 800b242 <_isatty_r+0x1a>
 800b240:	6023      	str	r3, [r4, #0]
 800b242:	bd38      	pop	{r3, r4, r5, pc}
 800b244:	20000764 	.word	0x20000764

0800b248 <abort>:
 800b248:	b508      	push	{r3, lr}
 800b24a:	2006      	movs	r0, #6
 800b24c:	f000 f834 	bl	800b2b8 <raise>
 800b250:	2001      	movs	r0, #1
 800b252:	f7f6 ffe3 	bl	800221c <_exit>

0800b256 <_malloc_usable_size_r>:
 800b256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b25a:	1f18      	subs	r0, r3, #4
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	bfbc      	itt	lt
 800b260:	580b      	ldrlt	r3, [r1, r0]
 800b262:	18c0      	addlt	r0, r0, r3
 800b264:	4770      	bx	lr

0800b266 <_raise_r>:
 800b266:	291f      	cmp	r1, #31
 800b268:	b538      	push	{r3, r4, r5, lr}
 800b26a:	4605      	mov	r5, r0
 800b26c:	460c      	mov	r4, r1
 800b26e:	d904      	bls.n	800b27a <_raise_r+0x14>
 800b270:	2316      	movs	r3, #22
 800b272:	6003      	str	r3, [r0, #0]
 800b274:	f04f 30ff 	mov.w	r0, #4294967295
 800b278:	bd38      	pop	{r3, r4, r5, pc}
 800b27a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b27c:	b112      	cbz	r2, 800b284 <_raise_r+0x1e>
 800b27e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b282:	b94b      	cbnz	r3, 800b298 <_raise_r+0x32>
 800b284:	4628      	mov	r0, r5
 800b286:	f000 f831 	bl	800b2ec <_getpid_r>
 800b28a:	4622      	mov	r2, r4
 800b28c:	4601      	mov	r1, r0
 800b28e:	4628      	mov	r0, r5
 800b290:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b294:	f000 b818 	b.w	800b2c8 <_kill_r>
 800b298:	2b01      	cmp	r3, #1
 800b29a:	d00a      	beq.n	800b2b2 <_raise_r+0x4c>
 800b29c:	1c59      	adds	r1, r3, #1
 800b29e:	d103      	bne.n	800b2a8 <_raise_r+0x42>
 800b2a0:	2316      	movs	r3, #22
 800b2a2:	6003      	str	r3, [r0, #0]
 800b2a4:	2001      	movs	r0, #1
 800b2a6:	e7e7      	b.n	800b278 <_raise_r+0x12>
 800b2a8:	2100      	movs	r1, #0
 800b2aa:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b2ae:	4620      	mov	r0, r4
 800b2b0:	4798      	blx	r3
 800b2b2:	2000      	movs	r0, #0
 800b2b4:	e7e0      	b.n	800b278 <_raise_r+0x12>
	...

0800b2b8 <raise>:
 800b2b8:	4b02      	ldr	r3, [pc, #8]	@ (800b2c4 <raise+0xc>)
 800b2ba:	4601      	mov	r1, r0
 800b2bc:	6818      	ldr	r0, [r3, #0]
 800b2be:	f7ff bfd2 	b.w	800b266 <_raise_r>
 800b2c2:	bf00      	nop
 800b2c4:	200001a8 	.word	0x200001a8

0800b2c8 <_kill_r>:
 800b2c8:	b538      	push	{r3, r4, r5, lr}
 800b2ca:	4d07      	ldr	r5, [pc, #28]	@ (800b2e8 <_kill_r+0x20>)
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	4604      	mov	r4, r0
 800b2d0:	4608      	mov	r0, r1
 800b2d2:	4611      	mov	r1, r2
 800b2d4:	602b      	str	r3, [r5, #0]
 800b2d6:	f7f6 ff91 	bl	80021fc <_kill>
 800b2da:	1c43      	adds	r3, r0, #1
 800b2dc:	d102      	bne.n	800b2e4 <_kill_r+0x1c>
 800b2de:	682b      	ldr	r3, [r5, #0]
 800b2e0:	b103      	cbz	r3, 800b2e4 <_kill_r+0x1c>
 800b2e2:	6023      	str	r3, [r4, #0]
 800b2e4:	bd38      	pop	{r3, r4, r5, pc}
 800b2e6:	bf00      	nop
 800b2e8:	20000764 	.word	0x20000764

0800b2ec <_getpid_r>:
 800b2ec:	f7f6 bf7e 	b.w	80021ec <_getpid>

0800b2f0 <_init>:
 800b2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2f2:	bf00      	nop
 800b2f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b2f6:	bc08      	pop	{r3}
 800b2f8:	469e      	mov	lr, r3
 800b2fa:	4770      	bx	lr

0800b2fc <_fini>:
 800b2fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b2fe:	bf00      	nop
 800b300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b302:	bc08      	pop	{r3}
 800b304:	469e      	mov	lr, r3
 800b306:	4770      	bx	lr
